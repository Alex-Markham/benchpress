{
    "title": "JSON schema for BenchPress config file.",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$id": "http://github.com/felixleopoldo/benchpress/schema/config.schema.json",
    "type": "object",
    "properties": {
        "benchmark_setup": {
            "title": "Benchmark setup",
            "description": "Description of the benchmarking setup.",
            "type": "object",
            "properties": {
                "data": {
                    "title": "Data setup",
                    "description": "A list of data setup instantiations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/data_setup_dict"
                    },
                    "uniqueItems": true
                },
                "evaluation": {
                    "title": "Evaluation methods",
                    "properties": {
                        "roc": {
                            "$ref": "#/definitions/roc"
                        },
                        "adjmat_true_plots": {
                            "type": "boolean"
                        },
                        "graph_true_plots": {
                            "type": "boolean"
                        },
                        "adjmat_plots": {
                            "type": "array"
                        },
                        "graph_plots": {
                            "type": "array"
                        },
                        "mcmc_traj_plots": {
                            "$ref": "#/definitions/mcmc_traj_plots"
                        },
                        "mcmc_heatmaps": {
                            "$ref": "#/definitions/mcmc_heatmaps"
                        },
                        "mcmc_autocorr_plots": {
                            "$ref": "#/definitions/mcmc_autocorr_plots"
                        }
                    },
                    "required": [
                        "roc",
                        "adjmat_true_plots",
                        "graph_true_plots",
                        "adjmat_plots",
                        "graph_plots",
                        "mcmc_traj_plots",
                        "mcmc_heatmaps",
                        "mcmc_autocorr_plots"
                    ],
                    "additionalProperties": false
                }
            },
            "required": [
                "data",
                "evaluation"
            ],
            "additionalProperties": false
        },
        "resources": {
            "title": "Resources",
            "description": "Algorithms and files available for benchmarking.",
            "properties": {
                "data": {
                    "title": "Data sampling algorithms",
                    "description": "Data sampling setup.",
                    "type": "object",
                    "properties": {
                        "iid": {
                            "title": "List of iid setups.",
                            "description": "List of iid setups.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/iid"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                },
                "graph": {
                    "title": "Graph sampling algorithms",
                    "description": "The available graph sampling algorithms.",
                    "type": "object",
                    "properties": {
                        "pcalg_randdag": {
                            "title": "List of pcalg_randdag instantiations",
                            "description": "List of pcalg_randdag instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pcalg_randdag"
                            },
                            "uniqueItems": true
                        },
                        "notears": {
                            "title": "Notears DAG sampling id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notears_dag_sampling"
                            },
                            "uniqueItems": true
                        },
                        "trilearn_cta": {
                            "title": "Christmas tree algorithm id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_cta"
                            },
                            "uniqueItems": true
                        },
                        "bandmat": {
                            "title": "Band matrix id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bandmat"
                            },
                            "uniqueItems": true
                        },
                        "rand_bandmat": {
                            "title": "Random sized band matrix id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rand_bandmat"
                            },
                            "uniqueItems": true
                        },
                        "bdgraph_graphsim": {
                            "title": "BDgraph graph.sim",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bdgraph_graphsim"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                },
                "parameters": {
                    "title": "Parameters sampling algorithm",
                    "description": "The available parameter sampling algorithms",
                    "type": "object",
                    "properties": {
                        "bin_bn": {
                            "description": "List of generateBinayBN instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bin_bn"
                            },
                            "uniqueItems": true
                        },
                        "notears_parameters_sampling": {
                            "title": "List of notears id's",
                            "description": "List of notears id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notears_parameters_sampling"
                            },
                            "uniqueItems": true
                        },
                        "sem_params": {
                            "title": "List of sem_params id's",
                            "description": "List of sem_params id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/sem_params"
                            },
                            "uniqueItems": true
                        },
                        "trilearn_hyper-dir": {
                            "title": "List of Hyper-Dirichlet id's",
                            "description": "List of trilearn_hyper-dir id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_hyper-dir"
                            },
                            "uniqueItems": true
                        },
                        "trilearn_intra-class": {
                            "title": "List of graph intra-class id's",
                            "description": "List of intra-class id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_intra-class"
                            },
                            "uniqueItems": true
                        },
                        "trilearn_g_inv_wishart": {
                            "title": "List of graph inverse-Wishart id's",
                            "description": "List of graph inverse-Wishart id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_g_inv_wishart"
                            },
                            "uniqueItems": true
                        },
                        "bdgraph_rgwish": {
                            "title": "List of graph inverse-Wishart id's",
                            "description": "List of graph inverse-Wishart id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bdgraph_rgwish"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": true
                },
                "structure_learning_algorithms": {
                    "title": "Available structure learning algorithms",
                    "description": "The available structure learning algorithms",
                    "type": "object",
                    "properties": {
                        "trilearn_pgibbs": {
                            "title": "List of trilearn instantiations",
                            "description": "List of trilearn instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_pgibbs"
                            },
                            "uniqueItems": true
                        },
                        "rblip": {
                            "title": "List of blip instantiations",
                            "description": "List of blip instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rblip"
                            }
                        },
                        "notears": {
                            "title": "Notears instantiations",
                            "description": "Notears instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notears"
                            }
                        },
                        "gobnilp": {
                            "title": "Gobnilp instantiations",
                            "description": "Gobnilp instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gobnilp"
                            }
                        },
                        "tetrad_fges": {
                            "title": "fGES instantiations",
                            "description": "fGES instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tetrad_fges"
                            }
                        },
                        "tetrad_fci": {
                            "description": "FCI instantiations",
                            "title": "FCI instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tetrad_fci"
                            }
                        },
                        "tetrad_rfci": {
                            "description": "RFCI instantiations",
                            "title": "RFCI instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tetrad_rfci"
                            }
                        },
                        "tetrad_gfci": {
                            "description": "GFCI instantiations",
                            "title": "GFCI instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tetrad_gfci"
                            }
                        },
                        "pcalg_pc": {
                            "description": "PC algorithm instantiations",
                            "title": "PC algorithm instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pcalg_pc"
                            }
                        },
                        "bnlearn_mmhc": {
                            "description": "MMHC instantiations",
                            "title": "MMHC instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bnlearn_mmhc"
                            }
                        },
                        "bnlearn_tabu": {
                            "description": "Tabu search instantiations",
                            "title": "Tabu search instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bnlearn_tabu"
                            }
                        },
                        "bidag_itsearch": {
                            "description": "Iterative +1 search instantiations",
                            "title": "Iterative +1 search instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bidag_itsearch"
                            }
                        },
                        "bidag_order_mcmc": {
                            "description": "Order MCMC instantiations",
                            "title": "Order MCMC instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bidag_order_mcmc"
                            }
                        },
                        "bnlearn_interiamb": {
                            "description": "Inter-IAMB instantiations",
                            "title": "Inter-IAMB instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bnlearn_interiamb"
                            }
                        },
                        "bnlearn_gs": {
                            "description": "GS instantiations",
                            "title": "GS instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bnlearn_interiamb"
                            }
                        },
                        "bnlearn_hc": {
                            "description": "HC instantiations",
                            "title": "HC instantiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bnlearn_hc"
                            }
                        },
                        "gt13_multipair": {
                            "description": "Green & Thomas instantiations",
                            "title": "Green & Thomas id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gt13_multipair"
                            }
                        },
                        "gg99_singlepair": {
                            "description": "Guidici & Green parametrisarion",
                            "title": "Guidici & Green id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gg99_singlepair"
                            }
                        },
                        "sklearn_glasso": {
                            "description": "GLasso scikit-learn implementation",
                            "title": "GLasso",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/sklearn_glasso"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [
                "data",
                "graph",
                "parameters",
                "structure_learning_algorithms"
            ],
            "additionalProperties": false
        }
    },
    "definitions": {
        "mcmc_autocorr_plots": {
            "type": "array",
            "additionalItems": false,
            "items": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "burn_in": {
                        "$ref": "#/definitions/flexnonnegint"
                    },
                    "thinning": {
                        "$ref": "#/definitions/flexnonnegintnull"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "lags": {
                        "$ref": "#/definitions/flexnonnegintnull"
                    },
                    "functional": {
                        "anyOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "score",
                                    "size"
                                ]
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "score",
                                        "size"
                                    ]
                                }
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "burn_in",
                    "thinning",
                    "functional",
                    "lags",
                    "active"
                ]
            }
        },
        "mcmc_traj_plots": {
            "type": "array",
            "items": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "burn_in": {
                        "$ref": "#/definitions/flexnonnegint"
                    },
                    "thinning": {
                        "$ref": "#/definitions/flexnonnegintnull"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "functional": {
                        "anyOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "score",
                                    "size"
                                ]
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "score",
                                        "size"
                                    ]
                                }
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "burn_in",
                    "thinning",
                    "functional",
                    "active"
                ]
            },
            "additionalItems": false
        },
        "mcmc_heatmaps": {
            "type": "array",
            "additionalItems": false,
            "items": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "burn_in": {
                        "$ref": "#/definitions/flexnonnegint"
                    }
                },
                "required": [
                    "id",
                    "burn_in",
                    "active"
                ]
            }
        },
        "notears_parameters_sampling": {
            "title": "Notears parameter sampling for Gaissian Bayesian networks",
            "description": "Notears parameter sampling for Gaissian Bayesian networks. This requires that the adjaceny_matrix (graph) is of type notears_dag_sampling",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "edge_coefficient_range_from": {
                    "$ref": "#/definitions/nonnegnum"
                },
                "edge_coefficient_range_to": {
                    "$ref": "#/definitions/nonnegnum"
                }
            }
        },
        "bn.fit_networks": {
            "title": "Bn.fit network file",
            "description": "Bayesian network in bn.fit type serialised as .rds file.",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "filename": {
                    "title": "ID",
                    "type": "string"
                },
                "source": {
                    "title": "Source",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "filename",
                "source"
            ],
            "additionalProperties": false
        },
        "notears_dag_sampling": {
            "title": "Notears DAG sampling",
            "description": "Graph sampling method provided by the notears package. \n Documentation: https://github.com/jmoss20/notears",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "num_nodes": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "num_edges": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "mean": {
                    "title": "Mean",
                    "type": "number"
                },
                "variance": {
                    "title": "Variance",
                    "type": "number"
                }
            },
            "required": [
                "id",
                "num_nodes",
                "num_edges"
            ],
            "additionalProperties": false
        },
        "trilearn_cta": {
            "title": "CTA decomposable graph sampling",
            "description": "Graph sampling method provided by the trilearn package. \n Documentation: https://github.com/felixleopoldo/trilearn",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "order": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "beta": {
                    "$ref": "#/definitions/flexprob"
                }
            },
            "required": [
                "id",
                "order",
                "alpha",
                "beta"
            ],
            "additionalProperties": false
        },
        "bandmat": {
            "title": "Band matrix",
            "description": "A graph with a band structured adjacency matrix",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "dim": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "bandwidth": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": [
                "id",
                "dim",
                "bandwidth"
            ],
            "additionalProperties": false
        },
        "bdgraph_graphsim": {
            "title": "Random undirected graph",
            "description": "BDgraph graph.sim",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "p": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prob": {
                    "$ref": "#/definitions/flexprob"
                },
                "graph": {
                    "type": "string",
                    "enum": [
                        "random",
                        "cluster",
                        "scale-free",
                        "hub",
                        "circle",
                        "star",
                        "lattice"
                    ]
                },
                "class": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "size": {
                    "$ref": "#/definitions/flexnonnegintnull"
                }
            },
            "required": [
                "p",
                "graph",
                "class",
                "size",
                "id",
                "prob"
            ],
            "additionalProperties": false
        },
        "rand_bandmat": {
            "title": "Random band matrix",
            "description": "A graph with a band structured adjacency matrix with random width",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "dim": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "max_bandwidth": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": [
                "id",
                "dim",
                "max_bandwidth"
            ],
            "additionalProperties": false
        },
        "roc": {
            "title": "ROC item",
            "description": "ROC item",
            "type": "object",
            "properties": {
                "ids": {
                    "list": "string"
                },
                "filename_prefix": {
                    "type": "string"
                },
                "point": {
                    "type": "boolean"
                },
                "text": {
                    "type": "boolean"
                },
                "path": {
                    "type": "boolean"
                },
                "errorbar": {
                    "type": "boolean"
                }
            }
        },
        "data_setup_dict": {
            "type": "object",
            "title": "Data setup",
            "description": "Description of the data model and sampling setup. Make sure that the id's are properly combined.",
            "properties": {
                "graph_id": {
                    "title": "Graph",
                    "description": "ID of the graph instantiation.",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "parameters_id": {
                    "title": "Parameters",
                    "description": "Parameters ID.",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "data_id": {
                    "title": "Data",
                    "description": "Data sampling method ID.",
                    "type": "string"
                },
                "seed_range": {
                    "title": "Seed range",
                    "description": "This data setup will be simulated for this range of seeds. E.g. seed_range:[1,3] will generate 3 datsets (and corresponding models) with seeds 1,2,3.",
                    "anyOf": [
                        {
                            "title": "List of 2 integers [a, b], where a<=b.",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxLength": 2,
                            "minLength": 2
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "required": [
                "graph_id",
                "parameters_id",
                "data_id",
                "seed_range"
            ],
            "additionalProperties": false
        },
        "iid": {
            "title": "Standard sampling",
            "description": "Data sampling from disctete Bayesian network.",
            "type": "object",
            "properties": {
                "id": {
                    "title": "Unique ID",
                    "type": "string"
                },
                "sample_sizes": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "standardized": {
                    "type": "boolean"
                }
            },
            "required": [
                "id",
                "sample_sizes",
                "standardized"
            ],
            "additionalProperties": false
        },
        "pcalg_randdag": {
            "title": "pcalg randDAG",
            "description": "An instance of pcalg randdag. Sampling of a DAG with specified maximum averge number for parents for the nodes.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "n": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "d": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "par1": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "par2": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "method": {
                    "type": "string"
                },
                "max_parents": {
                    "$ref": "#/definitions/flexnonnegintnull"
                }
            },
            "required": [
                "id",
                "max_parents",
                "d",
                "n",
                "par1",
                "par2",
                "method"
            ],
            "additionalProperties": false
        },
        "bin_bn": {
            "title": "bin_bn",
            "description": "Parameter setting for generateBinaryBN",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "min": {
                    "$ref": "#/definitions/flexprob"
                },
                "max": {
                    "$ref": "#/definitions/flexprob"
                }
            },
            "required": [
                "min",
                "max",
                "id"
            ],
            "additionalProperties": false
        },
        "trilearn_hyper-dir": {
            "title": "Hyper-Dirichlet",
            "description": "Parameter setting for a hyper Dirichlet distribution",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "n_levels": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "pseudo_obs": {
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "required": [
                "n_levels",
                "pseudo_obs",
                "id"
            ],
            "additionalProperties": false
        },
        "trilearn_intra-class": {
            "title": "Graph intra-class model",
            "description": "Parameter setting for a graph intra-class model",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "rho": {
                    "$ref": "#/definitions/flexprob"
                },
                "sigma2": {
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "required": [
                "rho",
                "sigma2",
                "id"
            ],
            "additionalProperties": false
        },
        "trilearn_g_inv_wishart": {
            "title": "Graph graph inverse-Wishart model",
            "description": "Parameter setting for a graph inverse-Wishart model",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "dof": {
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "required": [
                "dof",
                "id"
            ],
            "additionalProperties": false
        },
        "bdgraph_rgwish": {
            "title": "Graph graph inverse-Wishart model",
            "description": "Parameter setting for a graph inverse-Wishart model. Works for all undirected graphs.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "b": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "threshold": {
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "required": [
                "b",
                "id",
                "threshold"
            ],
            "additionalProperties": false
        },
        "sem_params": {
            "title": "PCalg SEM params",
            "description": "Parameter setting for PC alg DAG sampling",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "min": {
                    "$ref": "#/definitions/flexprob"
                },
                "max": {
                    "$ref": "#/definitions/flexprob"
                }
            },
            "required": [
                "min",
                "max",
                "id"
            ],
            "additionalProperties": false
        },
        "prob": {
            "title": "Probabaility",
            "description": "Number in the range [0,1].",
            "type": "number",
            "minimum": 0,
            "maximum": 1
        },
        "natnum": {
            "title": "Positive integer",
            "description": "Positive integer",
            "type": "integer",
            "minimum": 1
        },
        "nonnegint": {
            "title": "Non-negative integer",
            "description": "Non-negative integer, 0,1,2,...",
            "type": "integer",
            "minimum": 0
        },
        "nonnegnum": {
            "title": "Non-negative number",
            "description": "Non-negative number",
            "type": "number",
            "minimum": 0
        },
        "flexnonnegnum": {
            "description": "Non-negative number(s).",
            "anyOf": [
                {
                    "$ref": "#/definitions/nonnegnum"
                },
                {
                    "type": "array",
                    "title": "Non-negative number list",
                    "description": "List of non-negative numbers",
                    "items": {
                        "$ref": "#/definitions/nonnegnum"
                    }
                }
            ]
        },
        "flexnonnegnumnull": {
            "title": "Non-negative number(s) or null",
            "description": "E.g. 1.5 or [1.6, 3.8] or null.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                {
                    "type": "null"
                }
            ]
        },
        "flexnonnegint": {
            "title": "Non-negative integer(s)",
            "description": "Non-negative integers, (0,1,2,...), or array of the same.",
            "anyOf": [
                {
                    "$ref": "#/definitions/nonnegint"
                },
                {
                    "type": "array",
                    "title": "Non-negative integer list",
                    "items": {
                        "$ref": "#/definitions/nonnegint"
                    }
                }
            ]
        },
        "flexnonnegintnull": {
            "title": "Non-negative integer(s), or null.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnonnegint"
                },
                {
                    "type": "null"
                }
            ]
        },
        "flexnonnegintstring": {
            "title": "Non-negative integer(s), or Inf string.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnonnegint"
                },
                {
                    "type": "string",
                    "enum": [
                        "Inf"
                    ]
                }
            ]
        },
        "flexnatnum": {
            "title": "Non-negative integer(s)",
            "anyOf": [
                {
                    "$ref": "#/definitions/natnum"
                },
                {
                    "title": "Positive integer list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/natnum"
                    }
                }
            ]
        },
        "flexnatnumnull": {
            "title": "Npn-negative integer or null",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnatnum"
                },
                {
                    "type": "null"
                }
            ]
        },
        "flexprob": {
            "title": "Number(s) in the range [0,1].",
            "anyOf": [
                {
                    "$ref": "#/definitions/prob"
                },
                {
                    "type": "array",
                    "title": "Probability list",
                    "items": {
                        "$ref": "#/definitions/prob"
                    }
                }
            ]
        },
        "flexprobnull": {
            "title": "Number(s) in the range [0,1], or null.",
            "description": "Number(s) in the range [0,1], or null.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexprob"
                },
                {
                    "type": "null"
                }
            ]
        },
        "trilearn_pgibbs": {
            "title": "Trilearn",
            "description": "Parameter setting for trilearn with log-linear decomposable model.",
            "type": "object",
            "properties": {
                "id": {
                    "desciption": "Algorithm identifier",
                    "type": "string"
                },
                "datatype": {
                    "type": "string",
                    "enum": [
                        "discrete",
                        "continuous"
                    ]
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "beta": {
                    "$ref": "#/definitions/flexprob"
                },
                "pseudo_obs": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "radii": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "mcmc_seed": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": [
                "id",
                "datatype",
                "alpha",
                "beta",
                "radii",
                "N",
                "M",
                "pseudo_obs",
                "mcmc_seed"
            ]
        },
        "rblip": {
            "title": "Blip instantiation",
            "description": "Blip instantiation",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "title": "Unique identifier",
                    "description": "Unique identifier for that can be used as reference in the benchmark_setup."
                },
                "scorermethod": {
                    "type": "string"
                },
                "solvermethod": {
                    "type": "string"
                },
                "indeg": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "time": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "allocated": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "scorefunction": {
                    "type": "string"
                },
                "alpha": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "cores": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "verbose": {
                    "$ref": "#/definitions/nonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "scorermethod",
                "solvermethod",
                "indeg",
                "time",
                "allocated",
                "scorefunction",
                "alpha",
                "cores",
                "verbose"
            ]
        },
        "notears": {
            "title": "Notears",
            "description": "Notears instantiation",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "min_rate_of_progress": {
                    "$ref": "#/definitions/flexprob"
                },
                "penalty_growth_rate": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "optimation_accuracy": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "loss": {
                    "type": "string",
                    "enum": [
                        "least_squares_loss",
                        "least_squares_loss_cov"
                    ]
                },
                "loss_grad": {
                    "type": "string",
                    "enum": [
                        "least_squares_loss_grad",
                        "least_squares_loss_cov_grad"
                    ]
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "min_rate_of_progress",
                "penalty_growth_rate",
                "optimation_accuracy",
                "loss",
                "loss_grad"
            ]
        },
        "gobnilp": {
            "title": "Gobnilp algorithm",
            "description": "Gobnilp instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "continuous": {
                    "type": "boolean"
                },
                "score_type": {
                    "type": "string",
                    "enum": [
                        "BGe",
                        "BDeu",
                        "BIC"
                    ]
                },
                "plot": {
                    "type": "boolean"
                },
                "palim": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "alpha": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "alpha_omega_minus_nvars": {
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "alpha_mu": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "prune": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "plot",
                "palim",
                "alpha",
                "prune"
            ]
        },
        "sklearn_glasso": {
            "title": "GLasso algorithm",
            "description": "GLasso instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "mode": {
                    "type": "string",
                    "enum": [
                        "cd",
                        "lars"
                    ]
                },
                "max_iter": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "alpha": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "tol": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "enet_tol": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "precmat_threshold": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "verbose": {
                    "type": "boolean"
                },
                "assume_centered": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "mode",
                "max_iter",
                "alpha",
                "tol",
                "enet_tol",
                "verbose",
                "precmat_threshold",
                "assume_centered"
            ]
        },
        "gt13_multipair": {
            "title": "Green & Thomas algorithm for sampling from decomposable graph distributions",
            "description": "Green & Thomas algorithm for learning decomopasble graphs.\n Source: Green, P. J., & Thomas, A. (2013). Sampling decomposable graphs using a Markov chain on junction trees. Biometrika, 100(1), 91-110.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "datatype": {
                    "type": "string",
                    "enum": [
                        "discrete",
                        "continuous"
                    ]
                },
                "n_samples": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "penalty": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "randomits": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior": {
                    "type": "string",
                    "enum": [
                        "bc",
                        "mbc",
                        "ep"
                    ]
                },
                "ascore": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "bscore": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "clq": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "sep": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "mcmc_seed": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "n_samples",
                "prior",
                "mcmc_seed",
                "randomits"
            ]
        },
        "gg99_singlepair": {
            "title": "Guidici & Green algorithm for sampling from decomposable graph distributions",
            "description": "Guidici & Green algorithm for learning decomopasble graphs.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "datatype": {
                    "type": "string",
                    "enum": [
                        "discrete",
                        "continuous"
                    ]
                },
                "n_samples": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "penalty": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "randomits": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior": {
                    "type": "string"
                },
                "ascore": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "bscore": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "clq": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "sep": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "mcmc_seed": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "n_samples",
                "prior",
                "mcmc_seed",
                "randomits"
            ]
        },
        "tetrad_fges": {
            "title": "Fast greedy equivalent search (fGES)",
            "description": "fGES instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "faithfulnessAssumed": {
                    "type": "boolean"
                },
                "score": {
                    "type": "string"
                },
                "datatype": {
                    "type": "string"
                },
                "samplePrior": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "penaltyDiscount": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "structurePrior": {
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "faithfulnessAssumed",
                "score",
                "datatype",
                "samplePrior",
                "structurePrior",
                "penaltyDiscount"
            ]
        },
        "tetrad_fci": {
            "title": "FCI",
            "description": "FCI instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "bdeu-test",
                        "cci-test",
                        "cg-lr-test",
                        "chi-square-test",
                        "d-sep-test",
                        "disc-bic-test",
                        "fisher-z-test",
                        "g-square-test",
                        "kci-test",
                        "prob-test"
                    ]
                },
                "datatype": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "test",
                "alpha"
            ]
        },
        "tetrad_gfci": {
            "title": "GFCI (parameter setting)",
            "description": "GFCI instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "bdeu-test",
                        "cci-test",
                        "cg-lr-test",
                        "chi-square-test",
                        "d-sep-test",
                        "disc-bic-test",
                        "fisher-z-test",
                        "g-square-test",
                        "kci-test",
                        "prob-test"
                    ]
                },
                "score": {
                    "type": "string",
                    "enum": [
                        "bdeu-score",
                        "cci-score",
                        "cg-bic-score",
                        "d-sep-score",
                        "disc-bic-score",
                        "sem-bic"
                    ]
                },
                "datatype": {
                    "type": "string"
                },
                "samplePrior": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "structurePrior": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "penaltyDiscount": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                }
            },
            "required": [
                "id",
                "test",
                "structurePrior",
                "penaltyDiscount"
            ]
        },
        "tetrad_rfci": {
            "title": "RFCI",
            "description": "RFCI instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "bdeu-test",
                        "cci-test",
                        "cg-lr-test",
                        "chi-square-test",
                        "d-sep-test",
                        "disc-bic-test",
                        "fisher-z-test",
                        "g-square-test",
                        "kci-test",
                        "prob-test"
                    ]
                },
                "datatype": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "test"
            ]
        },
        "pcalg_pc": {
            "title": "PC algorithm",
            "description": "PC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "indepTest": {
                    "type": "string",
                    "enum": [
                        "binCItest",
                        "gaussCItest",
                        "dsepTest",
                        "disCItest"
                    ]
                },
                "numCores": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "verbose": {
                    "type": "boolean"
                },
                "NAdelete": {
                    "type": "boolean"
                },
                "mmax": {
                    "$ref": "#/definitions/flexnonnegintstring"
                },
                "u2pd": {
                    "type": "string",
                    "enum": [
                        "relaxed",
                        "rand",
                        "retry"
                    ]
                },
                "skelmethod": {
                    "type": "string",
                    "enum": [
                        "stable",
                        "original",
                        "stable.fast"
                    ]
                },
                "conservative": {
                    "type": "boolean"
                },
                "majrule": {
                    "type": "boolean"
                },
                "solveconfl": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha"
            ]
        },
        "bnlearn_mmhc": {
            "title": "Max-min hill climbing algorithm (MMHC)",
            "description": "MMHC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "mi",
                        "mi-adf",
                        "mc-mi",
                        "smc-mi",
                        "sp-mi",
                        "mi-sh",
                        "x2",
                        "x2-adf",
                        "sp-x2",
                        "jt",
                        "mc-jt",
                        "smc-jt",
                        "cor",
                        "mc-cor",
                        "smc-cor",
                        "zf",
                        "mc-zf",
                        "smc-zf",
                        "mi-g",
                        "mc-mi-g",
                        "smc-mi-g",
                        "mi-g-sh",
                        "mi-cg"
                    ]
                },
                "beta": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "score": {
                    "type": "string"
                },
                "iss": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "issmu": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "issw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "l": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "k": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "prior": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha"
            ]
        },
        "bnlearn_interiamb": {
            "title": "Inter-IAMB algorithm",
            "description": "Inter-IAMB algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "mi",
                        "mi-adf",
                        "mc-mi",
                        "smc-mi",
                        "sp-mi",
                        "mi-sh",
                        "x2",
                        "x2-adf",
                        "sp-x2",
                        "jt",
                        "mc-jt",
                        "smc-jt",
                        "cor",
                        "mc-cor",
                        "smc-cor",
                        "zf",
                        "mc-zf",
                        "smc-zf",
                        "mi-g",
                        "mc-mi-g",
                        "smc-mi-g",
                        "mi-g-sh",
                        "mi-cg"
                    ]
                },
                "B": {
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "maxsx": {
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "debug": {
                    "type": "boolean"
                },
                "undirected": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha",
                "test",
                "B",
                "maxsx",
                "debug",
                "undirected"
            ]
        },
        "bnlearn_gs": {
            "title": "Grow shrink (GS) algorithm (paramter setting)",
            "description": "Grow shrink (GS) algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "mi",
                        "mi-adf",
                        "mc-mi",
                        "smc-mi",
                        "sp-mi",
                        "mi-sh",
                        "x2",
                        "x2-adf",
                        "sp-x2",
                        "jt",
                        "mc-jt",
                        "smc-jt",
                        "cor",
                        "mc-cor",
                        "smc-cor",
                        "zf",
                        "mc-zf",
                        "smc-zf",
                        "mi-g",
                        "mc-mi-g",
                        "smc-mi-g",
                        "mi-g-sh",
                        "mi-cg"
                    ]
                },
                "B": {
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "maxsx": {
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "debug": {
                    "type": "boolean"
                },
                "undirected": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha",
                "test",
                "B",
                "maxsx",
                "debug",
                "undirected"
            ]
        },
        "bnlearn_tabu": {
            "title": "TABU search (parameter setting)",
            "description": "TABU algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "beta": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "score": {
                    "type": "string"
                },
                "iss": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "issmu": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "issw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "l": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "k": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "beta",
                "score",
                "iss",
                "issmu",
                "l",
                "k",
                "prior"
            ]
        },
        "bnlearn_hc": {
            "title": "HC algorithm (parameter setting)",
            "description": "HC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "perturb": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "restart": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "beta": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "score": {
                    "type": "string"
                },
                "iss": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "issmu": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "issw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "l": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "k": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "beta",
                "score",
                "iss",
                "issmu",
                "l",
                "k",
                "prior",
                "perturb",
                "restart"
            ]
        },
        "bidag_itsearch": {
            "title": "Iterative search (paramter setting)",
            "description": "Iterative search +1 algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "estimate": {
                    "type": "string",
                    "enum": [
                        "map",
                        "endspace"
                    ]
                },
                "MAP": {
                    "type": "boolean"
                },
                "plus1it": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "posterior": {
                    "$ref": "#/definitions/flexprobnull"
                },
                "softlimit": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "hardlimit": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "gamma": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "cpdag": {
                    "type": "boolean"
                },
                "mergetype": {
                    "type": "string",
                    "enum": [
                        "skeleton"
                    ]
                },
                "scoretype": {
                    "type": "string"
                },
                "chi": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "edgepf": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "am": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "aw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                }
            },
            "additionalProperties": false,
            "required": [
                "MAP",
                "plus1it",
                "posterior",
                "scoretype",
                "chi",
                "edgepf",
                "am",
                "aw",
                "softlimit",
                "hardlimit",
                "alpha",
                "gamma",
                "cpdag",
                "mergetype",
                "estimate"
            ]
        },
        "bidag_order_mcmc": {
            "title": "Order MCMC (parameter setting)",
            "description": "Order MCMC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "startspace_algorithm": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        },
                        {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ]
                },
                "plus1": {
                    "type": "boolean"
                },
                "scoretype": {
                    "type": "string"
                },
                "MAP": {
                    "type": "boolean"
                },
                "chi": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "edgepf": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "am": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "aw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "iterations": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "stepsave": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprobnull"
                },
                "gamma": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "cpdag": {
                    "type": "boolean"
                },
                "threshold": {
                    "$ref": "#/definitions/flexprob"
                },
                "burnin": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "mcmc_seed": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "scoretype",
                "chi",
                "edgepf",
                "am",
                "aw",
                "threshold",
                "burnin",
                "startspace_algorithm",
                "plus1",
                "MAP",
                "stepsave",
                "iterations",
                "gamma"
            ]
        }
    }
}