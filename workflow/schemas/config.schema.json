{
    "title": "JSON schema for Benchpress config file.",
    "$schema": "http://json-schema.org/draft-06/schema#",
    "$id": "http://github.com/felixleopoldo/benchpress/workflow/schemas/config.schema.json",
    "type": "object",
    "properties": {
        "benchmark_setup": {
            "title": "benchmark_setup",
            "description": "Defines the actual benchmarking setup, where the resources are references by their corresponding id.",
            "type": "object",
            "properties": {
                "data": {
                    "title": "data",
                    "description": "The data setup for the study.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/data_setup_dict"
                    },
                    "uniqueItems": true,
                    "examples": [
                        [
                            {
                                "graph_id": "avneigs4_p20",
                                "parameters_id": "SEM",
                                "data_id": "standardized",
                                "seed_range": [
                                    1,
                                    3
                                ]
                            }
                        ]
                    ]
                },
                "evaluation": {
                    "title": "evaluation",
                    "description": "This section contains the available evaluation methods.",
                    "properties": {
                        "roc": {
                            "title": "roc",
                            "description": "ROC plots and other benchmarking statistics.",
                            "$ref": "#/definitions/roc",
                            "examples": [
                                {
                                    "filename_prefix": "example/",
                                    "point": true,
                                    "errorbar": true,
                                    "path": true,
                                    "text": false,
                                    "ids": [
                                        "fges-sem-bic",
                                        "mmhc-bge-zf",
                                        "omcmc_itsample-bge",
                                        "pc-gaussCItest"
                                    ]
                                }
                            ]
                        },
                        "adjmat_true_plots": {
                            "title": "adjmat_true_plots",
                            "description": "This module plots the adjacency matrices of the true graphs. The plots are saved in sub directories of results/adjmat/ and copied to results/output/adjmat_true_plots/ for easy reference.",
                            "type": "boolean",
                            "examples": [
                                {
                                    "adjmat_true_plots": true
                                }
                            ]
                        },
                        "graph_true_plots": {
                            "title": "graph_true_plots",
                            "description": "This module plots the true underlying graphs. The figures are saved in results/adjmat and copied to results/output/graph_true_plots/.",
                            "type": "boolean",
                            "examples": [
                                {
                                    "graph_true_plots": true
                                }
                            ]
                        },
                        "adjmat_plots": {
                            "title": "adjmat_plots",
                            "description": "This module plots the adjacency matrices of the estimated graphs. The figures are saved in results/adjmat and copied to results/output/adjmat_plots/.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "examples": [
                                [
                                    "fges-sem-bic",
                                    "mmhc-bge-zf",
                                    "omcmc_itsample-bge",
                                    "pc-gaussCItest"
                                ]
                            ]
                        },
                        "graph_plots": {
                            "title": "graph_plots",
                            "description": "This module plots and saves the estimated graphs in dot-format. The figures are saved in results/adjmat and copied to results/output/graph_plots/.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "examples": [
                                [
                                    "fges-sem-bic",
                                    "mmhc-bge-zf",
                                    "omcmc_itsample-bge",
                                    "pc-gaussCItest"
                                ]
                            ]
                        },
                        "mcmc_traj_plots": {
                            "title": "mcmc_traj_plots",
                            "description": "This module plots the so called score values in the trajectory or the value of a given functional. The currently supported functionals are the number of edges for the graphs (size) and the graph score. The mcmc_traj_plots module has a list of objects, where each object has an id field for the algorithm object id, a burn-in field (burn_in) and a field specifying the functional to be considered (functional). Since the trajectories tend to be very long, the user may choose to thin out the trajectory by only considering every graph at a given interval length specified by the thinning field. The plots are saved in results/mcmc_traj_plots/ and copied to results/output/mcmc_traj_plots/.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mcmc_traj_plots_item"
                            },
                            "additionalItems": false,
                            "examples": [
                                [
                                    {
                                        "id": "omcmc_itsample-bge",
                                        "burn_in": 0,
                                        "thinning": 1,
                                        "functional": [
                                            "score",
                                            "size"
                                        ],
                                        "active": true
                                    }
                                ]
                            ]
                        },
                        "mcmc_heatmaps": {
                            "title": "mcmc_heatmaps",
                            "description": "Plots mean graph as a heatmap from an MCMC trajectory of graphs.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mcmc_heatmaps_item"
                            },
                            "additionalItems": false,
                            "examples": [
                                [
                                    {
                                        "id": "omcmc_itsample-bge",
                                        "burn_in": 0,
                                        "active": true
                                    }
                                ]
                            ]
                        },
                        "mcmc_autocorr_plots": {
                            "title": "mcmc_autocorr_plots",
                            "description": "Plots mean graph as a heatmap from an MCMC trajectory of graphs.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mcmc_autocorr_plots_item"
                            },
                            "additionalItems": false,
                            "examples": [
                                [
                                    {
                                        "id": "omcmc_itsample-bge",
                                        "burn_in": 0,
                                        "thinning": 1,
                                        "lags": 50,
                                        "functional": [
                                            "score",
                                            "size"
                                        ],
                                        "active": true
                                    }
                                ]
                            ]
                        }
                    },
                    "required": [
                        "roc",
                        "adjmat_true_plots",
                        "graph_true_plots",
                        "adjmat_plots",
                        "graph_plots",
                        "mcmc_traj_plots",
                        "mcmc_heatmaps",
                        "mcmc_autocorr_plots"
                    ],
                    "additionalProperties": false,
                    "examples": [
                        {
                            "roc": {
                                "filename_prefix": "example/",
                                "point": true,
                                "errorbar": true,
                                "path": true,
                                "text": false,
                                "ids": [
                                    "fges-sem-bic",
                                    "mmhc-bge-zf",
                                    "omcmc_itsample-bge",
                                    "pc-gaussCItest"
                                ]
                            },
                            "adjmat_true_plots": true,
                            "graph_true_plots": true,
                            "adjmat_plots": [
                                "fges-sem-bic",
                                "mmhc-bge-zf",
                                "omcmc_itsample-bge",
                                "pc-gaussCItest"
                            ],
                            "graph_plots": [
                                "fges-sem-bic",
                                "mmhc-bge-zf",
                                "omcmc_itsample-bge",
                                "pc-gaussCItest"
                            ],
                            "mcmc_traj_plots": [
                                {
                                    "id": "omcmc_itsample-bge",
                                    "burn_in": 0,
                                    "thinning": 1,
                                    "functional": [
                                        "score",
                                        "size"
                                    ],
                                    "active": true
                                }
                            ],
                            "mcmc_heatmaps": [
                                {
                                    "id": "omcmc_itsample-bge",
                                    "burn_in": 0,
                                    "active": true
                                }
                            ],
                            "mcmc_autocorr_plots": [
                                {
                                    "id": "omcmc_itsample-bge",
                                    "burn_in": 0,
                                    "thinning": 1,
                                    "lags": 50,
                                    "functional": [
                                        "score",
                                        "size"
                                    ],
                                    "active": true
                                }
                            ]
                        }
                    ]
                }
            },
            "required": [
                "data",
                "evaluation"
            ],
            "additionalProperties": false
        },
        "resources": {
            "title": "resources",
            "description": "The available modules for generating graphs, parameters, data and structure learning algorithms.",
            "properties": {
                "data": {
                    "title": "data",
                    "description": "Data sampling setup.",
                    "type": "object",
                    "properties": {
                        "iid": {
                            "title": "List of iid setups.",
                            "description": "List of iid setups.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/iid"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false,
                    "examples": [
                        {
                            "id": "standardized",
                            "standardized": true,
                            "sample_sizes": [
                                100
                            ]
                        },
                        {
                            "id": "nonstandardized",
                            "standardized": false,
                            "sample_sizes": [
                                1000
                            ]
                        }
                    ]
                },
                "graph": {
                    "title": "graph",
                    "description": "The available graph sampling algorithms.",
                    "type": "object",
                    "properties": {
                        "pcalg_randdag": {
                            "title": "pcalg_randdag",
                            "description": "Sampling graph using randDAG from the pcalg package.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pcalg_randdag"
                            },
                            "uniqueItems": true
                        },
                        "notears": {
                            "title": "notears",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notears_dag_sampling"
                            },
                            "uniqueItems": true
                        },
                        "trilearn_cta": {
                            "title": "trilearn_cta",
                            "description": "Sample decomposable graph using the Christmas tree algorithm (CTA) from the trilearn package.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_cta"
                            },
                            "uniqueItems": true
                        },
                        "bandmat": {
                            "title": "bandmat",
                            "description": "Generates a graph with band structured adjacency matrix.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bandmat"
                            },
                            "uniqueItems": true
                        },
                        "rand_bandmat": {
                            "title": "rand_bandmat",
                            "description": "Generates a graph with band structured adjacency matrix of varying with.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rand_bandmat"
                            },
                            "uniqueItems": true
                        },
                        "bdgraph_graphsim": {
                            "title": "bdgraph_graphsim",
                            "description": "Generates an undirected graph using graph.sim from the R package BDgraph.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bdgraph_graphsim"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                },
                "parameters": {
                    "title": "parameters",
                    "description": "The available parameter sampling algorithms",
                    "type": "object",
                    "properties": {
                        "bin_bn": {
                            "title": "bin_bn",
                            "description": "List of generateBinayBN objects",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bin_bn"
                            },
                            "uniqueItems": true
                        },
                        "notears_parameters_sampling": {
                            "title": "notears_parameters_sampling",
                            "description": "List of notears id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notears_parameters_sampling"
                            },
                            "uniqueItems": true
                        },
                        "sem_params": {
                            "title": "sem_params",
                            "description": "List of sem_params id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/sem_params"
                            },
                            "uniqueItems": true
                        },
                        "trilearn_hyper-dir": {
                            "title": "trilearn_hyper-dir",
                            "description": "List of trilearn_hyper-dir id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_hyper-dir"
                            },
                            "uniqueItems": true
                        },
                        "trilearn_intra-class": {
                            "title": "trilearn_intra-class",
                            "description": "List of intra-class id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_intra-class"
                            },
                            "uniqueItems": true
                        },
                        "trilearn_g_inv_wishart": {
                            "title": "trilearn_g_inv_wishart",
                            "description": "List of graph inverse-Wishart id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_g_inv_wishart"
                            },
                            "uniqueItems": true
                        },
                        "bdgraph_rgwish": {
                            "title": "bdgraph_rgwish",
                            "description": "List of graph inverse-Wishart id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bdgraph_rgwish"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": true
                },
                "structure_learning_algorithms": {
                    "title": "structure_learning_algorithms",
                    "description": "The available structure learning algorithms",
                    "type": "object",
                    "properties": {
                        "trilearn_pgibbs": {
                            "title": "trilearn_pgibbs",
                            "description": "List of trilearn objects",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_pgibbs"
                            },
                            "uniqueItems": true
                        },
                        "rblip_asobs": {
                            "title": "rblip_asobs",
                            "description": "List of blip objects",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rblip_asobs"
                            }
                        },
                        "notears": {
                            "title": "notears",
                            "description": "Notears objects",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notears"
                            }
                        },
                        "gobnilp": {
                            "title": "gobnilp",
                            "description": "Gobnilp objects",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gobnilp"
                            }
                        },
                        "tetrad_fges": {
                            "title": "tetrad_fges",
                            "description": "fGES objects",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tetrad_fges"
                            }
                        },
                        "tetrad_fci": {
                            "description": "FCI fast causal inference.",
                            "title": "tetrad_fci",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tetrad_fci"
                            }
                        },
                        "tetrad_rfci": {
                            "description": "RFCI Really fast causal inference",
                            "title": "tetrad_rfci",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tetrad_rfci"
                            }
                        },
                        "tetrad_gfci": {
                            "description": "GFCI",
                            "title": "tetrad_gfci",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tetrad_gfci"
                            }
                        },
                        "pcalg_pc": {
                            "description": "PC algorithm objects",
                            "title": "pcalg_pc",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pcalg_pc"
                            }
                        },
                        "bnlearn_mmhc": {
                            "description": "MMHC objects",
                            "title": "bnlearn_mmhc",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bnlearn_mmhc"
                            }
                        },
                        "bnlearn_tabu": {
                            "description": "Tabu search objects",
                            "title": "bnlearn_tabu",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bnlearn_tabu"
                            }
                        },
                        "bidag_itsearch": {
                            "description": "Iterative +1 search objects",
                            "title": "bidag_itsearch",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bidag_itsearch"
                            }
                        },
                        "bidag_order_mcmc": {
                            "description": "Order MCMC objects",
                            "title": "bidag_order_mcmc",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bidag_order_mcmc"
                            }
                        },
                        "bnlearn_interiamb": {
                            "description": "Inter-IAMB objects",
                            "title": "bnlearn_interiamb",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bnlearn_interiamb"
                            }
                        },
                        "bnlearn_gs": {
                            "description": "GS objects",
                            "title": "bnlearn_gs",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bnlearn_interiamb"
                            }
                        },
                        "bnlearn_hc": {
                            "description": "HC objects",
                            "title": "bnlearn_hc",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/bnlearn_hc"
                            }
                        },
                        "gt13_multipair": {
                            "description": "Green & Thomas objects",
                            "title": "gt13_multipair",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gt13_multipair"
                            }
                        },
                        "gg99_singlepair": {
                            "description": "Guidici & Green parametrisarion",
                            "title": "gg99_singlepair",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gg99_singlepair"
                            }
                        },
                        "sklearn_glasso": {
                            "description": "GLasso scikit-learn implementation",
                            "title": "sklearn_glasso",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/sklearn_glasso"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [
                "data",
                "graph",
                "parameters",
                "structure_learning_algorithms"
            ],
            "additionalProperties": false
        }
    },
    "definitions": {
        "mcmc_autocorr_plots_item": {
            "title": "mcmc_autocorr_plots item",
            "description": "Plots the auto correlation for a given functional in a MCMC trajectory.",
            "examples": [
                {
                    "id": "omcmc_itsample-bge",
                    "burn_in": 0,
                    "thinning": 1,
                    "lags": 50,
                    "functional": [
                        "score",
                        "size"
                    ],
                    "active": true
                }
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "burn_in": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "thinning": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "active": {
                    "type": "boolean"
                },
                "lags": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "functional": {
                    "title": "stringorlist",
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "score",
                                "size"
                            ]
                        },
                        {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "score",
                                    "size"
                                ]
                            }
                        }
                    ]
                }
            },
            "required": [
                "id",
                "burn_in",
                "thinning",
                "functional",
                "lags"
            ]
        },
        "mcmc_traj_plots_item": {
            "examples": [
                {
                    "id": "omcmc_itsample-bge",
                    "burn_in": 0,
                    "thinning": 1,
                    "functional": [
                        "score",
                        "size"
                    ],
                    "active": true
                }
            ],
            "title": "mcmc_traj_plots item",
            "description": "This module plots the so called score values in the trajectory or the value of a given functional. The currently supported functionals are the number of edges for the graphs (size) and the graph score. The mcmc_traj_plots module has a list of objects, where each object has an id field for the algorithm object id, a burn-in field (burn_in) and a field specifying the functional to be considered (functional). Since the trajectories tend to be very long, the user may choose to thin out the trajectory by only considering every graph at a given interval length specified by the thinning field. The plots are saved in results/mcmc_traj_plots/ and copied to results/output/mcmc_traj_plots/.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "burn_in": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "thinning": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "active": {
                    "type": "boolean"
                },
                "functional": {
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "score",
                                "size"
                            ]
                        },
                        {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "score",
                                    "size"
                                ]
                            }
                        }
                    ]
                }
            },
            "required": [
                "id",
                "burn_in",
                "thinning",
                "functional"
            ],
            "additionalItems": false
        },
        "mcmc_heatmaps_item": {
            "examples": [
                {
                    "id": "omcmc_itsample-bge",
                    "burn_in": 0,
                    "active": true
                }
            ],
            "title": "MCMC mean graph plot",
            "description": "Plots mean graph as a heatmap from an MCMC trajectory of graphs.",
            "properties": {
                "id": {
                    "type": "string"
                },
                "active": {
                    "description": "Set to false if you dont want to plot it.",
                    "type": "boolean"
                },
                "burn_in": {
                    "title": "Burn-in start index.",
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": [
                "id",
                "burn_in"
            ]
        },
        "notears_parameters_sampling": {
            "title": "notears_parameters_sampling item",
            "description": "Notears parameter sampling for Gaissian Bayesian networks. This requires that the adjaceny_matrix (graph) is of type notears_dag_sampling",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "edge_coefficient_range_from": {
                    "$ref": "#/definitions/nonnegnum"
                },
                "edge_coefficient_range_to": {
                    "$ref": "#/definitions/nonnegnum"
                }
            }
        },
        "notears_dag_sampling": {
            "title": "notears_dag_sampling item",
            "description": "Graph sampling method provided by the notears package. \n Documentation: https://github.com/jmoss20/notears",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "num_nodes": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "num_edges": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "mean": {
                    "title": "Mean",
                    "type": "number"
                },
                "variance": {
                    "title": "Variance",
                    "type": "number"
                }
            },
            "required": [
                "id",
                "num_nodes",
                "num_edges"
            ],
            "additionalProperties": false
        },
        "trilearn_cta": {
            "title": "trilearn_cta item",
            "description": "Graph sampling method provided by the trilearn package. \n Documentation: https://github.com/felixleopoldo/trilearn",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "order": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "beta": {
                    "$ref": "#/definitions/flexprob"
                }
            },
            "required": [
                "id",
                "order",
                "alpha",
                "beta"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "trilearn_cta",
                    "order": 50,
                    "alpha": 0.5,
                    "beta": 0.7
                }
            ]
        },
        "bandmat": {
            "title": "bandmat item",
            "description": "A graph with a band structured adjacency matrix",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "dim": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "bandwidth": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": [
                "id",
                "dim",
                "bandwidth"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "AR2",
                    "bandwidth": 2,
                    "dim": 50
                }
            ]
        },
        "bdgraph_graphsim": {
            "title": "bdgraph_graphsim item",
            "description": "BDgraph graph.sim",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "p": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prob": {
                    "$ref": "#/definitions/flexprob"
                },
                "graph": {
                    "type": "string",
                    "enum": [
                        "random",
                        "cluster",
                        "scale-free",
                        "hub",
                        "circle",
                        "star",
                        "lattice"
                    ]
                },
                "class": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "size": {
                    "$ref": "#/definitions/flexnonnegintnull"
                }
            },
            "required": [
                "p",
                "graph",
                "class",
                "size",
                "id",
                "prob"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "circle",
                    "p": 50,
                    "graph": "circle",
                    "class": null,
                    "size": null,
                    "prob": 0.2
                }
            ]
        },
        "rand_bandmat": {
            "title": "rand_bandmat item",
            "description": "A graph with a band structured adjacency matrix with random width.",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "dim": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "max_bandwidth": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": [
                "id",
                "dim",
                "max_bandwidth"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "AR1-5",
                    "max_bandwidth": 5,
                    "dim": 50
                }
            ]
        },
        "roc": {
            "title": "roc item",
            "description": "ROC item",
            "type": "object",
            "properties": {
                "ids": {
                    "list": "string"
                },
                "filename_prefix": {
                    "type": "string"
                },
                "point": {
                    "type": "boolean"
                },
                "text": {
                    "type": "boolean"
                },
                "path": {
                    "type": "boolean"
                },
                "errorbar": {
                    "type": "boolean"
                }
            },
            "examples": [
                {
                    "filename_prefix": "example/",
                    "point": true,
                    "errorbar": true,
                    "path": true,
                    "text": false,
                    "ids": [
                        "fges-sem-bic",
                        "mmhc-bge-zf",
                        "omcmc_itsample-bge",
                        "pc-gaussCItest"
                    ]
                }
            ]
        },
        "data_setup_dict": {
            "type": "object",
            "title": "data item",
            "description": "Description of the data model and sampling setup. Make sure that the id's are properly combined.\n If a CSV file is specified as data_id then parameters_id and seed_range should be null whereas graph_id should be the true graphs that generated the dataset.",
            "properties": {
                "graph_id": {
                    "title": "graph_id",
                    "description": "ID of the graph object.",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "parameters_id": {
                    "title": "parameters_id",
                    "description": "ID of a module object in the parameters section.",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "data_id": {
                    "title": "data_id",
                    "description": "Data sampling method ID.",
                    "type": "string"
                },
                "seed_range": {
                    "title": "seed_range",
                    "description": "This data setup will be simulated for this range of seeds. E.g. seed_range:[1,3] will generate 3 datsets (and corresponding models) with seeds 1,2,3.",
                    "anyOf": [
                        {
                            "title": "range",
                            "description": "List of 2 integers [a, b], where a<=b.",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxLength": 2,
                            "minLength": 2
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "required": [
                "graph_id",
                "parameters_id",
                "data_id",
                "seed_range"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "graph_id": "avneigs4_p20",
                    "parameters_id": "SEM",
                    "data_id": "standardized",
                    "seed_range": [
                        1,
                        3
                    ]
                }
            ]
        },
        "iid": {
            "title": "iid",
            "description": "Data sampling from disctete Bayesian network.",
            "type": "object",
            "properties": {
                "id": {
                    "title": "Unique ID",
                    "type": "string"
                },
                "sample_sizes": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "standardized": {
                    "type": "boolean"
                }
            },
            "required": [
                "id",
                "sample_sizes",
                "standardized"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "standardized",
                    "standardized": true,
                    "sample_sizes": [
                        100
                    ]
                }
            ]
        },
        "pcalg_randdag": {
            "title": "pcalg_randdag item",
            "description": "An instance of pcalg randdag. Sampling of a DAG with specified maximum averge number for parents for the nodes.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "n": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "d": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "par1": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "par2": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "method": {
                    "type": "string"
                },
                "max_parents": {
                    "$ref": "#/definitions/flexnonnegintnull"
                }
            },
            "required": [
                "id",
                "max_parents",
                "d",
                "n",
                "par1",
                "par2",
                "method"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "pc-binCItest",
                    "alpha": [
                        0.01,
                        0.05,
                        0.1
                    ],
                    "NAdelete": true,
                    "mmax": "Inf",
                    "u2pd": "relaxed",
                    "skelmethod": "stable",
                    "conservative": false,
                    "majrule": false,
                    "solveconfl": false,
                    "numCores": 1,
                    "verbose": false,
                    "indepTest": "binCItest"
                }
            ]
        },
        "bin_bn": {
            "title": "bin_bn item",
            "description": "Parameter setting for generateBinaryBN",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "min": {
                    "$ref": "#/definitions/flexprob"
                },
                "max": {
                    "$ref": "#/definitions/flexprob"
                }
            },
            "required": [
                "min",
                "max",
                "id"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "binbn",
                    "min": 0.1,
                    "max": 0.9
                }
            ]
        },
        "trilearn_hyper-dir": {
            "title": "trilearn_hyper-dir item",
            "description": "Parameter setting for a hyper Dirichlet distribution",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "n_levels": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "pseudo_obs": {
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "required": [
                "n_levels",
                "pseudo_obs",
                "id"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "disc-loglin",
                    "n_levels": 2,
                    "pseudo_obs": 1.0
                }
            ]
        },
        "trilearn_intra-class": {
            "title": "trilearn_intra-class item",
            "description": "Parameter setting for a graph intra-class model",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "rho": {
                    "$ref": "#/definitions/flexprob"
                },
                "sigma2": {
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "required": [
                "rho",
                "sigma2",
                "id"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "intra-class",
                    "rho": 0.4,
                    "sigma2": 1.0
                }
            ]
        },
        "trilearn_g_inv_wishart": {
            "title": "trilearn_g_inv_wishart item",
            "description": "Parameter setting for a graph inverse-Wishart model",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "dof": {
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "required": [
                "dof",
                "id"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "giw",
                    "dof": 1
                }
            ]
        },
        "bdgraph_rgwish": {
            "title": "bdgraph_rgwish item",
            "description": "Parameter setting for a G-Wishart model. Works for undirected graphs.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "b": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "threshold": {
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "required": [
                "b",
                "id",
                "threshold"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "gwi",
                    "b": 3,
                    "threshold": 0.00000001
                }
            ]
        },
        "sem_params": {
            "title": "sem_params item",
            "description": "Parameter setting for sampling SEM params.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "min": {
                    "$ref": "#/definitions/flexprob"
                },
                "max": {
                    "$ref": "#/definitions/flexprob"
                }
            },
            "required": [
                "min",
                "max",
                "id"
            ],
            "additionalProperties": false,
            "examples": [
                {
                    "id": "SEM",
                    "min": 0.25,
                    "max": 1
                }
            ]
        },
        "prob": {
            "title": "prob type",
            "description": "Number in the range [0,1].",
            "type": "number",
            "minimum": 0,
            "maximum": 1
        },
        "problist": {
            "title": "problist type",
            "type": "array",
            "description": "Probability list",
            "items": {
                "$ref": "#/definitions/prob"
            }
        },
        "natnum": {
            "title": "natnum type",
            "description": "Positive integer",
            "type": "integer",
            "minimum": 1
        },
        "nonnegint": {
            "title": "nonnegint type",
            "description": "Non-negative integer, 0,1,2,...",
            "type": "integer",
            "minimum": 0
        },
        "nonnegnum": {
            "title": "nonnegnum type",
            "description": "Non-negative number",
            "type": "number",
            "minimum": 0
        },
        "nonnegnumlist": {
            "title": "nonnegnumlist",
            "type": "array",
            "description": "List of non-negative numbers",
            "items": {
                "$ref": "#/definitions/nonnegnum"
            }
        },
        "flexnonnegnum": {
            "description": "Non-negative number(s).",
            "anyOf": [
                {
                    "$ref": "#/definitions/nonnegnum"
                },
                {
                    "$ref": "#/definitions/nonnegnumlist"
                }
            ]
        },
        "flexnonnegnumnull": {
            "title": "Non-negative number(s) or null",
            "description": "E.g. 1.5 or [1.6, 3.8] or null.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                {
                    "type": "null"
                }
            ]
        },
        "flexnonnegint": {
            "title": "Non-negative integer(s)",
            "description": "Non-negative integers, (0,1,2,...), or array of the same.",
            "anyOf": [
                {
                    "$ref": "#/definitions/nonnegint"
                },
                {
                    "$ref": "#/definitions/nonnegintlist"
                }
            ]
        },
        "nonnegintlist": {
            "type": "array",
            "title": "nonnegint list",
            "description": "Non-negative integer list",
            "items": {
                "$ref": "#/definitions/nonnegint"
            }
        },
        "flexnonnegintnull": {
            "title": "Non-negative integer(s), or null.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnonnegint"
                },
                {
                    "type": "null"
                }
            ]
        },
        "flexnonnegintstring": {
            "title": "flexnonnegintstring",
            "description": "Non-negative integer(s), or Inf string.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnonnegint"
                },
                {
                    "type": "string",
                    "enum": [
                        "Inf"
                    ]
                }
            ]
        },
        "flexnatnum": {
            "title": "Non-negative integer(s)",
            "anyOf": [
                {
                    "$ref": "#/definitions/natnum"
                },
                {
                    "title": "Positive integer list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/natnum"
                    }
                }
            ]
        },
        "flexnatnumnull": {
            "title": "Npn-negative integer or null",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnatnum"
                },
                {
                    "type": "null"
                }
            ]
        },
        "flexprob": {
            "description": "Number(s) in the range [0,1].",
            "anyOf": [
                {
                    "$ref": "#/definitions/prob"
                },
                {
                    "$ref": "#/definitions/problist"
                }
            ]
        },
        "flexprobnull": {
            "title": "flexprobnull",
            "description": "Number(s) in the range [0,1], or null.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexprob"
                },
                {
                    "type": "null"
                }
            ]
        },
        "trilearn_pgibbs": {
            "title": "trilearn_pgibbs item",
            "description": "Parameter setting for trilearn with log-linear decomposable model.",
            "type": "object",
            "properties": {
                "id": {
                    "desciption": "Algorithm identifier",
                    "type": "string"
                },
                "datatype": {
                    "type": "string",
                    "enum": [
                        "discrete",
                        "continuous"
                    ]
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "beta": {
                    "$ref": "#/definitions/flexprob"
                },
                "pseudo_obs": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "radii": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "mcmc_seed": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": [
                "id",
                "datatype",
                "alpha",
                "beta",
                "radii",
                "N",
                "M",
                "pseudo_obs",
                "mcmc_seed"
            ],
            "examples": [
                {
                    "id": "trilearn-cont",
                    "datatype": "continuous",
                    "alpha": 0.5,
                    "beta": 0.5,
                    "radii": 80,
                    "N": [
                        50
                    ],
                    "M": 100,
                    "pseudo_obs": 1,
                    "mcmc_seed": 1
                }
            ]
        },
        "rblip_asobs": {
            "title": "rblip_asobs item",
            "description": "Blip object",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "title": "Unique identifier",
                    "description": "Unique identifier for that can be used as reference in the benchmark_setup."
                },
                "scorermethod": {
                    "type": "string"
                },
                "solvermethod": {
                    "type": "string"
                },
                "indeg": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "time": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "allocated": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "scorefunction": {
                    "type": "string"
                },
                "alpha": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "cores": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "verbose": {
                    "$ref": "#/definitions/nonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "scorermethod",
                "solvermethod",
                "indeg",
                "time",
                "allocated",
                "scorefunction",
                "alpha",
                "cores",
                "verbose"
            ],
            "examples": [
                {
                    "id": "winasobs-bdeu",
                    "scorermethod": "is",
                    "solvermethod": "winasobs",
                    "indeg": 80,
                    "time": [
                        180
                    ],
                    "allocated": 80,
                    "scorefunction": "bdeu",
                    "alpha": [
                        0.001,
                        0.01,
                        0.1
                    ],
                    "cores": 1,
                    "verbose": 0
                }
            ]
        },
        "notears": {
            "title": "notears item",
            "description": "Notears object",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "min_rate_of_progress": {
                    "$ref": "#/definitions/flexprob"
                },
                "penalty_growth_rate": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "optimation_accuracy": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "loss": {
                    "type": "string",
                    "enum": [
                        "least_squares_loss",
                        "least_squares_loss_cov"
                    ]
                },
                "loss_grad": {
                    "type": "string",
                    "enum": [
                        "least_squares_loss_grad",
                        "least_squares_loss_cov_grad"
                    ]
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "min_rate_of_progress",
                "penalty_growth_rate",
                "optimation_accuracy",
                "loss",
                "loss_grad"
            ],
            "examples": [
                {
                    "id": "notears",
                    "min_rate_of_progress": 0.25,
                    "penalty_growth_rate": 10,
                    "optimation_accuracy": 0.00000001,
                    "loss": "least_squares_loss_cov",
                    "loss_grad": "least_squares_loss_cov_grad"
                }
            ]
        },
        "gobnilp": {
            "title": "gobnilp item",
            "description": "Gobnilp instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "continuous": {
                    "type": "boolean"
                },
                "score_type": {
                    "type": "string",
                    "enum": [
                        "BGe",
                        "BDeu",
                        "BIC"
                    ]
                },
                "plot": {
                    "type": "boolean"
                },
                "palim": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "alpha": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "alpha_omega_minus_nvars": {
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "alpha_mu": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "prune": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "plot",
                "palim",
                "alpha",
                "prune"
            ],
            "examples": [
                {
                    "id": "gobnilp-bge",
                    "continuous": true,
                    "score_type": "BGe",
                    "plot": false,
                    "palim": 2,
                    "alpha_mu": 1.0,
                    "alpha_omega_minus_nvars": 2,
                    "alpha": null,
                    "prune": true
                }
            ]
        },
        "sklearn_glasso": {
            "title": "sklearn_glasso item",
            "description": "GLasso instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "mode": {
                    "type": "string",
                    "enum": [
                        "cd",
                        "lars"
                    ]
                },
                "max_iter": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "alpha": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "tol": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "enet_tol": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "precmat_threshold": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "verbose": {
                    "type": "boolean"
                },
                "assume_centered": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "mode",
                "max_iter",
                "alpha",
                "tol",
                "enet_tol",
                "verbose",
                "precmat_threshold",
                "assume_centered"
            ],
            "examples": [
                {
                    "id": "sklearn_glasso",
                    "mode": "cd",
                    "alpha": [
                        0.05
                    ],
                    "tol": 0.0004,
                    "enet_tol": 0.0004,
                    "precmat_threshold": 0.1,
                    "max_iter": 100,
                    "verbose": false,
                    "assume_centered": false
                }
            ]
        },
        "gt13_multipair": {
            "title": "gt13_multipair item",
            "description": "Green & Thomas algorithm for learning decomopasble graphs.\n Source: Green, P. J., & Thomas, A. (2013). Sampling decomposable graphs using a Markov chain on junction trees. Biometrika, 100(1), 91-110.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "datatype": {
                    "type": "string",
                    "enum": [
                        "discrete",
                        "continuous"
                    ]
                },
                "n_samples": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "penalty": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "randomits": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior": {
                    "type": "string",
                    "enum": [
                        "bc",
                        "mbc",
                        "ep"
                    ]
                },
                "ascore": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "bscore": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "clq": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "sep": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "mcmc_seed": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "n_samples",
                "prior",
                "mcmc_seed",
                "randomits"
            ],
            "examples": [
                {
                    "id": "gt13_multipair_bc-cont",
                    "n_samples": 1000000,
                    "datatype": "continuous",
                    "randomits": 1000,
                    "prior": "bc",
                    "ascore": 0.1,
                    "bscore": 0.001,
                    "clq": null,
                    "sep": null,
                    "penalty": null,
                    "mcmc_seed": 1
                }
            ]
        },
        "gg99_singlepair": {
            "title": "gg99_singlepair item",
            "description": "Guidici & Green algorithm for learning decomopasble graphs.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "datatype": {
                    "type": "string",
                    "enum": [
                        "discrete",
                        "continuous"
                    ]
                },
                "n_samples": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "penalty": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "randomits": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior": {
                    "type": "string"
                },
                "ascore": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "bscore": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "clq": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "sep": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "mcmc_seed": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "n_samples",
                "prior",
                "mcmc_seed",
                "randomits"
            ],
            "examples": [
                {
                    "id": "guidicigreen-cont",
                    "n_samples": 1000000,
                    "datatype": "continuous",
                    "randomits": 1000,
                    "prior": "bc",
                    "ascore": 0.9,
                    "bscore": 0.001,
                    "clq": 2,
                    "sep": 4,
                    "penalty": 1.5,
                    "mcmc_seed": 1
                }
            ]
        },
        "tetrad_fges": {
            "title": "tetrad_fges item",
            "description": "fGES instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "faithfulnessAssumed": {
                    "type": "boolean"
                },
                "score": {
                    "type": "string"
                },
                "datatype": {
                    "type": "string"
                },
                "samplePrior": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "penaltyDiscount": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "structurePrior": {
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "faithfulnessAssumed",
                "score",
                "datatype",
                "samplePrior",
                "structurePrior",
                "penaltyDiscount"
            ],
            "examples": [
                {
                    "id": "fges-sem-bic",
                    "faithfulnessAssumed": true,
                    "score": "sem-bic",
                    "datatype": "continuous",
                    "samplePrior": 1,
                    "structurePrior": 1,
                    "penaltyDiscount": [
                        0.8,
                        1,
                        1.5
                    ]
                }
            ]
        },
        "tetrad_fci": {
            "title": "tetrad_fci item",
            "description": "FCI instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "bdeu-test",
                        "cci-test",
                        "cg-lr-test",
                        "chi-square-test",
                        "d-sep-test",
                        "disc-bic-test",
                        "fisher-z-test",
                        "g-square-test",
                        "kci-test",
                        "prob-test"
                    ]
                },
                "datatype": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "test",
                "alpha"
            ],
            "examples": [
                {
                    "id": "fci-fisher-z",
                    "alpha": [
                        0.001,
                        0.01,
                        0.05
                    ],
                    "test": "fisher-z-test",
                    "datatype": "continuous"
                }
            ]
        },
        "tetrad_gfci": {
            "title": "tetrad_gfci item",
            "description": "GFCI instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "bdeu-test",
                        "cci-test",
                        "cg-lr-test",
                        "chi-square-test",
                        "d-sep-test",
                        "disc-bic-test",
                        "fisher-z-test",
                        "g-square-test",
                        "kci-test",
                        "prob-test"
                    ]
                },
                "score": {
                    "type": "string",
                    "enum": [
                        "bdeu-score",
                        "cci-score",
                        "cg-bic-score",
                        "d-sep-score",
                        "disc-bic-score",
                        "sem-bic"
                    ]
                },
                "datatype": {
                    "type": "string"
                },
                "samplePrior": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "structurePrior": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "penaltyDiscount": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                }
            },
            "required": [
                "id",
                "test",
                "structurePrior",
                "penaltyDiscount"
            ],
            "examples": [
                {
                    "id": "gfci-sem-bic-fisher-z",
                    "alpha": 0.05,
                    "score": "sem-bic",
                    "test": "fisher-z-test",
                    "datatype": "continuous",
                    "penaltyDiscount": [
                        0.5,
                        1,
                        1.5
                    ],
                    "samplePrior": null,
                    "structurePrior": 1
                }
            ]
        },
        "tetrad_rfci": {
            "title": "tetrad_rfci item",
            "description": "RFCI instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "bdeu-test",
                        "cci-test",
                        "cg-lr-test",
                        "chi-square-test",
                        "d-sep-test",
                        "disc-bic-test",
                        "fisher-z-test",
                        "g-square-test",
                        "kci-test",
                        "prob-test"
                    ]
                },
                "datatype": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "test"
            ],
            "examples": [
                {
                    "id": "rfci-fisher-z",
                    "alpha": [
                        0.001,
                        0.01,
                        0.05
                    ],
                    "test": "fisher-z-test",
                    "datatype": "continuous"
                }
            ]
        },
        "pcalg_pc": {
            "title": "pcalg_pc item",
            "description": "PC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "indepTest": {
                    "type": "string",
                    "enum": [
                        "binCItest",
                        "gaussCItest",
                        "dsepTest",
                        "disCItest"
                    ]
                },
                "numCores": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "verbose": {
                    "type": "boolean"
                },
                "NAdelete": {
                    "type": "boolean"
                },
                "mmax": {
                    "$ref": "#/definitions/flexnonnegintstring"
                },
                "u2pd": {
                    "type": "string",
                    "enum": [
                        "relaxed",
                        "rand",
                        "retry"
                    ]
                },
                "skelmethod": {
                    "type": "string",
                    "enum": [
                        "stable",
                        "original",
                        "stable.fast"
                    ]
                },
                "conservative": {
                    "type": "boolean"
                },
                "majrule": {
                    "type": "boolean"
                },
                "solveconfl": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha"
            ],
            "examples": [
                {
                    "id": "pc-gaussCItest",
                    "alpha": [
                        0.001,
                        0.01,
                        0.05,
                        0.1
                    ],
                    "NAdelete": true,
                    "mmax": "Inf",
                    "u2pd": "relaxed",
                    "skelmethod": "stable",
                    "conservative": false,
                    "majrule": false,
                    "solveconfl": false,
                    "numCores": 1,
                    "verbose": false,
                    "indepTest": "gaussCItest"
                }
            ]
        },
        "bnlearn_mmhc": {
            "title": "bnlearn_mmhc item",
            "description": "MMHC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "mi",
                        "mi-adf",
                        "mc-mi",
                        "smc-mi",
                        "sp-mi",
                        "mi-sh",
                        "x2",
                        "x2-adf",
                        "sp-x2",
                        "jt",
                        "mc-jt",
                        "smc-jt",
                        "cor",
                        "mc-cor",
                        "smc-cor",
                        "zf",
                        "mc-zf",
                        "smc-zf",
                        "mi-g",
                        "mc-mi-g",
                        "smc-mi-g",
                        "mi-g-sh",
                        "mi-cg"
                    ]
                },
                "beta": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "score": {
                    "type": "string"
                },
                "iss": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "issmu": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "issw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "l": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "k": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "prior": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha"
            ],
            "examples": [
                {
                    "id": "mmhc-bge-zf",
                    "alpha": [
                        0.001,
                        0.01,
                        0.05,
                        0.1
                    ],
                    "score": "bge",
                    "test": "zf",
                    "iss": 1,
                    "issmu": 1,
                    "issw": null,
                    "l": 5,
                    "k": 1,
                    "prior": "uniform",
                    "beta": null
                }
            ]
        },
        "bnlearn_interiamb": {
            "title": "bnlearn_interiamb item",
            "description": "Inter-IAMB algorithm object",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "mi",
                        "mi-adf",
                        "mc-mi",
                        "smc-mi",
                        "sp-mi",
                        "mi-sh",
                        "x2",
                        "x2-adf",
                        "sp-x2",
                        "jt",
                        "mc-jt",
                        "smc-jt",
                        "cor",
                        "mc-cor",
                        "smc-cor",
                        "zf",
                        "mc-zf",
                        "smc-zf",
                        "mi-g",
                        "mc-mi-g",
                        "smc-mi-g",
                        "mi-g-sh",
                        "mi-cg"
                    ]
                },
                "B": {
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "maxsx": {
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "debug": {
                    "type": "boolean"
                },
                "undirected": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha",
                "test",
                "B",
                "maxsx",
                "debug",
                "undirected"
            ],
            "examples": [
                {
                    "id": "interiamb-zf",
                    "alpha": [
                        0.01,
                        0.05
                    ],
                    "test": "zf",
                    "B": null,
                    "maxsx": null,
                    "debug": false,
                    "undirected": false
                }
            ]
        },
        "bnlearn_gs": {
            "title": "bnlearn_gs item",
            "description": "Grow shrink (GS) algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum": [
                        "mi",
                        "mi-adf",
                        "mc-mi",
                        "smc-mi",
                        "sp-mi",
                        "mi-sh",
                        "x2",
                        "x2-adf",
                        "sp-x2",
                        "jt",
                        "mc-jt",
                        "smc-jt",
                        "cor",
                        "mc-cor",
                        "smc-cor",
                        "zf",
                        "mc-zf",
                        "smc-zf",
                        "mi-g",
                        "mc-mi-g",
                        "smc-mi-g",
                        "mi-g-sh",
                        "mi-cg"
                    ]
                },
                "B": {
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "maxsx": {
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "debug": {
                    "type": "boolean"
                },
                "undirected": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha",
                "test",
                "B",
                "maxsx",
                "debug",
                "undirected"
            ],
            "examples": [
                {
                    "id": "gs-zf",
                    "alpha": [
                        0.01,
                        0.05
                    ],
                    "test": "zf",
                    "B": null,
                    "maxsx": null,
                    "debug": false,
                    "undirected": false
                }
            ]
        },
        "bnlearn_tabu": {
            "title": "bnlearn_tabu item",
            "description": "TABU algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "beta": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "score": {
                    "type": "string"
                },
                "iss": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "issmu": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "issw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "l": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "k": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "beta",
                "score",
                "iss",
                "issmu",
                "l",
                "k",
                "prior"
            ],
            "examples": [
                {
                    "id": "tabu-bge",
                    "score": "bge",
                    "iss": 1,
                    "issmu": [
                        0.0001,
                        0.001,
                        0.01,
                        0.05
                    ],
                    "issw": null,
                    "l": 5,
                    "k": 1,
                    "prior": "uniform",
                    "beta": 1
                }
            ]
        },
        "bnlearn_hc": {
            "title": "bnlearn_hc item",
            "description": "HC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "perturb": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "restart": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "beta": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "score": {
                    "type": "string"
                },
                "iss": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "issmu": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "issw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "l": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "k": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "beta",
                "score",
                "iss",
                "issmu",
                "l",
                "k",
                "prior",
                "perturb",
                "restart"
            ],
            "examples": [
                {
                    "id": "hc-bge",
                    "score": "bge",
                    "iss": 1,
                    "issmu": [
                        0.0001,
                        0.001,
                        0.01,
                        0.05
                    ],
                    "issw": null,
                    "l": 5,
                    "k": 1,
                    "prior": "uniform",
                    "beta": 1,
                    "restart": 0,
                    "perturb": 1
                }
            ]
        },
        "bidag_itsearch": {
            "title": "bidag_itsearch item",
            "description": "Iterative search +1 algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "estimate": {
                    "type": "string",
                    "enum": [
                        "map",
                        "endspace"
                    ]
                },
                "MAP": {
                    "type": "boolean"
                },
                "plus1it": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "posterior": {
                    "$ref": "#/definitions/flexprobnull"
                },
                "softlimit": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "hardlimit": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "gamma": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "cpdag": {
                    "type": "boolean"
                },
                "mergetype": {
                    "type": "string",
                    "enum": [
                        "skeleton"
                    ]
                },
                "scoretype": {
                    "type": "string"
                },
                "chi": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "edgepf": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "am": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "aw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                }
            },
            "additionalProperties": false,
            "required": [
                "MAP",
                "plus1it",
                "posterior",
                "scoretype",
                "chi",
                "edgepf",
                "am",
                "aw",
                "softlimit",
                "hardlimit",
                "alpha",
                "gamma",
                "cpdag",
                "mergetype",
                "estimate"
            ],
            "examples": [
                {
                    "id": "itsearch_map-bge",
                    "estimate": "map",
                    "MAP": true,
                    "plus1it": null,
                    "posterior": null,
                    "scoretype": "bge",
                    "chi": null,
                    "edgepf": null,
                    "am": [
                        0.000248,
                        0.022300,
                        0.100000,
                        0.448000,
                        0.739000
                    ],
                    "aw": null,
                    "softlimit": 9,
                    "hardlimit": 15,
                    "alpha": 0.05,
                    "gamma": 1,
                    "cpdag": false,
                    "mergetype": "skeleton"
                }
            ]
        },
        "bidag_order_mcmc": {
            "title": "bidag_order_mcmc item",
            "description": "Order MCMC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "startspace_algorithm": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        },
                        {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ]
                },
                "plus1": {
                    "type": "boolean"
                },
                "scoretype": {
                    "type": "string"
                },
                "MAP": {
                    "type": "boolean"
                },
                "chi": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "edgepf": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "am": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "aw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "iterations": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "stepsave": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprobnull"
                },
                "gamma": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "cpdag": {
                    "type": "boolean"
                },
                "threshold": {
                    "$ref": "#/definitions/flexprob"
                },
                "burnin": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "mcmc_seed": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "scoretype",
                "chi",
                "edgepf",
                "am",
                "aw",
                "threshold",
                "burnin",
                "startspace_algorithm",
                "plus1",
                "MAP",
                "stepsave",
                "iterations",
                "gamma"
            ],
            "examples": [
                {
                    "id": "omcmc_itmap-bge",
                    "startspace_algorithm": "itsearch_map-bge_am01_endspace",
                    "plus1": true,
                    "scoretype": "bge",
                    "chi": null,
                    "edgepf": null,
                    "aw": null,
                    "am": [
                        0.01,
                        0.1,
                        0.05
                    ],
                    "alpha": 0.01,
                    "gamma": 1,
                    "stepsave": null,
                    "iterations": null,
                    "MAP": true,
                    "cpdag": false,
                    "mcmc_seed": 1,
                    "threshold": 0.5,
                    "burnin": 0
                }
            ]
        }
    }
}