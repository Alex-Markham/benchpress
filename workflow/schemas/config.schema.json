{
    "title": "JSON schema for BenchPress config file.",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$id": "http://github.com/felixleopoldo/benchpress/schema/config.schema.json",
    "type": "object",
    "properties": {
        "benchmark_setup": {
            "title": "Benchmark setup",
            "description": "Description of the benchmarking setup.",
            "type": "object",
            "properties": {
                "data": {
                    "title": "Data setup",
                    "description": "A list of data setup instantiations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/data_setup_dict"
                    },
                    "uniqueItems": true
                },
                "evaluation": {
                    "title": "Evaluation methods",
                    "properties": {
                        "ROC": {
                            "title": "ROC",
                            "description": "Algorithm id's for ROC evaluation.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/roc_item"
                            },
                            "uniqueItems": true
                        }
                    },
                    "required": [
                        "ROC"
                    ],
                    "additionalProperties": false
                }
            },
            "required": [
                "data",
                "evaluation"
            ],
            "additionalProperties": false
        },
        "resources": {
            "title": "Resources",
            "description": "Algorithms and files available for benchmarking.",
            "properties": {
                "data": {
                    "title": "Data sampling algorithms",
                    "description": "Data sampling setup.",
                    "type": "object",
                    "properties": {
                        "standard_sampling": {
                            "title": "List of standard_sampling setups.",
                            "description": "List of standard_sampling setups.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/standard_sampling"
                            },
                            "uniqueItems": true
                        }   
                    },
                    "additionalProperties": false
                },
                "graph": {
                    "title": "Graph sampling algorithms",
                    "description": "The available graph sampling algorithms.",
                    "type": "object",
                    "properties": {
                        "generateDAGMaxParents": {
                            "title": "List of generateDAGMaxParents instatiations",
                            "description": "List of generateDAGMaxParents instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/generateDAGMaxParents"
                            },
                            "uniqueItems": true
                        },
                        "notears": {
                            "title": "Notears DAG sampling id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notears_dag_sampling"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                },
                "parameters": {
                    "title": "Parameters sampling algorithm",
                    "description": "The available parameter sampling algorithms",
                    "type": "object",
                    "properties": {
                        "generateBinaryBN": {
                            "description": "List of generateBinayBN instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/generateBinaryBN"
                            },
                            "uniqueItems": true
                        },
                        "notears_parameters_sampling": {
                            "title": "List of notears id's",
                            "description": "List of notears id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notears_parameters_sampling"
                            },
                            "uniqueItems": true
                        }
                    },
                    "additionalProperties": false
                },
                "structure_learning_algorithms": {
                    "title": "Available structure learning algorithms",
                    "description": "The available structure learning algorithms",
                    "type": "object",
                    "properties": {
                        "trilearn_loglin": {
                            "title": "List of trilearn_loglin instatiations",
                            "description": "List of trilearn_loglin instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/trilearn_loglin"
                            },
                            "uniqueItems": true
                        },
                        "blip": {
                            "title": "List of blip instatiations",
                            "description": "List of blip instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/blip"
                            }
                        },
                        "notears": {
                            "title": "Notears instatiations",
                            "description": "Notears instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notears"
                            }
                        },
                        "gobnilp": {
                            "title": "Gobnilp instatiations",
                            "description": "Gobnilp instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gobnilp"
                            }
                        },
                        "fges": {
                            "title": "fGES instatiations",
                            "description": "fGES instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/fges"
                            }
                        },
                        "fci": {
                            "description": "FCI instatiations",
                            "title": "FCI instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/fci"
                            }
                        },
                        "rfci": {
                            "description": "RFCI instatiations",
                            "title": "RFCI instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rfci"
                            }
                        },
                        "gfci": {
                            "description": "GFCI instatiations",
                            "title": "GFCI instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gfci"
                            }
                        },
                        "pcalg": {
                            "description": "PC algorithm instatiations",
                            "title": "PC algorithm instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pcalg"
                            }
                        },
                        "mmhc": {
                            "description": "MMHC instatiations",
                            "title": "MMHC instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mmhc"
                            }
                        },
                        "tabu": {
                            "description": "Tabu search instatiations",
                            "title": "Tabu search instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tabu"
                            }
                        },
                        "itsearch": {
                            "description": "Iterative +1 search instatiations",
                            "title": "Iterative +1 search instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/itsearch"
                            }
                        },
                        "order_mcmc": {
                            "description": "Order MCMC instatiations",
                            "title": "Order MCMC instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/order_mcmc"
                            }
                        },
                        "interiamb": {
                            "description": "Inter-IAMB instatiations",
                            "title": "Inter-IAMB instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/interiamb"
                            }
                        },
                        "gs": {
                            "description": "GS instatiations",
                            "title": "GS instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/interiamb"
                            }
                        },
                        "hc": {
                            "description": "HC instatiations",
                            "title": "HC instatiations",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/hc"
                            }
                        },
                        "greenthomas": {
                            "description": "Green & Thomas instatiations",
                            "title": "Green & Thomas id's",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/greenthomas"
                            }
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [
                "data",
                "graph",
                "parameters",
                "structure_learning_algorithms"
            ],
            "additionalProperties": false
        }
    },
    "definitions": {
        "notears_parameters_sampling": {
            "title": "Notears parameter sampling for Gaissian Bayesian networks",
            "description": "Notears parameter sampling for Gaissian Bayesian networks. This requires that the adjaceny_matrix (graph) is of type notears_dag_sampling",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "edge_coefficient_range_from": {
                    "$ref": "#/definitions/nonnegnum"
                },
                "edge_coefficient_range_to": {
                    "$ref": "#/definitions/nonnegnum"
                }
            }
        },
        "bn.fit_networks": {
            "title": "Bn.fit network file",
            "description": "Bayesian network in bn.fit type serialised as .rds file.",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "filename": {
                    "title": "ID",
                    "type": "string"
                },
                "source": {
                    "title": "Source",
                    "type": "string"
                }
            },
            "required": [
                "id",
                "filename",
                "source"
            ],
            "additionalProperties": false
        },
        "notears_dag_sampling": {
            "title": "Notears DAG sampling",
            "description": "Graph sampling method provided by the notears package. \n Documentation: https://github.com/jmoss20/notears",
            "properties": {
                "id": {
                    "title": "ID",
                    "type": "string"
                },
                "num_nodes": {
                    "$ref": "#definitions/flexnonnegint"
                },
                "num_edges": {
                    "$ref": "#definitions/flexnonnegint"
                },
                "mean": {
                    "title": "Mean",
                    "type": "number"
                },
                "variance": {
                    "title": "Variance",
                    "type": "number"
                }
            },
            "required": [
                "id",
                "num_nodes",
                "num_edges"
            ],
            "additionalProperties": false
        },
        "roc_item": {
            "title": "ROC item",
            "description": "ROC item",
            "type": "object",
            "properties": {
                "algorithm_id": {
                    "type": "string"
                },
                "curve_variable": {
                    "title": "Curve variable",
                    "description": "The varying parameter in the roc curve. This must be one of the parameters for the actual algorithm.",
                    "anyOf": [
                        {
                            "title": "Curve variable",
                            "description": "The varying parameter in the roc curve. This must be one of the parameters for the actual algorithm.",
                            "type": "string"
                        },
                        {
                            "type": "number"
                        }
                    ]
                }
            }
        },
        "data_setup_dict": {
            "type": "object",
            "title": "Data setup",
            "description": "Description of the data model and sampling setup. Make sure that the id's are properly combined.",
            "properties": {
                "graph_id": {
                    "title": "Graph",
                    "description": "ID of the graph instantiation.",
                    "type": "string"
                },
                "parameters_id": {
                    "title": "Parameters",
                    "description": "Parameters ID.",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "data_id": {
                    "title": "Data",
                    "description": "Data sampling method ID.",
                    "type": "string"
                },
                "seed_range": {
                    "title": "Seed range",
                    "description": "This data setup will be simulated for this range of seeds. E.g. seed_range:[1,3] will generate 3 datsets (and corresponding models) with seeds 1,2,3.",
                    "anyOf": [
                        {
                            "title": "List of 2 integers [a, b], where a<=b.",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxLength": 2,
                            "minLength": 2
                        },
                        {
                            "type": "null"
                        }
                    ]
                }
            },
            "required": [
                "graph_id",
                "parameters_id",
                "data_id",
                "seed_range"
            ],
            "additionalProperties": false
        },
        "standard_sampling": {
            "title": "Standard sampling",
            "description": "Data sampling from disctete Bayesian network.",
            "type": "object",
            "properties": {
                "id": {
                    "title": "Unique ID",
                    "type": "string"
                },
                "sample_sizes": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": [
                "id",
                "sample_sizes"
            ],
            "additionalProperties": false
        },
        "generateDAGMaxParents": {
            "title": "generateDAGMaxParents",
            "description": "An instance of generateDAGMaxParents. Sampling of a DAG with specified maximum averge number for parents for the nodes.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "av_parents": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "dims": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": [
                "av_parents",
                "dims",
                "id"
            ],
            "additionalProperties": false
        },
        "generateBinaryBN": {
            "title": "generateBinaryBN",
            "description": "Parameter setting for generateBinaryBN",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "min": {
                    "$ref": "#/definitions/flexprob"
                },
                "max": {
                    "$ref": "#/definitions/flexprob"
                }
            },
            "required": [
                "min",
                "max",
                "id"
            ],
            "additionalProperties": false
        },
        "prob": {
            "title": "Probabaility",
            "description": "Number in the range [0,1].",
            "type": "number",
            "minimum": 0,
            "maximum": 1
        },
        "natnum": {
            "title": "Positive integer",
            "description": "Positive integer",
            "type": "integer",
            "minimum": 1
        },
        "nonnegint": {
            "title": "Non-negative integer",
            "description": "Non-negative integer, 0,1,2,...",
            "type": "integer",
            "minimum": 0
        },
        "nonnegnum": {
            "title": "Non-negative number",
            "description": "Non-negative number",
            "type": "number",
            "minimum": 0
        },
        "flexnonnegnum": {
            "description": "Non-negative number(s).",
            "anyOf": [
                {
                    "$ref": "#/definitions/nonnegnum"
                },
                {
                    "type": "array",
                    "title": "Non-negative number list",
                    "description": "List of non-negative numbers",
                    "items": {
                        "$ref": "#/definitions/nonnegnum"
                    }
                }
            ]
        },
        "flexnonnegnumnull": {
            "title": "Non-negative number(s) or null",
            "description": "E.g. 1.5 or [1.6, 3.8] or null.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                {
                    "type": "null"
                }
            ]
        },
        "flexnonnegint": {
            "title": "Non-negative integer(s)",
            "description": "Non-negative integers, (0,1,2,...), or array of the same.",
            "anyOf": [
                {
                    "$ref": "#/definitions/nonnegint"
                },
                {
                    "type": "array",
                    "title": "Non-negative integer list",
                    "items": {
                        "$ref": "#/definitions/nonnegint"
                    }
                }
            ]
        },
        "flexnonnegintnull": {
            "title": "Non-negative integer(s), or null.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnonnegint"
                },
                {
                    "type": "null"
                }
            ]
        },
        "flexnonnegintstring": {
            "title": "Non-negative integer(s), or Inf string.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnonnegint"
                },
                {
                    "type": "string",
                    "enum": "Inf"
                }
            ]
        },        
        "flexnatnum": {
            "title": "Non-negative integer(s)",
            "anyOf": [
                {
                    "$ref": "#/definitions/natnum"
                },
                {
                    "title": "Positive integer list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/natnum"
                    }
                }
            ]
        },
        "flexnatnumnull": {
            "title": "Npn-negative integer or null",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexnatnum"
                },
                {
                    "type": "null"
                }
            ]
        },
        "flexprob": {
            "title": "Number(s) in the range [0,1].",
            "anyOf": [
                {
                    "$ref": "#/definitions/prob"
                },
                {
                    "type": "array",
                    "title": "Probability list",
                    "items": {
                        "$ref": "#/definitions/prob"
                    }
                }
            ]
        },
        "flexprobnull": {
            "title": "Number(s) in the range [0,1], or null.",
            "description": "Number(s) in the range [0,1], or null.",
            "anyOf": [
                {
                    "$ref": "#/definitions/flexprob"
                },
                {
                    "type": "null"
                }
            ]
        },
        "trilearn_loglin": {
            "title": "Trilearn",
            "description": "Parameter setting for trilearn with log-linear decomposable model.",
            "type": "object",
            "properties": {
                "id": {
                    "desciption": "Algorithm identifier",
                    "type": "string"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "beta": {
                    "$ref": "#/definitions/flexprob"
                },
                "pseudo_obs": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "radii": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "N": {
                    "$ref": "#/definitions/flexnatnum"
                },
                "M": {
                    "$ref": "#/definitions/flexnatnum"
                },
                "burnin": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "threshold": {
                    "$ref": "#/definitions/flexprob"
                }
            },
            "required": [
                "id",
                "alpha",
                "beta",
                "radii",
                "N",
                "M",
                "pseudo_obs",
                "burnin",
                "threshold"
            ]
        },
        "blip": {
            "title": "Blip instantiation",
            "description": "Blip instantiation",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "title": "Unique idenfifier",
                    "description": "Unique idenfifier for that can be used as reference in the benchmark_setup."
                },
                "scorermethod": {
                    "type": "string"
                },
                "solvermethod": {
                    "type": "string"
                },
                "indeg": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "time": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "allocated": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "scorefunction": {
                    "type": "string"
                },
                "alpha": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "cores": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "verbose": {
                    "$ref": "#/definitions/nonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "scorermethod",
                "solvermethod",
                "indeg",
                "time",
                "allocated",
                "scorefunction",
                "alpha",
                "cores",
                "verbose"
            ]
        },
        "notears": {
            "title": "Notears",
            "description": "Notears instantiation",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "min_rate_of_progress": {
                    "$ref": "#/definitions/flexprob"
                },
                "penalty_growth_rate": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "optimation_accuracy": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "loss": {
                    "type": "string",
                    "enum": [
                        "least_squares_loss",
                        "least_squares_loss_cov"
                    ]
                },
                "loss_grad": {
                    "type": "string",
                    "enum": [
                        "least_squares_loss_grad",
                        "least_squares_loss_cov_grad"
                    ]
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "min_rate_of_progress",
                "penalty_growth_rate",
                "optimation_accuracy",
                "loss",
                "loss_grad"
            ]
        },
        "gobnilp": {
            "title": "Gobnilp algorithm",
            "description": "Gobnilp instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "plot": {
                    "type": "boolean"
                },
                "palim": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "alpha": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "prune": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "plot",
                "palim",
                "alpha",
                "prune"
            ]
        },
        "greenthomas": {
            "title": "Green & Thomas algorithm for sampling from decomposable graph distributions",
            "description": "Green & Thomas algorithm for learning decomopasble graphs.\n Source: Green, P. J., & Thomas, A. (2013). Sampling decomposable graphs using a Markov chain on junction trees. Biometrika, 100(1), 91-110.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "n_samples": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "penalty": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "randomits": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "n_samples",
                "penalty",
                "randomits"
            ]
        },
        "fges": {
            "title": "Fast greedy equivalent search (fGES)",
            "description": "fGES instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "faithfulnessAssumed": {
                    "type": "boolean"
                },
                "score": {
                    "type": "string"
                },
                "datatype": {
                    "type": "string"
                },
                "samplePrior":{
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "structurePrior":{
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "faithfulnessAssumed",
                "score",
                "datatype",
                "samplePrior",
                "structurePrior"
            ]
        },
        "fci": {
            "title": "FCI",
            "description": "FCI instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum":["bdeu-test", "cg-lr-test", "chi-square-test", "disc-bic-test", "g-square-test", "prob-test"]
                },
                "datatype": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha",
                "test"
            ]
        },
        "gfci": {
            "title": "GFCI (parameter setting)",
            "description": "GFCI instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum":["bdeu-test", "cg-lr-test", "chi-square-test", "disc-bic-test", "g-square-test", "prob-test"]
                },
                "score": {
                    "type": "string"
                },
                "datatype": {
                    "type": "string"
                },
                "structurePrior":{
                    "$ref": "#/definitions/flexnonnegnum"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha",
                "test",
                "structurePrior"
            ]
        },
        "rfci": {
            "title": "RFCI",
            "description": "RFCI instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test": {
                    "type": "string",
                    "enum":["bdeu-test", "cg-lr-test", "chi-square-test", "disc-bic-test", "g-square-test", "prob-test"]
                },
                "datatype": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha",
                "test"
            ]
        },
        "pcalg": {
            "title": "PC algorithm",
            "description": "PC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "indepTest":{
                    "type": "string",
                    "enum": ["binCItest", "gaussCItest", "dsepTest", "disCItest"]
                },
                "numCores":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "verbose": {
                    "type":"boolean"
                },
                "NAdelete": {
                    "type":"boolean"
                },
                "mmax":{
                    "$ref": "#/definitions/flexnonnegintstring"
                },
                "u2pd":{
                    "type":"string",
                    "enum": ["relaxed", "rand", "retry"]
                },
                "skelmethod":{
                    "type": "string",
                    "enum": ["stable","original", "stable.fast"]
                },
                "conservative":{
                    "type":"boolean"
                },
                "majrule":{
                    "type":"boolean"
                },
                "solveconfl":{
                    "type":"boolean"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha"
            ]
        },
        "mmhc": {
            "title": "Max-min hill climbing algorithm (MMHC)",
            "description": "MMHC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test":{
                    "type":"string",
                    "enum": ["mi", "mi-adf", "mc-mi", "smc-mi", 
                                         "sp-mi", "mi-sh", "x2", "x2-adf", "sp-x2",
                                         "jt", "mc-jt", "smc-jt", "cor", "mc-cor",
                                        "smc-cor", "zf", "mc-zf", "smc-zf", "mi-g",
                                    "mc-mi-g", "smc-mi-g", "mi-g-sh", "mi-cg"]
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha"
            ]
        },
        "interiamb": {
            "title": "Inter-IAMB algorithm",
            "description": "Inter-IAMB algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test":{
                    "type":"string",
                    "enum": ["mi", "mi-adf", "mc-mi", "smc-mi", 
                                         "sp-mi", "mi-sh", "x2", "x2-adf", "sp-x2",
                                         "jt", "mc-jt", "smc-jt", "cor", "mc-cor",
                                        "smc-cor", "zf", "mc-zf", "smc-zf", "mi-g",
                                    "mc-mi-g", "smc-mi-g", "mi-g-sh", "mi-cg"]
                },
                "B":{
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "maxsx":{
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "debug":{
                    "type":"boolean"
                },
                "undirected":{
                    "type":"boolean"
                } 
            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha",
                "test",
                "B",
                "maxsx",
                "debug",
                "undirected"
            ]
        },
        "gs": {
            "title": "Grow shrink (GS) algorithm (paramter setting)",
            "description": "Grow shrink (GS) algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"
                },
                "test":{
                    "type":"string",
                    "enum": ["mi", "mi-adf", "mc-mi", "smc-mi", 
                                         "sp-mi", "mi-sh", "x2", "x2-adf", "sp-x2",
                                         "jt", "mc-jt", "smc-jt", "cor", "mc-cor",
                                        "smc-cor", "zf", "mc-zf", "smc-zf", "mi-g",
                                    "mc-mi-g", "smc-mi-g", "mi-g-sh", "mi-cg"]
                },
                "B":{
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "maxsx":{
                    "$ref": "#/definitions/flexnatnumnull"
                },
                "debug":{
                    "type":"boolean"
                },
                "undirected":{
                    "type":"boolean"
                }

            },
            "additionalProperties": false,
            "required": [
                "id",
                "alpha",
                "test",
                "B",
                "maxsx",
                "debug",
                "undirected"
            ]
        },
        "tabu": {
            "title": "TABU search (parameter setting)",
            "description": "TABU algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "beta": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "score": {
                    "type": "string"
                },
                "iss": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "issmu": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "l": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "k": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "beta",
                "score",
                "iss",
                "issmu",
                "l",
                "k",
                "prior"
            ]
        },
        "hc": {
            "title": "HC algorithm (parameter setting)",
            "description": "HC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "perturb": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "restart": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "beta": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "score": {
                    "type": "string"
                },
                "iss": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "issmu": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "l": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "k": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "required": [
                "id",
                "beta",
                "score",
                "iss",
                "issmu",
                "l",
                "k",
                "prior",
                "perturb",
                "restart"
            ]
        },
        "itsearch": {
            "title": "Iterative search (paramter setting)",
            "description": "Iterative search +1 algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique idenfifier"
                },
                "estimate": {
                    "type": "string",
                    "enum": ["map", "endspace"]
                },
                "MAP": {
                    "type": "boolean"
                },
                "plus1it": {
                    "$ref": "#/definitions/flexnonnegintnull"
                },
                "posterior": {
                    "$ref": "#/definitions/flexprobnull"
                },
                "softlimit":{
                    "$ref": "#/definitions/flexnonnegint"    
                },
                "hardlimit":{
                    "$ref": "#/definitions/flexnonnegint"    
                },
                "alpha":{
                    "$ref": "#/definitions/flexprob"    
                },
                "gamma":{
                    "$ref": "#/definitions/flexnonnegnum"    
                },
                "cpdag":{
                    "type":"boolean"
                },
                "mergetype":{
                    "type":"string",
                    "enum":["skeleton"]
                },
                "scoretype": {
                    "type": "string"
                },
                "chi": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "edgepf": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "am": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "aw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                }
            },
            "additionalProperties": false,
            "required": [
                "MAP",
                "plus1it",
                "posterior",
                "scoretype",
                "chi",
                "edgepf",
                "am",
                "aw",
                "softlimit",
                "hardlimit",
                "alpha",
                "gamma",
                "cpdag",
                "mergetype",
                "estimate"
            ]            
        },
        "order_mcmc": {
            "title": "Order MCMC (parameter setting)",
            "description": "Order MCMC algorithm instance",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                },
                "startspace_algorithm": {
                    "type": "string"
                },
                "plus1": {
                    "type": "boolean"
                },
                "scoretype": {
                    "type": "string"
                },
                "MAP": {
                    "type": "boolean"
                },
                "chi": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "edgepf": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "am": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "aw": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "iterations": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "stepsave": {
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "alpha":{
                    "$ref": "#/definitions/flexprobnull"    
                },
                "gamma":{
                    "$ref": "#/definitions/flexnonnegnum"    
                },
                "cpdag":{
                    "type":"boolean"
                },
                "threshold": {
                    "$ref": "#/definitions/flexprob"
                },
                "burnin": {
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "additionalProperties": false,
            "required": [
                "scoretype",
                "chi",
                "edgepf",
                "am",
                "aw",
                "threshold",
                "burnin",
                "startspace_algorithm",
                "plus1",
                "MAP",
                "stepsave",
                "iterations",
                "gamma"
            ]
        }
    }
}