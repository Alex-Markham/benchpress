import json
from jsonschema import validate
import snakemake.utils
import sys, getopt
import shutil
import filecmp

from dirsync import sync
from pathlib import Path

args = sys.argv

# Copy data adjmats and parameters into the results folder.
# Sync folders to not alter the timestamps for the files.

if os.path.isdir("results/data/mydatasets"):
    sync("resources/data/mydatasets", "results/data/mydatasets", "sync")
else:
    shutil.copytree("resources/data", "results/data")

if os.path.isdir("results/bn/bn.fit_networks"):
    sync("resources/bn/bn.fit_networks", "results/bn/bn.fit_networks", "sync")
else:
    shutil.copytree("resources/bn", "results/bn")

if os.path.isdir("results/adjmat/myadjmats"):
    sync("resources/adjmat/myadjmats", "results/adjmat/myadjmats", "sync")
else:
    shutil.copytree("resources/adjmat", "results/adjmat")


configfilename="config/config.json"
i=0
for arg in args:
    if arg=="--configfile":
        configfilename = args[i+1]
        break
    i+=1

configfile: 
    configfilename

snakemake.utils.validate(config, 'schemas/config.schema.json')

include: "rules/validate.smk"
include: "rules/pattern_strings.smk"
include: "rules/algorithm_strings.smk"
include: "rules/helper_functions.smk"
include: "rules/algorithm_shell_commands.smk"

include: "rules/algorithm_summary_shell_command.smk"
# TODO: All filenames should be generated from the config file.

singularity:
    "docker://onceltuca/benchmark:1.0.7"

rule heatmap_from_adjmat_trajectory:
    input:
        adjvecs = "{output_dir}/adjvecs/{something}/seed={seed}/adjvecs.json"
    output:
        heatmap = "{output_dir}/heatmap_estimate/{something}/burnin={burnin}/seed={seed}/heatmap.csv" 
    message:
        "Estimating heatmap from graph trajectory"
    shell:
        "Rscript workflow/scripts/run_estimate_heatmap_from_traj.R " \
        "--adjvectraj {input.adjvecs} " \
        "--filename {output.heatmap} " \
        "--tosymmetric 0"

rule size_autocorrelation_from_trajectory:
   input:
       adjvecs = "{output_dir}/adjvecs/{something}/adjvecs.json" 
   output:
       autocorr = "{output_dir}/autocorr_estimate/{something}/burnin={burnin}/autocorr.csv" 

rule adjmat_from_heatmap:
    input:
        heatmap="{output_dir}/heatmap_estimate/"\ 
                "{something}/"\
                "burnin={burnin}/"\
                "{somethingelse}/" \
                "heatmap.csv"
    output:
        adjmat_est="{output_dir}/adjmat_estimate/"\
                    "{something}/" + pattern_strings["mcmc_est"] + "/{somethingelse}/"\
                    "adjmat.csv"
    message:
        "Estimating adjmat from heatmap"
    shell:
        "Rscript workflow/scripts/run_threshold_heatmap.R " \
        "--heatmap {input.heatmap} " \
        "--filename {output.adjmat_est} " \
        "--threshold {wildcards.threshold}"

rule plot_matrix:
    input:
        adjmat = "{output_dir}/adjmat_estimate/{something}/adjmat.csv"
    output:
        plot = "{output_dir}/adjmat_plots/{something}/adjmat.eps"
    singularity:
        docker_image("trilearn")
    shell:
        "python workflow/scripts/plot_heatmap.py -o {output.plot} -f {input.adjmat}"

include: "rules/sample_adjmat.smk"
include: "rules/sample_parameters.smk"
include: "rules/sample_data.smk"
include: "rules/algorithm_rules.smk"
include: "rules/evaluation.smk"
    
# def adjmat_plots(algorithm, mode="result"):
#     ret = [[[expand(config["benchmark_setup"]["output_dir"] + "/adjmat_plots/"\
#             "adjmat=/{adjmat_string}/"
#             "bn=/{param_string}/"
#             "data=/{data_string}/"
#             "algorithm=/{alg_string}/"
#             "adjmat.eps",
#             alg_string=json_string[alg_conf["id"]],
#             #plot_legend=alg_conf["plot_legend"],
#             #seed=seed,
#             adjmat_string=gen_adjmat_string_from_conf(sim_setup["graph"], seed), 
#             param_string=gen_parameter_string_from_conf(sim_setup["parameters"], seed),
#             data_string=gen_data_string_from_conf(sim_setup["data"], seed))
#             for seed in get_seed_range(sim_setup["seed_range"])]
#             for sim_setup in config["benchmark_setup"]["data"]]
#             for alg_conf in config["resources"]["structure_learning_algorithms"][algorithm] if alg_conf["id"] in config["benchmark_setup"]["algorithm_ids"]],
#     return ret