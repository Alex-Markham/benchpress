import json
from jsonschema import validate
import snakemake.utils
import sys, getopt
import shutil
import filecmp

from dirsync import sync
from pathlib import Path
import os

args = sys.argv

# Copy data adjmats and parameters into the results folder.
# Sync folders to not alter the timestamps for the files.

if os.path.isdir("results/data/mydatasets"):
    sync("resources/data/mydatasets", "results/data/mydatasets", "sync")
else:
    shutil.copytree("resources/data", "results/data")

if os.path.isdir("results/bn/bn.fit_networks"):
    sync("resources/bn/bn.fit_networks", "results/bn/bn.fit_networks", "sync")
else:
    shutil.copytree("resources/bn", "results/bn")

if os.path.isdir("results/bn/sem_params"):
    sync("resources/bn/sem_params", "results/bn/sem_params", "sync")
else:
    shutil.copytree("resources/bn/sem_params", "results/bn/sem_params")

configfilename="config/config.json"
i=0
for arg in args:
    if arg=="--configfile":
        configfilename = args[i+1]
        break
    i+=1

configfile: 
    configfilename

snakemake.utils.validate(config, 'schemas/config.schema.json')

include: "rules/docker_images.smk"

singularity:
    docker_image("benchmark")

include: "rules/validate.smk"
include: "rules/pattern_strings.smk"
include: "rules/algorithm_strings.smk"
include: "rules/helper_functions.smk"
include: "rules/algorithm_shell_commands.smk"
include: "rules/algorithm_summary_shell_command.smk"
include: "rules/sample_adjmat.smk"
include: "rules/sample_parameters.smk"
include: "rules/sample_data.smk"
include: "rules/algorithm_rules.smk"
include: "rules/evaluation.smk"

rule heatmap_from_adjvec_trajectory:
    input:
        "workflow/scripts/graphtraj_est.py",
        traj = "{output_dir}/adjvecs/{something}/seed={seed}/adjvecs.csv"
    output:
        heatmap = "{output_dir}/heatmap_estimate/{something}/burnin={burnin}/seed={seed}/heatmap.csv" 
    params:
        estimator="heatmap",
        burnin="{burnin}",
        graph_type="dag"
    singularity:
        docker_image("networkx")
    script: 
        "scripts/graphtraj_est.py"    

rule adjmat_from_heatmap:
    input:
        heatmap="{output_dir}/heatmap_estimate/"\ 
                "{something}/"\
                "burnin={burnin}/"\
                "{somethingelse}/" \
                "heatmap.csv"
    output:
        adjmat_est="{output_dir}/adjmat_estimate/"\
                    "{something}/" + pattern_strings["mcmc_est"] + "/{somethingelse}/"\
                    "adjmat.csv"
    shell:
        "Rscript workflow/scripts/run_threshold_heatmap.R " \
        "--heatmap {input.heatmap} " \
        "--filename {output.adjmat_est} " \
        "--threshold {wildcards.threshold}"
