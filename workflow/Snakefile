import json
from jsonschema import validate
import snakemake.utils
import sys, getopt
import shutil
import filecmp
from pathlib import Path
import os

include: "rules/helper_functions.py"

check_system_requirements()

# This is a workaround. Needed a variable for the configfilename
# and this seemed to be the only way. But there are probably better ways.
args = sys.argv
configfilename = "config/config.json"
i = 0
for arg in args:
    if arg == "--configfile" or arg == "--configfiles":  # This is strange
        configfilename = args[i + 1]
        break
    i += 1


configfile: configfilename


snakemake.utils.validate(config, "schemas/newschema.json")


include: "rules/docker_images.smk"

container: docker_image("benchmark")


rule all:
    input:
        get_active_rules


# Validate JSON file based on its values.
include: "rules/validate.py"
include: "rules/module_patterns.py"
include: "rules/module_strings.py"
include: "rules/filename_patterns.py"

# Include the graph modules
for p in Path("workflow/rules/graph/").glob("*"):
    if (p / "rule.smk").is_file():
        include: Path("rules/graph/", p.name, "rule.smk")


# Include the parameters modules
for p in Path("workflow/rules/parameters/").glob("*"):
    if (p / "rule.smk").is_file():

        include: Path("rules/parameters/", p.name, "rule.smk")


# Include the data modules
for p in Path("workflow/rules/data/").glob("*"):
    if (p / "rules.smk").is_file():

        include: Path("rules/data/", p.name, "rules.smk")


# Include the structure_learning_algorithms modules
for p in Path("workflow/rules/structure_learning_algorithms/").glob("*"):
    if (p / "rules.smk").is_file():
        pass
        #print(Path("rules/structure_learning_algorithms/", p.name, "rules.smk"))
        #include: Path("rules/structure_learning_algorithms/", p.name, "rules.smk")

 
    if (p / "rule.smk").is_file():

        include: Path("rules/structure_learning_algorithms/", p.name, "rule.smk")


# Include the evaluation modules
for p in Path("workflow/rules/evaluation/").glob("*"):
    if (p / "rules.smk").is_file():

        include: Path("rules/evaluation/", p.name, "rules.smk")


    elif (p / "rule.smk").is_file():

        include: Path("rules/evaluation/", p.name, "rule.smk")
