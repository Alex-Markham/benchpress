import json
from jsonschema import validate
import snakemake.utils
import sys, getopt
import shutil
import filecmp
from pathlib import Path
import os

include: "rules/helper_functions.py"

check_system_requirements()

# This is a workaround. Needed a variable for the configfilename
# and this seemed to be the only way. But there are probably better ways.
args = sys.argv
configfilename = "config/config.json"
i = 0
for arg in args:
    if arg == "--configfile" or arg == "--configfiles":  # This is strange
        configfilename = args[i + 1]
        break
    i += 1


configfile: configfilename


snakemake.utils.validate(config, "schemas/config.schema.json")


include: "rules/docker_images.smk"

container: docker_image("benchmark")


rule all:
    input:
        get_active_rules


mcmc_modules = ["bdgraph", "bidag_order_mcmc", "parallelDG", "trilearn_pgibbs", "gg99_singlepair", "gt13_multipair"]

# Validate JSON file based on its values.
include: "rules/validate.py"
include: "rules/module_patterns.py"
include: "rules/module_strings.py"
include: "rules/filename_patterns.py"



# Include the graph modules
for p in Path("workflow/rules/graph/").glob("*"):
    if (p / "rule.smk").is_file() or (p.name == "fixed"):
        if p.name in pattern_strings:
            include: Path("rules/graph/", p.name, "rule.smk")


# Include the parameters modules
for p in Path("workflow/rules/parameters/").glob("*"):
    if (p / "rule.smk").is_file():
        if (p.name in pattern_strings) or (p.name == "fixed"):
            include: Path("rules/parameters/", p.name, "rule.smk")


# Include the data modules
for p in Path("workflow/rules/data/").glob("*"):
    if (p / "rules.smk").is_file():
        include: Path("rules/data/", p.name, "rules.smk")


# Include the structure_learning_algorithms modules
for p in Path("workflow/rules/structure_learning_algorithms/").glob("*"):
    module_name = p.name # This is used inside the module to get their names
    
    if (p / "rule.smk").is_file():
        
        if p.name in pattern_strings:
            # set the module name here
            
            include: Path("rules/structure_learning_algorithms/", p.name, "rule.smk")

            if p.name in mcmc_modules:
                
                rule:
                    name:
                        p.name + "_estimation"
                    input:
                        traj=alg_output_seqgraph_path_fine_match(p.name)
                    output:
                        adjmat=adjmat_estimate_path_mcmc(p.name)  # here is the difference from order_mcmc. matching diffferently.
                    params:
                        graph_type="chordal",
                        estimator="{mcmc_estimator}",
                        threshold="{threshold}",
                        burnin_frac="{burnin_frac}"

                    container:
                        docker_image("networkx")
                    script:
                        "scripts/evaluation/graphtraj_est.py"


# Include the evaluation modules

for p in Path("workflow/rules/evaluation/").glob("*"):

        
    if (p / "rules.smk").is_file():            
        include: Path("rules/evaluation/", p.name, "rules.smk")

    elif (p / "rule.smk").is_file():
        include: Path("rules/evaluation/", p.name, "rule.smk")
