configfile: 
    "config.json"

replicates = range(int(config["replicates"]["start"]), 
                    int(config["replicates"]["end"]+1))

# TODO: All filenames should be generated from the config file.

singularity:
    "docker://onceltuca/benchmark:1.0.7"

rule sample_dag:
    output:
        adjmat = "{output_dir}/adjmat_p_{p}_avpar_{avparents}_{replicate}.csv"
    shell:
        "Rscript scripts/sample_dags.R " \
        "--filename {output.adjmat} " \ 
        "--nodes {wildcards.p} " \
        "--parents {wildcards.avparents} " \
        "--seed {wildcards.replicate}"

rule sample_bn:
    input:
        adjmat = "{output_dir}/adjmat_p_{p}_avpar_{avparents}_{replicate}.csv"
    output:
        bn = "{output_dir}/bn_p_{p}_avpar_{avparents}_{replicate}.rds"
    shell:
        "Rscript scripts/sample_bayesian_network_for_dag.R " \
        "--filename_dag {input.adjmat} " \
        "--filename {output} "  \
        "--seed {wildcards.replicate} "

rule sample_data:
    input:
        bn="{output_dir}/bn_p_{p}_avpar_{avparents}_{replicate}.rds"
    output:
        data="{output_dir}/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
    shell:
        "Rscript scripts/sample_data.R " \
        "--filename {output.data} " \
        "--filename_bn {input.bn} " \
        "--samples {wildcards.n} " \
        "--seed {wildcards.replicate}"

rule sample_data_range_header:
    input:
        "{output_dir}/bn_p_{p}_avpar_{avparents}_{replicate}.rds"
    output:
        "{output_dir}/range_header_data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
    shell:
        "Rscript scripts/sample_data_with_range_header.R " 
        "--filename {output} "
        "--filename_bn {input} "
        "--samples {wildcards.n} "
        "--seed {wildcards.replicate} "

rule run_blip:
    input:
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat_blip_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_" \
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "time_{max_time}_" \
                "scorer.method_{scorermethod}_" \
                "solver.method_{solvermethod}_" \
                "indeg_{indeg}_" \        
                "cores_{cores}_" \
                "allocated_{allocated}_" \
                "scorefunction_{scorefunction}_" \
                "alpha_{alpha}_" \
                "verbose_{verbose}_" \
                "{replicate}.csv",
        time = config["output_dir"]+"/time_blip_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_" \
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "time_{max_time}_" \
                "scorer.method_{scorermethod}_" \
                "solver.method_{solvermethod}_" \
                "indeg_{indeg}_" \
                "cores_{cores}_" \
                "allocated_{allocated}_" \
                "scorefunction_{scorefunction}_" \
                "alpha_{alpha}_" \
                "verbose_{verbose}_" \
                "{replicate}.txt"
    message:
        "Executing blip algorithm on the following files: {input}."
    #singularity:
    #    "docker://onceltuca/rblip"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_blip.R " \
        "--filename_data {input.data} " \
        "--output_dir config[output_dir] " \
        "--time {wildcards.max_time} " \
        "--scorer.method {wildcards.scorermethod} " \
        "--solver.method {wildcards.solvermethod} " \
        "--indeg {wildcards.indeg} " \  
        "--cores {wildcards.cores} " \
        "--allocated {wildcards.allocated} " \
        "--scorefunction {wildcards.scorefunction} " \
        "--alpha {wildcards.alpha} " \
        "--verbose {wildcards.verbose} " \
        "--filename {output.adjmat} " 

rule summarise_blip:
    input:
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_est =  config["output_dir"]+"/adjmat_blip_" \
                        "n_{n}_" \
                        "p_{p}_" \
                        "avpar_{avparents}_" \
                        "score_type_{score_type}_" \
                        "bdecatpar_chi_{bdecatpar_chi}_" \
                        "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                        "time_{max_time}_" \
                        "scorer.method_{scorermethod}_" \
                        "solver.method_{solvermethod}_" \                        
                        "indeg_{indeg}_" \
                        "cores_{cores}_" \
                        "allocated_{allocated}_" \
                        "scorefunction_{scorefunction}_" \
                        "alpha_{alpha}_" \
                        "verbose_{verbose}_" \
                        "{replicate}.csv",
        time = config["output_dir"]+"/time_blip_" \
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_" \
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "time_{max_time}_" \
                "scorer.method_{scorermethod}_" \
                "solver.method_{solvermethod}_" \
                "indeg_{indeg}_" \
                "cores_{cores}_" \
                "allocated_{allocated}_" \
                "scorefunction_{scorefunction}_" \
                "alpha_{alpha}_" \
                "verbose_{verbose}_" \
                "{replicate}.txt",

    output:
        res = config["output_dir"]+"/res_blip_" \
        "n_{n}_"\
        "p_{p}_"\
        "avpar_{avparents}_" \
        "score_type_{score_type}_" \
        "bdecatpar_chi_{bdecatpar_chi}_" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        "time_{max_time}_" \
        "scorer.method_{scorermethod}_" \
        "solver.method_{solvermethod}_" \
        "indeg_{indeg}_" \
        "cores_{cores}_" \
        "allocated_{allocated}_" \
        "scorefunction_{scorefunction}_" \
        "alpha_{alpha}_" \
        "verbose_{verbose}_" \
        "legend_{plot_legend}_" \
        "{replicate}.csv",

    message:
        "Summarising blip results from the following files: {input}."
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output.res} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents       --colval {wildcards.avparents} " \
        " && python scripts/add_column.py --filename {output} --colname replicate       --colval {wildcards.replicate} " \
        " && python scripts/add_column.py --filename {output} --colname algorithm       --colval blip " \
        " && python scripts/add_column.py --filename {output} --colname dim             --colval {wildcards.p} " \
        " && python scripts/add_column.py --filename {output} --colname sample_size     --colval {wildcards.n} " \        
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname max_time        --colval {wildcards.max_time} " \
        " && python scripts/add_column.py --filename {output} --colname scorer.method   --colval {wildcards.scorermethod} " \
        " && python scripts/add_column.py --filename {output} --colname solver.method   --colval {wildcards.solvermethod} " \
        " && python scripts/add_column.py --filename {output} --colname indeg           --colval {wildcards.indeg} " \ 
        " && python scripts/add_column.py --filename {output} --colname cores           --colval {wildcards.cores} " \
        " && python scripts/add_column.py --filename {output} --colname allocated       --colval {wildcards.allocated} " \
        " && python scripts/add_column.py --filename {output} --colname scorefunction   --colval {wildcards.scorefunction} " \
        " && python scripts/add_column.py --filename {output} --colname alpha           --colval {wildcards.alpha} " \
        " && python scripts/add_column.py --filename {output} --colname verbose         --colval {wildcards.verbose} " \
        " && python scripts/add_column.py --filename {output} --colname time            --colval `cat {input.time}` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  
rule itsearch:
    input:
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
    output:
        adjmat = config["output_dir"] + "/adjmat_itsearch_"\
                    "n_{n}_"\
                    "p_{p}_"\
                    "avpar_{avparents}_"\
                    "score_type_{score_type}_"\
                    "bdecatpar_chi_{bdecatpar_chi}_" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "map_{MAP}_"\
                    "plus1it_{plus1it}_"\
                    "posterior_{posterior}_"\
                    #"score_type_{score_type}_"\
                    #"bdecatpar_chi_{bdecatpar_chi}_" \
                    #"bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "{replicate}.csv",
        time = config["output_dir"] + "/time_itsearch_"\
                    "n_{n}_"\
                    "p_{p}_"\
                    "avpar_{avparents}_"\
                    "score_type_{score_type}_"\
                    "bdecatpar_chi_{bdecatpar_chi}_" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "map_{MAP}_"\
                    "plus1it_{plus1it}_"\
                    "posterior_{posterior}_"\
                    #"score_type_{score_type}_"\
                    #"bdecatpar_chi_{bdecatpar_chi}_" \
                    #"bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "{replicate}.txt"

    message:
        "Executing iterative search algorithm with MAP={wildcards.MAP} on the following files: {input}"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_iterative_search.R "\
        "--filename_data {input.data} "\
        "--filename {output.adjmat} " \
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--map {wildcards.MAP} "\
        #"--avparents {wildcards.avparents} " \
        "--score_type {wildcards.score_type} " \
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        "--plus1it {wildcards.plus1it} " \
        "--posterior {wildcards.posterior} " \
        "--title itsearch"\

rule sumarise_itsearch:
    input:
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_est = config["output_dir"]+"/adjmat_itsearch_"\
                    "n_{n}_"\
                    "p_{p}_"\
                    "avpar_{avparents}_"\
                    "score_type_{score_type}_"\
                    "bdecatpar_chi_{bdecatpar_chi}_" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "map_{MAP}_"\
                    "plus1it_{plus1it}_"\
                    "posterior_{posterior}_"\
                    #"score_type_{score_type}_"\
                    #"bdecatpar_chi_{bdecatpar_chi}_" \
                    #"bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "{replicate}.csv",
        time = config["output_dir"]+"/time_itsearch_"\
                    "n_{n}_"\
                    "p_{p}_"\
                    "avpar_{avparents}_"\
                    "score_type_{score_type}_"\
                    "bdecatpar_chi_{bdecatpar_chi}_" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "map_{MAP}_"\
                    "plus1it_{plus1it}_"\
                    "posterior_{posterior}_"\
                    #"score_type_{score_type}_"\
                    #"bdecatpar_chi_{bdecatpar_chi}_" \
                    #"bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "{replicate}.txt"
    output:
        config["output_dir"] + "/res_itsearch_" \
                    "n_{n}_" \
                    "p_{p}_" \
                    "avpar_{avparents}_" \
                    "score_type_{score_type}_" \
                    "bdecatpar_chi_{bdecatpar_chi}_" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "map_{MAP}_" \
                    "plus1it_{plus1it}_" \
                    "posterior_{posterior}_" \
                    #"score_type_{score_type}_"\
                    #"bdecatpar_chi_{bdecatpar_chi}_" \
                    #"bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "legend_{plot_legend}_" \
                    "{replicate}.csv"
    message:
        "Executing iterative search algorithm with MAP={wildcards.MAP} on the following files: {input}"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents     --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate     --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm     --colval itsearch "\
        " && python scripts/add_column.py --filename {output} --colname dim           --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size   --colval {wildcards.n} " \
        " && python scripts/add_column.py --filename {output} --colname plus1it       --colval {wildcards.plus1it} " \
        " && python scripts/add_column.py --filename {output} --colname moveprobs     --colval null " \
        " && python scripts/add_column.py --filename {output} --colname MAP           --colval {wildcards.MAP} " \            
        " && python scripts/add_column.py --filename {output} --colname posterior     --colval {wildcards.posterior} " \
        " && python scripts/add_column.py --filename {output} --colname iterations    --colval null " \
        " && python scripts/add_column.py --filename {output} --colname stepsave      --colval null " \
        " && python scripts/add_column.py --filename {output} --colname softlimit     --colval 9 " \ 
        " && python scripts/add_column.py --filename {output} --colname hardlimit     --colval 12 " \ 
        " && python scripts/add_column.py --filename {output} --colname alpha         --colval 0.05 " \ 
        " && python scripts/add_column.py --filename {output} --colname gamma         --colval 1  " \ 
        " && python scripts/add_column.py --filename {output} --colname startspace    --colval null " \ 
        " && python scripts/add_column.py --filename {output} --colname blacklist     --colval null " \ 
        " && python scripts/add_column.py --filename {output} --colname verbose       --colval true " \
        " && python scripts/add_column.py --filename {output} --colname chainout      --colval true " \
        " && python scripts/add_column.py --filename {output} --colname scoreout      --colval true " \
        " && python scripts/add_column.py --filename {output} --colname cpdag         --colval false " \
        " && python scripts/add_column.py --filename {output} --colname mergetype     --colval skeleton " \
        " && python scripts/add_column.py --filename {output} --colname addspace      --colval null " \
        " && python scripts/add_column.py --filename {output} --colname scoretable    --colval null " \
        " && python scripts/add_column.py --filename {output} --colname startorder    --colval null " \
        " && python scripts/add_column.py --filename {output} --colname accum         --colval false " \
        " && python scripts/add_column.py --filename {output} --colname score_type    --colval {wildcards.score_type} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi    --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname time            --colval `cat {input.time}` "  \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule ordermcmc:
    input:
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
        startspace = config["output_dir"]+"/{startspace}.csv"
    output:
        adjvecs=config["output_dir"]+"/adjvecs_orderMCMC_"\
            "n_{n}_" \
            "p_{p}_" \
            "avpar_{avparents}_"\
            "score_type_{score_type}_" \
            "bdecatpar_chi_{bdecatpar_chi}_" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
            "{replicate}_"\
            "startspace_{startspace}.json",
        time=config["output_dir"]+"/time_orderMCMC_"\
            "n_{n}_" \
            "p_{p}_" \
            "avpar_{avparents}_"\
            "score_type_{score_type}_" \
            "bdecatpar_chi_{bdecatpar_chi}_" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
            "{replicate}_"\
            "startspace_{startspace}.txt"
    message:
        "Executing order mcmc algorithm with startspace on the following files: {input}."
    shell: 
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_order_mcmc.R "
        "--filename {output.adjvecs} " \
        "--filename_data {input.data} " \
        "--filename_startspace {input.startspace} " \   
        #"--score_type {wildcards.score_type} " \
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        #"--plus1it {wildcards.plus1it} " \
        #"--map {wildcards.MAP} "\
        "--output_dir {config[output_dir]} " \
        "--seed {wildcards.replicate} "

rule adjmat_from_trajectory_ordermcmc:
    input:
        adjvecs=config["output_dir"]+"/adjvecs_orderMCMC_" \
        "n_{n}_" \
        "p_{p}_" \
        "avpar_{avparents}_"\
        "score_type_{score_type}_" \
        "bdecatpar_chi_{bdecatpar_chi}_" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        "{replicate}_"\
        "startspace_{startspace}.json"
    output:
        adjmat_est=config["output_dir"]+"/adjmat_orderMCMC_"\
        "n_{n}_" \
        "p_{p}_" \
        "avpar_{avparents}_"\
        "score_type_{score_type}_" \
        "bdecatpar_chi_{bdecatpar_chi}_" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        "threshold_{threshold}_" \
        "{replicate}_"\
        "startspace_{startspace}.csv"
#        "startspace_adjmat_{startspace_method}_"\
#        "n_{n}_"\
#        "p_{p}_"\
#        "avpar_{avparents}_"\
#        "score_type_{score_type}_" \
#        "bdecatpar_chi_{bdecatpar_chi}_" \
#        "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
#        "{startspace_params}_"\
#        "{replicate}.csv"
    shell:
        "Rscript scripts/run_estimate_from_graph_traj.R " \
        "--adjvectraj {input.adjvecs} " \
        "--filename {output.adjmat_est} " \
        "--threshold {wildcards.threshold}"

rule summarise_ordermcmc:
    input:
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_est=config["output_dir"]+"/adjmat_orderMCMC_"\
                "n_{n}_" \
                "p_{p}_" \
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "threshold_{threshold}_" \
                "{replicate}_"\
                "startspace_adjmat_{startspace_method}_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "{startspace_params}_"\
                "{replicate}.csv",
#               "startspace_{startspace}.csv",
        time=config["output_dir"]+"/time_orderMCMC_"\
                "n_{n}_" \
                "p_{p}_" \
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "{replicate}_"\
                "startspace_adjmat_{startspace_method}_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "{startspace_params}_"\
                "{replicate}.txt"
    output:
        config["output_dir"]+"/res_orderMCMC_"\
        "n_{n}_" \
        "p_{p}_" \
        "avpar_{avparents}_"\
        "score_type_{score_type}_" \
        "bdecatpar_chi_{bdecatpar_chi}_" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        "threshold_{threshold}_" \
        "legend_{plot_legend}_" \
        "{replicate}_"\
        "startspace_adjmat_{startspace_method}_"\
        "n_{n}_"\
        "p_{p}_"\
        "avpar_{avparents}_"\
        "score_type_{score_type}_" \
        "bdecatpar_chi_{bdecatpar_chi}_" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        "{startspace_params}_"\
        "{replicate}.csv"

    message:
        "Executing order mcmc algorithm with startspace on the following files: {input}."
    shell: 
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} " \
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval orderMCMC "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\
        " && python scripts/add_column.py --filename {output} --colname map         --colval null "\
        #" && python scripts/add_column.py --filename {output} --colname startspace_filename --colval {input.startspace}.csv"\
        " && python scripts/add_column.py --filename {output} --colname blacklist   --colval null "\
        " && python scripts/add_column.py --filename {output} --colname startorder  --colval null "\
        " && python scripts/add_column.py --filename {output} --colname scoretable  --colval null "\
        " && python scripts/add_column.py --filename {output} --colname moveprobs   --colval null "\
        " && python scripts/add_column.py --filename {output} --colname iterations  --colval null "\
        " && python scripts/add_column.py --filename {output} --colname stepwise    --colval null "\
        " && python scripts/add_column.py --filename {output} --colname alpha       --colval 0.05 "\
        " && python scripts/add_column.py --filename {output} --colname cpdag       --colval false "\   
        " && python scripts/add_column.py --filename {output} --colname gamma       --colval 1 "\
        " && python scripts/add_column.py --filename {output} --colname hardlimit   --colval 15 "\      
        " && python scripts/add_column.py --filename {output} --colname chainout    --colval true "\   
        " && python scripts/add_column.py --filename {output} --colname scoreout    --colval false "\   
        " && python scripts/add_column.py --filename {output} --colname verbose     --colval false "\
        " && python scripts/add_column.py --filename {output} --colname threshold   --colval {wildcards.threshold} "\
        #" && python scripts/add_column.py --filename {output} --colname itsearch_MAP     --colval {wildcards.MAP} "\
        #" && python scripts/add_column.py --filename {output} --colname itsearch_plus1it     --colval {wildcards.plus1it} "\
        " && python scripts/add_column.py --filename {output} --colname startspace_method     --colval {wildcards.startspace_method} "\
        " && python scripts/add_column.py --filename {output} --colname startspace_params     --colval {wildcards.startspace_params} "\
        " && python scripts/add_column.py --filename {output} --colname time        --colval `cat {input.time}` " \ 
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule run_pcalg:
    input:
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat_pcalg_" \
            "n_{n}_"\
            "p_{p}_"\
            "avpar_{avparents}_"\
            "score_type_{score_type}_" \
            "bdecatpar_chi_{bdecatpar_chi}_" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
            "alpha_{alpha}_"\
            "{replicate}.csv",
        time = config["output_dir"]+"/time_pcalg_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "alpha_{alpha}_"\
                "{replicate}.txt"
    message:
        "Executing order pc algorithm with startspace on the following files: {input}."
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_pcalg.R " \
        "--filename_data {input.data} "\
        "--alpha {wildcards.alpha} "\
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--filename {output.adjmat} "

rule summarise_pcalg:
    input:
        adjmat_true=config["output_dir"]+"/adjmat_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_est=config["output_dir"]+"/adjmat_pcalg_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "alpha_{alpha}_"\
                "{replicate}.csv",
        data=config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
        time = config["output_dir"]+"/time_pcalg_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "alpha_{alpha}_"\
                "{replicate}.txt"
    output:
        config["output_dir"]+"/res_pcalg_n_{n}_" \
            "p_{p}_" \
            "avpar_{avparents}_" \
            "score_type_{score_type}_" \
            "bdecatpar_chi_{bdecatpar_chi}_" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
            "alpha_{alpha}_"\
            "legend_{plot_legend}_" \
            "{replicate}.csv"
    message:
        "Summarising pc algorithm with startspace on the following files: {input}."
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval pcalg "\
        " && python scripts/add_column.py --filename {output} --colname alpha       --colval {wildcards.alpha} "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} " \
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \    
        " && python scripts/add_column.py --filename {output} --colname fixedGaps   --colval null " \
        " && python scripts/add_column.py --filename {output} --colname fixedEdges  --colval null " \
        " && python scripts/add_column.py --filename {output} --colname NAdelete    --colval true " \
        " && python scripts/add_column.py --filename {output} --colname m.max       --colval inf " \
        " && python scripts/add_column.py --filename {output} --colname conservative --colval false " \
        " && python scripts/add_column.py --filename {output} --colname maj.rule     --colval false " \
        " && python scripts/add_column.py --filename {output} --colname solve.confl  --colval false " \
        " && python scripts/add_column.py --filename {output} --colname numCores     --colval 1 " \
        " && python scripts/add_column.py --filename {output} --colname verbose      --colval false " \
        " && python scripts/add_column.py --filename {output} --colname time          --colval `cat {input.time}` "  \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  
rule mmhc:
    input:
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
    output:
        adjmat=config["output_dir"]+"/adjmat_mmhc_" \
            "n_{n}_"\
            "p_{p}_"\
            "avpar_{avparents}_"\
            "score_type_{score_type}_" \
            "bdecatpar_chi_{bdecatpar_chi}_" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
            "alpha_{alpha}_"\
            "{replicate}.csv",
        time=config["output_dir"]+"/time_mmhc_" \
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "alpha_{alpha}_"\
                "{replicate}.txt"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_mmhc.R "\
        "--filename_data {input.data} "\
        "--alpha {wildcards.alpha} "\
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--filename {output.adjmat} "\

rule summarise_mmhc:
    input:
        adjmat_true = config["output_dir"]+"/adjmat_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_est=config["output_dir"]+"/adjmat_mmhc_" \
            "n_{n}_" \
            "p_{p}_" \
            "avpar_{avparents}_"\
            "score_type_{score_type}_" \
            "bdecatpar_chi_{bdecatpar_chi}_" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
            "alpha_{alpha}_"\
            "{replicate}.csv",
        time=config["output_dir"]+"/time_mmhc_" \
                "n_{n}_" \
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "alpha_{alpha}_"\
                "{replicate}.txt",
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
    output:
        config["output_dir"]+"/res_mmhc_"\
        "n_{n}_"\
        "p_{p}_"\
        "avpar_{avparents}_"\
        "score_type_{score_type}_" \
        "bdecatpar_chi_{bdecatpar_chi}_" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        "alpha_{alpha}_"\
        "legend_{plot_legend}_" \
        "{replicate}.csv"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval mmhc "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} " \
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname alpha       --colval {wildcards.alpha} " \
        " && python scripts/add_column.py --filename {output} --colname whitelist   --colval null " \
        " && python scripts/add_column.py --filename {output} --colname debug       --colval false " \
        " && python scripts/add_column.py --filename {output} --colname maximize.args   --colval null " \
        " && python scripts/add_column.py --filename {output} --colname time          --colval `cat {input.time}` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule gobnilp:
    input:
        data = config["output_dir"]+"/range_header_data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat_gobnilp_"\
                    "n_{n}_"\
                    "p_{p}_"\
                    "avpar_{avparents}_"\
                    "score_type_{score_type}_" \
                    "bdecatpar_chi_{bdecatpar_chi}_" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "palim_{palim}_"\
                    "{replicate}.csv",
        time = config["output_dir"]+"/time_gobnilp_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "palim_{palim}_"\
                "{replicate}.txt"
    singularity:
        "docker://onceltuca/gobnilp:1.6.3"
    shell: 
        #"/usr/bin/time -f \"%e\" -o {output.time} " \ 
        "touch gobnilp.set && " \   
        "echo 'gobnilp/outputfile/adjacencymatrix = \"bn.mat\" ' > gobnilp.set &&" \
        "echo 'gobnilp/outputfile/scoreandtime = \"score_and_time.txt\" ' >> gobnilp.set &&" \
        "echo 'gobnilp/scoring/palim = {wildcards.palim} ' >> gobnilp.set && " \     
        "/myappdir/gobnilp163/bin/gobnilp -f=dat -g=gobnilp.set {input.data} " \
        " && cat bn.mat > {output.adjmat} " \
        " && cat score_and_time.txt > {output.time} " \
        " && rm bn.mat " \
        " && rm score_and_time.txt " \
        " && rm gobnilp.set"


        #"Rscript scripts/run_gobnilp.R "\
        #"--filename_data {input.data} "\
        #"--output_dir {config[output_dir]} "\
        #"--seed {wildcards.replicate} "\
        #"--palim {wildcards.palim} "\
        #"--filename {output.adjmat} "\

rule summarise_gobnilp:
    input:
        data = config["output_dir"]+"/range_header_data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_est = config["output_dir"]+"/adjmat_gobnilp_"\
                     "n_{n}_"\
                     "p_{p}_"\
                     "avpar_{avparents}_"\
                    "score_type_{score_type}_" \
                    "bdecatpar_chi_{bdecatpar_chi}_" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                     "palim_{palim}_"\
                     "{replicate}.csv",
        time = config["output_dir"]+"/time_gobnilp_n_{n}_p_{p}_avpar_{avparents}_" \
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "palim_{palim}_{replicate}.txt"     
    output:
        res = config["output_dir"]+"/res_gobnilp_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "palim_{palim}_"\
                "legend_{plot_legend}_" \
                "{replicate}.csv"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output.res} " \ 
        "--range_header_data 1 " \ 
        "--adjmat_header 0 " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval gobnilp "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname palim       --colval {wildcards.palim} "\
        #" && python scripts/add_column.py --filename {output} --colname time        --colval `cat {input.time}` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule fges: #use funtion as input to generate filename from the config file
    input:
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat_fges_"\
                    "n_{n}_"\
                    "p_{p}_"\
                    "avpar_{avparents}_"\
                    "score_type_{score_type}_" \
                    "bdecatpar_chi_{bdecatpar_chi}_" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "faithfulnessAssumed_{faithfulnessAssumed}_"\
                    "{replicate}.csv",
        time = config["output_dir"]+"/time_fges_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "faithfulnessAssumed_{faithfulnessAssumed}_"\
                "{replicate}.txt"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_fges.R "\
        "--filename_data {input.data} "\
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--faithfulnessAssumed {wildcards.faithfulnessAssumed} "\
        "--filename {output.adjmat} "\
        #'java -jar causal-cmd-1.1.3-jar-with-dependencies.jar --algorithm fges --data-type discrete --dataset data_n_100_p_50_avpar_2_1.txt --delimiter comma --score bdeu-score --quote-char \" --json-graph --structurePrior 1'


rule summarise_fges:
    input:
        data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat_p_{p}_avpar_{avparents}_{replicate}.csv",
        adjmat_est = config["output_dir"]+"/adjmat_fges_"\
                     "n_{n}_"\
                     "p_{p}_"\
                     "avpar_{avparents}_"\
                    "score_type_{score_type}_" \
                    "bdecatpar_chi_{bdecatpar_chi}_" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "faithfulnessAssumed_{faithfulnessAssumed}_"\
                     "{replicate}.csv",
        time = config["output_dir"]+"/time_fges_n_{n}_p_{p}_avpar_{avparents}_" \
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "faithfulnessAssumed_{faithfulnessAssumed}_{replicate}.txt"     
    output:
        res = config["output_dir"]+"/res_fges_"\
                "n_{n}_"\
                "p_{p}_"\
                "avpar_{avparents}_"\
                "score_type_{score_type}_" \
                "bdecatpar_chi_{bdecatpar_chi}_" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                "faithfulnessAssumed_{faithfulnessAssumed}_"\
                "legend_{plot_legend}_" \
                "{replicate}.csv"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output.res} " \ 
        "--range_header_data 0 " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval fges "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        #" && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        #" && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname faithfulnessAssumed       --colval {wildcards.faithfulnessAssumed} "\
        " && python scripts/add_column.py --filename {output} --colname time        --colval `cat {input.time}` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  



rule plot:
    input:        
        # blip = [expand(config["output_dir"] + "/res_blip_"
        # "n_{n}_"
        # "p_{p}_"
        # "avpar_{avparents}_"
        # "score_type_bde_" 
        # "bdecatpar_chi_{bdecatpar_chi}_" 
        # "bdecatpar_edgepf_{bdecatpar_edgepf}_"
        # "time_{time}_" 
        # "scorer.method_{scorermethod}_"
        # "solver.method_{solvermethod}_"
        # "indeg_{indeg}_"
        # "cores_{cores}_"
        # "allocated_{allocated}_"
        # "scorefunction_{scorefunction}_"
        # "alpha_{alpha}_"
        # "verbose_{verbose}_"
        # "legend_{plot_legend}_" 
        # "{replicate}.csv",
        #                 replicate=replicates,
        #                 time=config["blip"]["time"],
        #                 scorermethod=config["blip"]["scorer.method"],
        #                 solvermethod=config["blip"]["solver.method"],                       
        #                 indeg=config["blip"]["indeg"],
        #                 cores=config["blip"]["cores"],
        #                 allocated=config["blip"]["allocated"],
        #                 scorefunction=config["blip"]["scorefunction"],
        #                 alpha=config["blip"]["alpha"],
        #                 verbose=config["blip"]["verbose"],
        #                 n=config["sample_sizes"][i],
        #                 avparents=config["av_parents"][i],
        #                 bdecatpar_chi=config["score"]["bdecatpar"]["chi"],
        #                 bdecatpar_edgepf=config["score"]["bdecatpar"]["edgepf"],
        #                 plot_legend=config["blip"]["plot_legend"],
        #                 p=config["dims"][i]) for i in range(len(config["dims"]))], 
        # itsearch_map = [expand(config["output_dir"] + "/res_itsearch_"
        #                 "n_{n}_"
        #                 "p_{p}_"
        #                 "avpar_{avparents}_"                        
        #                 "score_type_bde_" 
        #                 "bdecatpar_chi_{bdecatpar_chi}_" 
        #                 "bdecatpar_edgepf_{bdecatpar_edgepf}_" 
        #                 "map_{map}_"
        #                 "plus1it_{plus1it}_" 
        #                 "posterior_{posterior}_" 
        #                 "score_type_bde_" 
        #                 "bdecatpar_chi_{bdecatpar_chi}_" 
        #                 "bdecatpar_edgepf_{bdecatpar_edgepf}_" 
        #                 "legend_{plot_legend}_" \
        #                 "{replicate}.csv",
        #                 replicate=replicates,
        #                 n=config["sample_sizes"][i],
        #                 avparents=config["av_parents"][i],
        #                 p=config["dims"][i],
        #                 map=config["itsearch_map"]["optional"]["MAP"],
        #                 #score_type=config["itsearch_map"]["score_params"]["type"],
        #                 bdecatpar_chi=config["itsearch_map"]["score_params"]["bdecatpar"]["chi"],
        #                 bdecatpar_edgepf=config["itsearch_map"]["score_params"]["bdecatpar"]["edgepf"],
        #                 plus1it=config["itsearch_map"]["optional"]["plus1it"],
        #                 posterior=config["itsearch_map"]["optional"]["posterior"],
        #                 plot_legend=config["itsearch_map"]["plot_legend"],
        #                 ) for i in range(len(config["dims"]))],
        # itsearch_sample = [expand(config["output_dir"] + "/res_itsearch_"
        #                 "n_{n}_"
        #                 "p_{p}_"
        #                 "avpar_{avparents}_"                        
        #                 "score_type_bde_" 
        #                 "bdecatpar_chi_{bdecatpar_chi}_" 
        #                 "bdecatpar_edgepf_{bdecatpar_edgepf}_" 
        #                 "map_{map}_"
        #                 "plus1it_{plus1it}_" 
        #                 "posterior_{posterior}_" 
        #                 "score_type_bde_" 
        #                 "bdecatpar_chi_{bdecatpar_chi}_" 
        #                 "bdecatpar_edgepf_{bdecatpar_edgepf}_" 
        #                 "legend_{plot_legend}_" \
        #                 "{replicate}.csv",
        #                 replicate=replicates,
        #                 n=config["sample_sizes"][i],
        #                 avparents=config["av_parents"][i],
        #                 p=config["dims"][i],
        #                 map=config["itsearch_sample"]["optional"]["MAP"],
        #                 #score_type=config["itsearch_map"]["score_params"]["type"],
        #                 bdecatpar_chi=config["itsearch_sample"]["score_params"]["bdecatpar"]["chi"],
        #                 bdecatpar_edgepf=config["itsearch_sample"]["score_params"]["bdecatpar"]["edgepf"],
        #                 plus1it=config["itsearch_sample"]["optional"]["plus1it"],
        #                 posterior=config["itsearch_sample"]["optional"]["posterior"],
        #                 plot_legend=config["itsearch_sample"]["plot_legend"],
        #                 ) for i in range(len(config["dims"]))],
        # # This will be very specialised for every starts.
        # order_mcmc_sample = [expand(
        #                             config["output_dir"]+"/res_orderMCMC_"\
        #                             "n_{n}_" \
        #                             "p_{p}_" \
        #                             "avpar_{avparents}_"\
        #                             "score_type_bde_"\
        #                             "bdecatpar_chi_{bdecatpar_chi}_" \
        #                             "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        #                             "threshold_{threshold}_" \
        #                             "legend_{plot_legend}_" \
        #                             "{replicate}_"\
        #                             "startspace_adjmat_itsearch_"\
        #                             "n_{n}_"\
        #                             "p_{p}_"\
        #                             "avpar_{avparents}_"\                                    
        #                             "score_type_bde_"\
        #                             "bdecatpar_chi_{itsearch_bdecatpar_chi}_" \
        #                             "bdecatpar_edgepf_{itsearch_bdecatpar_edgepf}_" \
        #                             "map_{itsearch_map}_"\
        #                             "plus1it_{itsearch_plus1it}_"\
        #                             "posterior_{itsearch_posterior}_"\
        #                             #"score_type_bde_"\
        #                             #"bdecatpar_chi_{bdecatpar_chi}_" 
        #                             #"bdecatpar_edgepf_{bdecatpar_edgepf}_" 
        #                             "{replicate}.csv",
        #                     replicate=replicates,   
        #                     n=config["sample_sizes"][i],
        #                     avparents=config["av_parents"][i],
        #                     p=config["dims"][i],
        #                     bdecatpar_chi=config["score"]["bdecatpar"]["chi"],
        #                     bdecatpar_edgepf=config["score"]["bdecatpar"]["edgepf"],
        #                     #map=config["ordermcmc_sample"]["optional"]["MAP"],
        #                     itsearch_map=config[config["ordermcmc_sample"]["startspace"]]["optional"]["MAP"],
        #                     itsearch_bdecatpar_chi=config[config["ordermcmc_sample"]["startspace"]]["score_params"]["bdecatpar"]["chi"],
        #                     itsearch_bdecatpar_edgepf=config[config["ordermcmc_sample"]["startspace"]]["score_params"]["bdecatpar"]["edgepf"],
        #                     itsearch_plus1it=config[config["ordermcmc_sample"]["startspace"]]["optional"]["plus1it"],
        #                     itsearch_posterior=config[config["ordermcmc_sample"]["startspace"]]["optional"]["posterior"],
        #                     threshold=config["ordermcmc_sample"]["threshold"],
        #                     plot_legend=config["ordermcmc_sample"]["plot_legend"],
        #                     ) for i in range(len(config["dims"]))],
        # order_mcmc_map = [expand(
        #                         config["output_dir"]+"/res_orderMCMC_"\
        #                         "n_{n}_" \
        #                         "p_{p}_" \
        #                         "avpar_{avparents}_"\
        #                         "score_type_bde_"\
        #                         "bdecatpar_chi_{bdecatpar_chi}_" \
        #                         "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        #                         "threshold_{threshold}_" \  
        #                         "legend_{plot_legend}_" \
        #                         "{replicate}_"\
        #                         "startspace_adjmat_itsearch_"\
        #                         "n_{n}_"\
        #                         "p_{p}_"\
        #                         "avpar_{avparents}_"\                                    
        #                         "score_type_bde_"\
        #                         "bdecatpar_chi_{itsearch_bdecatpar_chi}_" \
        #                         "bdecatpar_edgepf_{itsearch_bdecatpar_edgepf}_" \
        #                         "map_{itsearch_map}_"\
        #                         "plus1it_{itsearch_plus1it}_"\
        #                         "posterior_{itsearch_posterior}_"\
        #                         #"score_type_bde_"\
        #                         #"bdecatpar_chi_{bdecatpar_chi}_" 
        #                         #"bdecatpar_edgepf_{bdecatpar_edgepf}_" 
        #                         "{replicate}.csv",
        #                 replicate=replicates,   
        #                 n=config["sample_sizes"][i],
        #                 avparents=config["av_parents"][i],
        #                 p=config["dims"][i],
        #                 bdecatpar_chi=config["score"]["bdecatpar"]["chi"],
        #                 bdecatpar_edgepf=config["score"]["bdecatpar"]["edgepf"],
        #                 #map=config["ordermcmc_sample"]["optional"]["MAP"],
        #                 itsearch_map=config[config["ordermcmc_map"]["startspace"]]["optional"]["MAP"],
        #                 itsearch_bdecatpar_chi=config[config["ordermcmc_map"]["startspace"]]["score_params"]["bdecatpar"]["chi"],
        #                 itsearch_bdecatpar_edgepf=config[config["ordermcmc_map"]["startspace"]]["score_params"]["bdecatpar"]["edgepf"],
        #                 itsearch_plus1it=config[config["ordermcmc_map"]["startspace"]]["optional"]["plus1it"],
        #                 itsearch_posterior=config[config["ordermcmc_map"]["startspace"]]["optional"]["posterior"],
        #                 threshold=config["ordermcmc_map"]["threshold"],
        #                 plot_legend=config["ordermcmc_map"]["plot_legend"],
        #                 ) for i in range(len(config["dims"]))],
        # pcalg = [expand(config["output_dir"] + "/res_pcalg_"
        #                 "n_{n}_"
        #                 "p_{p}_"
        #                 "avpar_{avparents}_"
        #                 "score_type_bde_"\
        #                 "bdecatpar_chi_{bdecatpar_chi}_" \
        #                 "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        #                 "alpha_{alpha}_"
        #                 "legend_{plot_legend}_" \
        #                 "{replicate}.csv",
        #                 replicate=replicates,
        #                 alpha=config["pcalg"]["alpha"],
        #                 n=config["sample_sizes"][i],
        #                 avparents=config["av_parents"][i],
        #                 bdecatpar_chi=config["score"]["bdecatpar"]["chi"],
        #                  bdecatpar_edgepf=config["score"]["bdecatpar"]["edgepf"],
        #                  plot_legend=config["pcalg"]["plot_legend"],
        #                 p=config["dims"][i]) for i in range(len(config["dims"]))],
        # mmhc = [expand(config["output_dir"] + "/res_mmhc_"
        #                 "n_{n}_"
        #                 "p_{p}_"
        #                 "avpar_{avparents}_"
        #                 "score_type_bde_"\
        #                 "bdecatpar_chi_{bdecatpar_chi}_" \
        #                 "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        #                 "alpha_{alpha}_"
        #                 "legend_{plot_legend}_" \
        #                 "{replicate}.csv",
        #                 replicate=replicates,
        #                 alpha=config["mmhc"]["restrict.args"]["alpha"],
        #                 n=config["sample_sizes"][i],
        #                 avparents=config["av_parents"][i],
        #                 bdecatpar_chi=config["score"]["bdecatpar"]["chi"],
        #                 bdecatpar_edgepf=config["score"]["bdecatpar"]["edgepf"],
        #                 plot_legend=config["mmhc"]["plot_legend"],
        #                 p=config["dims"][i]) for i in range(len(config["dims"]))],
        gobnilp = [expand(config["output_dir"] + "/res_gobnilp_"
                    "n_{n}_"
                    "p_{p}_"
                    "avpar_{avparents}_"
                    "score_type_bde_"\
                    "bdecatpar_chi_{bdecatpar_chi}_" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
                    "palim_{palim}_" \
                    "legend_{plot_legend}_" \
                    "{replicate}.csv",
                         replicate=replicates,
                         n=config["sample_sizes"][i],
                         avparents=config["av_parents"][i],
                         palim=config["gobnilp"]["palim"],
                         bdecatpar_chi=config["score"]["bdecatpar"]["chi"],
                         bdecatpar_edgepf=config["score"]["bdecatpar"]["edgepf"],                         
                         plot_legend=config["gobnilp"]["plot_legend"],
                         p=config["dims"][i]) for i in range(len(config["dims"]))]#,
        # fges = [expand(config["output_dir"] + "/res_fges_"
        #     "n_{n}_"
        #     "p_{p}_"
        #     "avpar_{avparents}_"
        #     "score_type_bde_"\
        #     "bdecatpar_chi_{bdecatpar_chi}_" \
        #     "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        #     "faithfulnessAssumed_{faithfulnessAssumed}_" \
        #     "legend_{plot_legend}_" \
        #     "{replicate}.csv",
        #             replicate=replicates,
        #             n=config["sample_sizes"][i],
        #             avparents=config["av_parents"][i],
        #             faithfulnessAssumed=config["fges"]["faithfulnessAssumed"],
        #             bdecatpar_chi=config["score"]["bdecatpar"]["chi"],
        #             bdecatpar_edgepf=config["score"]["bdecatpar"]["edgepf"],                         
        #             plot_legend=config["fges"]["plot_legend"],
        #             p=config["dims"][i]) for i in range(len(config["dims"]))]

    output:
        "ROC.eps" 
        #SHD.eps
#        config["output_dir"]+"/logscore.eps"
    notebook:
        "plot.ipynb"


        # order_mcmc_map = [expand(config["output_dir"] + "/res_orderMCMC_map_n_{n}_p_{p}_avpar_{avparents}_{replicate}_startspace_endspace_itsearch_map_n_{n}_p_{p}_avpar_{avparents}_map_1_{replicate}.csv",
        #                          replicate=config["replicates"],
        #                          n=config["sample_sizes"][i],
        #                          avparents=config["av_parents"][i],
        #                          p=config["dims"][i]) for i in range(len(config["dims"]))],


        # itsearch_sample = [expand(config["output_dir"] + "/res_itsearch_"
        #                 "n_{n}_"
        #                 "p_{p}_"
        #                 "avpar_{avparents}_"
        #                 "map_0_"
        #                 "score_type_{score_type}_" 
        #                 "bdecatpar_chi_{bdecatpar_chi}_" \
        #                 "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
        #                 "{replicate}.csv",
        #                 replicate=replicates,
        #                 n=config["sample_sizes"][i],
        #                 avparents=config["av_parents"][i],
        #                 p=config["dims"][i],
        #                 score_type=config["itsearch_mapnew"]["score_params"]["type"],
        #                 bdecatpar_chi=config["itsearch_mapnew"]["score_params"]["bdecatpar"]["chi"],
        #                 bdecatpar_edgepf=config["itsearch_mapnew"]["score_params"]["bdecatpar"]["edgepf"],
        #                 ) for i in range(len(config["dims"]))],


        #itsearch_sample = [expand(config["output_dir"] + "/res_itsearch_sample_n_{n}_p_{p}_avpar_{avparents}_map_0_{replicate}.csv",
        #                          replicate=config["replicates"],
        #                          n=config["sample_sizes"][i],
        #                          avparents=config["av_parents"][i],
        #                          p=config["dims"][i]) for i in range(len(config["dims"]))],


# rule ordermcmc_itsearch_sample:
#     input:
#         dag = config["output_dir"]+"/dag_p_{p}_avpar_{avparents}_{replicate}.rds",
#         data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
#         startspace = config["output_dir"]+"/endspace_itsearch_sample_"\
#                      "n_{n}_"\
#                      "p_{p}_"\
#                      "avpar_{avparents}_"\
#                      "map_0_{replicate}.rds"
#     output:
#         config["output_dir"]+"/res_orderMCMC_"\
#         "n_{n}_" \
#         "p_{p}_" \
#         "MAP_{map}_"\
#         "plus1_{plus1}_"\
#         "avpar_{avparents}_"\
#         "{replicate}_"\
#         "startspace_endspace_itsearch_"\
#         "n_{n}_"\
#         "p_{p}_"\
#         "avpar_{avparents}_"\
#         "map_{map}_"\
#         "score_type_{score_type}_" \
#         "bdecatpar_chi_{bdecatpar_chi}_" \
#         "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
#         "plus1it_{plus1it}_" \
#         "posterior_{posterior}_"\
#         "{replicate}.csv",
#     message:
#         "Executing order mcmc algorithm with startspace on the following files: {input}."
#     shell: 
#         "Rscript scripts/run_order_mcmc.R "
#         "--filename {output} " \
#         "--filename_data {input.data} " \
#         "--filename_dag {input.dag} " \
#         "--filename_startspace {input.startspace} " \
#         "--output_dir {config[output_dir]} " \
#         "--seed {wildcards.replicate} " \
#         " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} " \
#         " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
#         " && python scripts/add_column.py --filename {output} --colname algorithm   --colval orderMCMC_sample "\
#         " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
#         " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\



# rule ordermcmc_itsearch_map:
#     input:
#         dag = config["output_dir"]+"/dag_p_{p}_avpar_{avparents}_{replicate}.rds",
#         data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
#         startspace = config["output_dir"]+"/endspace_itsearch_map_"\
#         "n_{n}_"\
#         "p_{p}_"\
#         "avpar_{avparents}_"\
#         "map_1_"\
#         "{replicate}.rds"
#     output:
#         config["output_dir"]+"/res_orderMCMC_map_"\
#         "n_{n}_"\
#         "p_{p}_"\
#         "avpar_{avparents}_"\
#         "{replicate}_"\
#         "startspace_endspace_itsearch_map_"\
#         "n_{n}_"\
#         "p_{p}_"\
#         "avpar_{avparents}_"\
#         "map_1_"\
#         "{replicate}.csv",
#     message:
#         "Executing order mcmc algorithm on the following files: {input}."
#     shell: 
#         "Rscript scripts/run_order_mcmc.R " \
#         "--filename {output} " \
#         "--filename_data {input.data} " \
#         "--filename_dag {input.dag} "\
#         "--filename_startspace {input.startspace} "\
#         "--output_dir {config[output_dir]} "\
#         "--seed {wildcards.replicate} "      \  
#         " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} " \
#         " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
#         " && python scripts/add_column.py --filename {output} --colname algorithm   --colval orderMCMC_map "\
#         " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
#         " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "


# rule itsearch_map:
#     input:
#         dag = config["output_dir"]+"/dag_p_{p}_avpar_{avparents}_{replicate}.rds",
#         data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
#     output:
#         benchmark = config["output_dir"]+"/res_itsearch_map_"\
#                     "n_{n}_"\
#                     "p_{p}_"\
#                     "avpar_{avparents}_"\
#                     "map_1_" \
#                     "score_type_{score_type}_" \
#                     "bdecatpar_chi_{bdecatpar_chi}_" \
#                     "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
#                     "{replicate}.csv", 
#         endspace = config["output_dir"]+"/endspace_itsearch_map_"\
#                     "n_{n}_"\
#                     "p_{p}_"\
#                     "avpar_{avparents}_" \
#                     "map_1_" \
#                     "score_type_{score_type}_" \
#                     "bdecatpar_chi_{bdecatpar_chi}_" \
#                     "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
#                     "{replicate}.rds"
#     message:
#         "Executing iterative search algorithm with MAP=TRUE on the following files: {input}"
#     shell:
#         "Rscript scripts/run_iterative_search.R " \
#         "--filename_data {input.data} " \ 
#         "--filename_dag {input.dag} " \
#         "--output_dir {config[output_dir]} " \
#         "--seed {wildcards.replicate} " \
#         "--avparents {wildcards.avparents} " \
#         "--map 1 " \
#         "--score_type {wildcards.score_type} " \
#         "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
#         "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
#         "--plus1it {wildcards.plus1it} " \
#         "--posterior {wildcards.posterior} " \
#         "--title itsearch_map " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname avparents     --colval {wildcards.avparents} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname replicate     --colval {wildcards.replicate} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname algorithm     --colval itsearch_map " \ 
#         " && python scripts/add_column.py --filename {output.benchmark} --colname dim           --colval {wildcards.p} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname sample_size   --colval {wildcards.n} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname MAP           --colval true " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname plus1it       --colval null " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname posterior     --colval null " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname score_type    --colval {wildcards.score_type} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname bdecatpar_chi    --colval {wildcards.bdecatpar_chi} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " 
 