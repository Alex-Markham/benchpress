import json

blip_string =   "/blip/" \
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "time={max_time}/" \
                "scorer.method={scorermethod}/" \
                "solver.method={solvermethod}/" \
                "indeg={indeg}/" \        
                "cores={cores}/" \
                "allocated={allocated}/" \
                "scorefunction={scorefunction}/" \
                "alpha={alpha}/" \
                "verbose={verbose}/"

def gen_model_strings_from_conf(models, seed, setup):
    """
    Generate the graphs and paremeters simulatnepusly since we do not want 
    every combiantion of graphs and paramters.
    Maybe this should be part of the setup? -No, this part belongs to the method step, 
    not the model/data simulation step.
    There are 3 steps.
    1. Specify the models.
    2. Generate data sets from the models.
    3. Run a nunmber of structure learningn algortithms on th dataset.
    """
    pass

def gen_adjmat_string_from_conf(adjmat_gen_method, seed, setup):
    with open('config.json') as json_file:
        conf = json.load(json_file)

    fixed_graphs = ["asia", "survey", "alarm", "sachs", "hepar2"]
    if adjmat_gen_method == "generateDAGMaxParents":
        curconf = conf["graphs"]["sampled"]["algorithms"][adjmat_gen_method]
        n_simulation_setups = len(conf["data"]["sample_sizes"])
        return expand(adjmat_gen_method + \
            "/p={p}" + 
            "/avpar={av_parents}" + 
            "/seed={seed}",
            av_parents=curconf["av_parents"][setup], 
            p=curconf["dims"][setup],
            seed=seed) 
    elif adjmat_gen_method in fixed_graphs:
        return "bn.fit_adjmats/" + adjmat_gen_method    

def gen_parameter_string_from_conf(gen_method, seed):
    with open('config.json') as json_file:
        conf = json.load(json_file)
    if gen_method == "generateBinaryBN":
        curconf = conf["model_parameters"]["sampled"]["algorithms"][gen_method]
        return expand(gen_method + \
                "/min={min}" + \
                "/max={max}" + \
                "/seed={seed}", 
                min=curconf["min"], 
                max=curconf["max"], 
                seed=seed)
    elif gen_method in ["asia", "survey", "alarm", "sachs", "hepar2"]:
        return "bn.fit_networks/"+gen_method
    

def active_algorithm_files(wildcards):
    with open('config.json') as json_file:
        conf = json.load(json_file)
    return [conf["output_dir"] + "/" + alg + ".csv" for alg in conf["plotting"]["algorithms"]]

configfile: 
    "config.json"

replicates = range(int(config["data"]["replicates"]["start"]), 
                    int(config["data"]["replicates"]["end"]+1))

# TODO: All filenames should be generated from the config file.

singularity:
    "docker://onceltuca/benchmark:1.0.7"

rule bnlearn_adjmat:
    input:
        config["output_dir"] + "/bn/bn.fit_networks/{name}.rds"
    output:
        config["output_dir"] + "/adjmat/bn.fit_adjmats/{name}.csv"
    shell:
        "mkdir -p {config[output_dir]}" + "/adjmat/bn.fit_adjmats/ " \
        "&& Rscript scripts/bnlearn_bn_to_adjmat.R " 
        "--filename_graph {output} "
        "--filename_bn {input}"

rule bnlearn_networks:
    output:
        config["output_dir"] + "/bn/bn.fit_networks/{bn}.rds"
    shell:
        "mkdir -p {config[output_dir]}" + "/bn/bn.fit_networks/ " \
        "&& wget https://www.bnlearn.com/bnrepository/{wildcards.bn}/{wildcards.bn}.rds "
        "--output-document {output}"

rule sample_adjmat:
    output:        
        adjmat = config["output_dir"] + "/adjmat/generateDAGMaxParents/p={p}/avpar={avparents}/seed={replicate}.csv"
    shell:
        "Rscript scripts/sample_dags.R " \
        "--filename {output.adjmat} " \ 
        "--nodes {wildcards.p} " \
        "--parents {wildcards.avparents} " \
        "--seed {wildcards.replicate}"

rule sample_binary_bn:
    input:
        adjmat = "{output_dir}/adjmat/{adjmat}.csv" 
    output:
        bn = "{output_dir}/bn/generateBinaryBN/min={min}/max={max}/seed={seed}/adjmat=/{adjmat}.rds"
    shell:
        "Rscript scripts/sample_bayesian_network_for_dag.R " \
        "--filename_dag {input.adjmat} " \
        "--filename {output} "  \
        "--seed {wildcards.seed} "

rule sample_bindata:
    input:
        bn="{output_dir}/bn/generateBinaryBN/{bn}/adjmat=/{adjmat}.rds"
    output:
        data="{output_dir}/data/adjmat=/{adjmat}/bn=/generateBinaryBN/{bn}/data=/n={n}/seed={replicate}.csv"
    shell:
        "Rscript scripts/sample_binary_data.R " \
        "--filename {output.data} " \
        "--filename_bn {input.bn} " \
        "--samples {wildcards.n} " \
        "--seed {wildcards.replicate}"

rule sample_bnfit_data:
    input:        
        bn="{output_dir}/bn/bn.fit_networks/{bn}.rds"        
    output:
        data="{output_dir}/data/adjmat=/{adjmat}/bn=/bn.fit_networks/{bn}/data=/n={n}/seed={replicate}.csv"
    shell:
        "Rscript scripts/sample_from_bnlearn_bn.R " \
        "--filename {output.data} " \
        "--filename_bn {input.bn} " \
        "--samples {wildcards.n} " \
        "--seed {wildcards.replicate}"

rule sample_data_range_header:
    input:
        bn="{output_dir}/bn/generateBinaryBN/{bn}/adjmat=/{adjmat}.rds"
    output:                
        data="{output_dir}/data/adjmat=/{adjmat}/bn=/generateBinaryBN/{bn}/range_header_data=/n={n}/seed={replicate}.csv"
    shell:
        "Rscript scripts/sample_data_with_range_header.R " \
        "--filename {output.data} "\                
        "--filename_bn {input.bn} " \
        "--samples {wildcards.n} " \
        "--seed {wildcards.replicate}"

# names could be /data/graph=/reference_graph=asia/graph_parameters=/
# For simulated networks, the graphical model name contains both graph with seed and parameters with seed.

# graphical_models=/graphname=/parameter_name=/method=/method_parameters=/
rule run_blip:
    input:
        data = config["output_dir"]+"/data/{data}/seed={replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat_estimate/{data}/"\
                "algorithm=" + blip_string +\
                "seed={replicate}/" \
                "adjmat.csv",
        time = config["output_dir"] + "/time/{data}/"\
                "algorithm=" + blip_string +\
                "seed={replicate}/" \
                "time.txt"

    message:
        "Executing blip algorithm on the following files: {input}."
    #singularity:
    #    "docker://onceltuca/rblip"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_blip.R " \
        "--filename_data {input.data} " \
        "--output_dir {config[output_dir]} " \
        "--time {wildcards.max_time} " \
        "--scorer.method {wildcards.scorermethod} " \
        "--solver.method {wildcards.solvermethod} " \
        "--indeg {wildcards.indeg} " \  
        "--cores {wildcards.cores} " \
        "--allocated {wildcards.allocated} " \
        "--scorefunction {wildcards.scorefunction} " \
        "--alpha {wildcards.alpha} " \
        "--verbose {wildcards.verbose} " \
        "--filename {output.adjmat} " 

# This means that no benchmarking can be done. This is separate.
rule summarise_blip_only_data:
    input: "test.csv"

# This means that the graph is given but the paramters should be sampled. 
# This might be the same as summarise_blip.
rule summarise_blip_only_graph:
    input: "test.csv"

rule summarise_blip:
    input:
        # seed is needed here. Seems like fixed graphs and data should be treatet separately.
        data = config["output_dir"]+"/data/adjmat=/{adjmat}/bn=/{bn}/data=/{data}/seed={replicate}.csv", 
        adjmat_true = config["output_dir"]+"/adjmat/{adjmat}.csv",
        adjmat_est =  config["output_dir"]+"/adjmat_estimate/"\
                        "adjmat=/{adjmat}/"\
                        "bn=/{bn}/"\
                        "data=/{data}/"\
                        "algorithm=" + blip_string +
                        "seed={replicate}/" \
                        "adjmat.csv",
        time = config["output_dir"]+"/time/"\
                    "adjmat=/{adjmat}/"\
                    "bn=/{bn}/"\
                    "data=/{data}/" \ 
                    "algorithm=" + blip_string +
                    "seed={replicate}/" \
                    "time.txt",
    output:
        res = config["output_dir"]+"/result/"\
            "algorithm=" + blip_string +
            "adjmat=/{adjmat}/"\
            "bn=/{bn}/"\
            "data=/{data}/"\
            "seed={replicate}/" \
            "legend={plot_legend}/" \        
            "result.csv",
    message:
        "Summarising blip results based on the files: {input}."
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output.res} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        #" && python scripts/add_column.py --filename {output} --colname avparents       --colval {wildcards.avparents} " \
        " && python scripts/add_column.py --filename {output} --colname replicate       --colval {wildcards.replicate} " \
        " && python scripts/add_column.py --filename {output} --colname algorithm       --colval blip " \
        #" && python scripts/add_column.py --filename {output} --colname dim             --colval {wildcards.p} " \
        #" && python scripts/add_column.py --filename {output} --colname sample_size     --colval {wildcards.n} " \
        " && python scripts/add_column.py --filename {output} --colname adjmat          --colval {wildcards.adjmat} "  \       
        " && python scripts/add_column.py --filename {output} --colname bn              --colval {wildcards.bn} "  \       
        " && python scripts/add_column.py --filename {output} --colname data            --colval {wildcards.data} "  \       
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname max_time        --colval {wildcards.max_time} " \
        " && python scripts/add_column.py --filename {output} --colname scorer.method   --colval {wildcards.scorermethod} " \
        " && python scripts/add_column.py --filename {output} --colname solver.method   --colval {wildcards.solvermethod} " \
        " && python scripts/add_column.py --filename {output} --colname indeg           --colval {wildcards.indeg} " \ 
        " && python scripts/add_column.py --filename {output} --colname cores           --colval {wildcards.cores} " \
        " && python scripts/add_column.py --filename {output} --colname allocated       --colval {wildcards.allocated} " \
        " && python scripts/add_column.py --filename {output} --colname scorefunction   --colval {wildcards.scorefunction} " \
        " && python scripts/add_column.py --filename {output} --colname alpha           --colval {wildcards.alpha} " \
        " && python scripts/add_column.py --filename {output} --colname verbose         --colval {wildcards.verbose} " \
        " && python scripts/add_column.py --filename {output} --colname time            --colval `cat {input.time}` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  
rule itsearch:
    input:
        data = config["output_dir"]+"/data/n={n}/p={p}/avpar={avparents}/{replicate}.csv"
    output:
        adjmat = config["output_dir"] + "/adjmat/itsearch/"\
                    "n={n}/"\
                    "p={p}/"\
                    "avpar={avparents}/"\
                    "score_type={score_type}/"\
                    "bdecatpar_chi={bdecatpar_chi}/" \
                    "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "map={MAP}/"\
                    "plus1it={plus1it}/"\
                    "posterior={posterior}/"\
                    #"score_type={score_type}/"\
                    #"bdecatpar_chi={bdecatpar_chi}/" \
                    #"bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "{replicate}.csv",
        time = config["output_dir"] + "/time/itsearch/"\
                    "n={n}/"\
                    "p={p}/"\
                    "avpar={avparents}/"\
                    "score_type={score_type}/"\
                    "bdecatpar_chi={bdecatpar_chi}/" \
                    "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "map={MAP}/"\
                    "plus1it={plus1it}/"\
                    "posterior={posterior}/"\
                    #"score_type={score_type}/"\
                    #"bdecatpar_chi={bdecatpar_chi}/" \
                    #"bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "{replicate}.txt"

    message:
        "Executing iterative search algorithm with MAP={wildcards.MAP} on the following files: {input}"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_iterative_search.R "\
        "--filename_data {input.data} "\
        "--filename {output.adjmat} " \
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--map {wildcards.MAP} "\
        #"--avparents {wildcards.avparents} " \
        "--score_type {wildcards.score_type} " \
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        "--plus1it {wildcards.plus1it} " \
        "--posterior {wildcards.posterior} " \
        "--title itsearch"\

rule sumarise_itsearch:
    input:
        data = config["output_dir"]+"/data/n={n}/p={p}/avpar={avparents}/{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat/p={p}/avpar={avparents}/{replicate}.csv",
        adjmat_est = config["output_dir"]+"/adjmat/itsearch/"\
                    "n={n}/"\
                    "p={p}/"\
                    "avpar={avparents}/"\
                    "score_type={score_type}/"\
                    "bdecatpar_chi={bdecatpar_chi}/" \
                    "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "map={MAP}/"\
                    "plus1it={plus1it}/"\
                    "posterior={posterior}/"\
                    #"score_type={score_type}/"\
                    #"bdecatpar_chi={bdecatpar_chi}/" \
                    #"bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "{replicate}.csv",
        time = config["output_dir"]+"/time/itsearch/"\
                    "n={n}/"\
                    "p={p}/"\
                    "avpar={avparents}/"\
                    "score_type={score_type}/"\
                    "bdecatpar_chi={bdecatpar_chi}/" \
                    "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "map={MAP}/"\
                    "plus1it={plus1it}/"\
                    "posterior={posterior}/"\
                    #"score_type={score_type}/"\
                    #"bdecatpar_chi={bdecatpar_chi}/" \
                    #"bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "{replicate}.txt"
    output:
        config["output_dir"] + "/res/itsearch/" \
                    "n={n}/" \
                    "p={p}/" \
                    "avpar={avparents}/" \
                    "score_type={score_type}/" \
                    "bdecatpar_chi={bdecatpar_chi}/" \
                    "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "map={MAP}/" \
                    "plus1it={plus1it}/" \
                    "posterior={posterior}/" \
                    #"score_type={score_type}/"\
                    #"bdecatpar_chi={bdecatpar_chi}/" \
                    #"bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "legend={plot_legend}/" \
                    "{replicate}.csv"
    message:
        "Executing iterative search algorithm with MAP={wildcards.MAP} on the following files: {input}"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents     --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate     --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm     --colval itsearch "\
        " && python scripts/add_column.py --filename {output} --colname dim           --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size   --colval {wildcards.n} " \
        " && python scripts/add_column.py --filename {output} --colname plus1it       --colval {wildcards.plus1it} " \
        " && python scripts/add_column.py --filename {output} --colname moveprobs     --colval null " \
        " && python scripts/add_column.py --filename {output} --colname MAP           --colval {wildcards.MAP} " \            
        " && python scripts/add_column.py --filename {output} --colname posterior     --colval {wildcards.posterior} " \
        " && python scripts/add_column.py --filename {output} --colname iterations    --colval null " \
        " && python scripts/add_column.py --filename {output} --colname stepsave      --colval null " \
        " && python scripts/add_column.py --filename {output} --colname softlimit     --colval 9 " \ 
        " && python scripts/add_column.py --filename {output} --colname hardlimit     --colval 12 " \ 
        " && python scripts/add_column.py --filename {output} --colname alpha         --colval 0.05 " \ 
        " && python scripts/add_column.py --filename {output} --colname gamma         --colval 1  " \ 
        " && python scripts/add_column.py --filename {output} --colname startspace    --colval null " \ 
        " && python scripts/add_column.py --filename {output} --colname blacklist     --colval null " \ 
        " && python scripts/add_column.py --filename {output} --colname verbose       --colval true " \
        " && python scripts/add_column.py --filename {output} --colname chainout      --colval true " \
        " && python scripts/add_column.py --filename {output} --colname scoreout      --colval true " \
        " && python scripts/add_column.py --filename {output} --colname cpdag         --colval false " \
        " && python scripts/add_column.py --filename {output} --colname mergetype     --colval skeleton " \
        " && python scripts/add_column.py --filename {output} --colname addspace      --colval null " \
        " && python scripts/add_column.py --filename {output} --colname scoretable    --colval null " \
        " && python scripts/add_column.py --filename {output} --colname startorder    --colval null " \
        " && python scripts/add_column.py --filename {output} --colname accum         --colval false " \
        " && python scripts/add_column.py --filename {output} --colname score_type    --colval {wildcards.score_type} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi    --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname time            --colval `cat {input.time}` "  \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule ordermcmc:
    input:
        data = config["output_dir"]+"/data/n={n}/p={p}/avpar={avparents}/{replicate}.csv",
        startspace = config["output_dir"]+"/{startspace}.csv"
    output:
        adjvecs=config["output_dir"]+"/adjvecs/orderMCMC/"\
            "n={n}/" \
            "p={p}/" \
            "avpar={avparents}/"\
            "score_type={score_type}/" \
            "bdecatpar_chi={bdecatpar_chi}/" \
            "bdecatpar_edgepf={bdecatpar_edgepf}/" \
            "{replicate}/"\
            "startspace=/{startspace}.json",
        time=config["output_dir"]+"/time/orderMCMC/"\
            "n={n}/" \
            "p={p}/" \
            "avpar={avparents}/"\
            "score_type={score_type}/" \
            "bdecatpar_chi={bdecatpar_chi}/" \
            "bdecatpar_edgepf={bdecatpar_edgepf}/" \
            "{replicate}/"\
            "startspace=/{startspace}.txt"
    message:
        "Executing order mcmc algorithm with startspace on the following files: {input}."
    shell: 
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_order_mcmc.R "
        "--filename {output.adjvecs} " \
        "--filename_data {input.data} " \
        "--filename_startspace {input.startspace} " \   
        #"--score_type {wildcards.score_type} " \
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        #"--plus1it {wildcards.plus1it} " \
        #"--map {wildcards.MAP} "\
        "--output_dir {config[output_dir]} " \
        "--seed {wildcards.replicate} "

rule heatmap_from_trajectory_ordermcmc:
    input:
        adjvecs=config["output_dir"]+"/adjvecs/orderMCMC/" \
        "n={n}/" \
        "p={p}/" \
        "avpar={avparents}/"\
        "score_type={score_type}/" \
        "bdecatpar_chi={bdecatpar_chi}/" \
        "bdecatpar_edgepf={bdecatpar_edgepf}/" \
        "{replicate}/"\
        "startspace={startspace}.json"
    output:
        heatmap=config["output_dir"]+"/heatmap/orderMCMC/"\
        "n={n}/" \
        "p={p}/" \
        "avpar={avparents}/"\
        "score_type={score_type}/" \
        "bdecatpar_chi={bdecatpar_chi}/" \
        "bdecatpar_edgepf={bdecatpar_edgepf}/" \
        #"threshold={threshold}/" \
        "{replicate}/"\
        "startspace={startspace}.csv"
    shell:
        "Rscript scripts/run_estimate_heatmap_from_traj.R " \
        "--adjvectraj {input.adjvecs} " \
        "--filename {output.heatmap} " \
        "--tosymmetric 0"

rule adjmat_from_heatmap:
    input:
        heatmap=config["output_dir"]+"/heatmap/orderMCMC/" \
        "n={n}/" \
        "p={p}/" \
        "avpar={avparents}/"\
        "score_type={score_type}/" \
        "bdecatpar_chi={bdecatpar_chi}/" \
        "bdecatpar_edgepf={bdecatpar_edgepf}/" \
        "{replicate}/" \
        "startspace={startspace}.csv"
    output:
        adjmat_est=config["output_dir"]+"/adjmat/orderMCMC/"\
        "n={n}/" \
        "p={p}/" \
        "avpar={avparents}/"\
        "score_type={score_type}/" \
        "bdecatpar_chi={bdecatpar_chi}/" \
        "bdecatpar_edgepf={bdecatpar_edgepf}/" \
        "threshold={threshold}/" \
        "{replicate}/"\
        "startspace={startspace}.csv"
    shell:
        "Rscript scripts/run_threshold_heatmap.R " \
        "--heatmap {input.heatmap} " \
        "--filename {output.adjmat_est} " \
        "--threshold {wildcards.threshold}"

rule summarise_ordermcmc:
    input:
        data = config["output_dir"]+"/data/n={n}/p={p}/avpar={avparents}/{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat/p={p}/avpar={avparents}/{replicate}.csv",
        adjmat_est=config["output_dir"]+"/adjmat/orderMCMC/"\
                "n={n}/" \
                "p={p}/" \
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "threshold={threshold}/" \
                "{replicate}/"\
                "startspace=/adjmat/{startspace_method}/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "{startspace_params}/"\
                "{replicate}.csv",
        time=config["output_dir"]+"/time/orderMCMC/"\
                "n={n}/" \
                "p={p}/" \
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "{replicate}/"\
                "startspace=/adjmat/{startspace_method}/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "{startspace_params}/"\
                "{replicate}.txt"
    output:
        config["output_dir"]+"/res/orderMCMC/"\
        "n={n}/" \
        "p={p}/" \
        "avpar={avparents}/"\
        "score_type={score_type}/" \
        "bdecatpar_chi={bdecatpar_chi}/" \
        "bdecatpar_edgepf={bdecatpar_edgepf}/" \
        "threshold={threshold}/" \
        "legend={plot_legend}/" \
        "{replicate}/"\
        "startspace=/adjmat/{startspace_method}/"\
        "n={n}/"\
        "p={p}/"\
        "avpar={avparents}/"\
        "score_type={score_type}/" \
        "bdecatpar_chi={bdecatpar_chi}/" \
        "bdecatpar_edgepf={bdecatpar_edgepf}/" \
        "{startspace_params}/"\
        "{replicate}.csv"

    message:
        "Summarizing order mcmc algorithm with startspace on the following files: {input}."
    shell: 
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} " \
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval orderMCMC "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\
        " && python scripts/add_column.py --filename {output} --colname map         --colval null "\
        #" && python scripts/add_column.py --filename {output} --colname startspace_filename --colval {input.startspace}.csv"\
        " && python scripts/add_column.py --filename {output} --colname blacklist   --colval null "\
        " && python scripts/add_column.py --filename {output} --colname startorder  --colval null "\
        " && python scripts/add_column.py --filename {output} --colname scoretable  --colval null "\
        " && python scripts/add_column.py --filename {output} --colname moveprobs   --colval null "\
        " && python scripts/add_column.py --filename {output} --colname iterations  --colval null "\
        " && python scripts/add_column.py --filename {output} --colname stepwise    --colval null "\
        " && python scripts/add_column.py --filename {output} --colname alpha       --colval 0.05 "\
        " && python scripts/add_column.py --filename {output} --colname cpdag       --colval false "\   
        " && python scripts/add_column.py --filename {output} --colname gamma       --colval 1 "\
        " && python scripts/add_column.py --filename {output} --colname hardlimit   --colval 15 "\      
        " && python scripts/add_column.py --filename {output} --colname chainout    --colval true "\   
        " && python scripts/add_column.py --filename {output} --colname scoreout    --colval false "\   
        " && python scripts/add_column.py --filename {output} --colname verbose     --colval false "\
        " && python scripts/add_column.py --filename {output} --colname threshold   --colval {wildcards.threshold} "\
        #" && python scripts/add_column.py --filename {output} --colname itsearch_MAP     --colval {wildcards.MAP} "\
        #" && python scripts/add_column.py --filename {output} --colname itsearch_plus1it     --colval {wildcards.plus1it} "\
        " && python scripts/add_column.py --filename {output} --colname startspace_method     --colval {wildcards.startspace_method} "\
        " && python scripts/add_column.py --filename {output} --colname startspace_params     --colval {wildcards.startspace_params} "\
        " && python scripts/add_column.py --filename {output} --colname time        --colval `cat {input.time}` " \ 
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule run_pcalg:
    input:
        data = config["output_dir"]+"/data/n={n}/p={p}/avpar={avparents}/{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat/pcalg/" \
            "n={n}/"\
            "p={p}/"\
            "avpar={avparents}/"\
            "score_type={score_type}/" \
            "bdecatpar_chi={bdecatpar_chi}/" \
            "bdecatpar_edgepf={bdecatpar_edgepf}/" \
            "alpha={alpha}/"\
            "{replicate}.csv",
        time = config["output_dir"]+"/time/pcalg/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "alpha={alpha}/"\
                "{replicate}.txt"
    message:
        "Executing order pc algorithm with startspace on the following files: {input}."
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_pcalg.R " \
        "--filename_data {input.data} "\
        "--alpha {wildcards.alpha} "\
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--filename {output.adjmat} "

rule summarise_pcalg:
    input:
        adjmat_true=config["output_dir"]+"/adjmat/p={p}/avpar={avparents}/{replicate}.csv",
        adjmat_est=config["output_dir"]+"/adjmat/pcalg/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "alpha={alpha}/"\
                "{replicate}.csv",
        data=config["output_dir"]+"/data/n={n}/p={p}/avpar={avparents}/{replicate}.csv",
        time = config["output_dir"]+"/time/pcalg/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "alpha={alpha}/"\
                "{replicate}.txt"
    output:
        config["output_dir"]+"/res/pcalg/n={n}/" \
            "p={p}/" \
            "avpar={avparents}/" \
            "score_type={score_type}/" \
            "bdecatpar_chi={bdecatpar_chi}/" \
            "bdecatpar_edgepf={bdecatpar_edgepf}/" \
            "alpha={alpha}/"\
            "legend={plot_legend}/" \
            "{replicate}.csv"
    message:
        "Summarising pc algorithm with startspace on the following files: {input}."
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval pcalg "\
        " && python scripts/add_column.py --filename {output} --colname alpha       --colval {wildcards.alpha} "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} " \
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \    
        " && python scripts/add_column.py --filename {output} --colname fixedGaps   --colval null " \
        " && python scripts/add_column.py --filename {output} --colname fixedEdges  --colval null " \
        " && python scripts/add_column.py --filename {output} --colname NAdelete    --colval true " \
        " && python scripts/add_column.py --filename {output} --colname m.max       --colval inf " \
        " && python scripts/add_column.py --filename {output} --colname conservative --colval false " \
        " && python scripts/add_column.py --filename {output} --colname maj.rule     --colval false " \
        " && python scripts/add_column.py --filename {output} --colname solve.confl  --colval false " \
        " && python scripts/add_column.py --filename {output} --colname numCores     --colval 1 " \
        " && python scripts/add_column.py --filename {output} --colname verbose      --colval false " \
        " && python scripts/add_column.py --filename {output} --colname time          --colval `cat {input.time}` "  \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  
rule mmhc:
    input:
        data = config["output_dir"]+"/data/n={n}/p={p}/avpar={avparents}/{replicate}.csv"
    output:
        adjmat=config["output_dir"]+"/adjmat/mmhc/" \
            "n={n}/"\
            "p={p}/"\
            "avpar={avparents}/"\
            "score_type={score_type}/" \
            "bdecatpar_chi={bdecatpar_chi}/" \
            "bdecatpar_edgepf={bdecatpar_edgepf}/" \
            "alpha={alpha}/"\
            "{replicate}.csv",
        time=config["output_dir"]+"/time/mmhc/" \
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "alpha={alpha}/"\
                "{replicate}.txt"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_mmhc.R "\
        "--filename_data {input.data} "\
        "--alpha {wildcards.alpha} "\
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--filename {output.adjmat} "\

rule summarise_mmhc:
    input:
        adjmat_true = config["output_dir"]+"/adjmat/p={p}/avpar={avparents}/{replicate}.csv",
        adjmat_est=config["output_dir"]+"/adjmat/mmhc/" \
            "n={n}/" \
            "p={p}/" \
            "avpar={avparents}/"\
            "score_type={score_type}/" \
            "bdecatpar_chi={bdecatpar_chi}/" \
            "bdecatpar_edgepf={bdecatpar_edgepf}/" \
            "alpha={alpha}/"\
            "{replicate}.csv",
        time=config["output_dir"]+"/time/mmhc/" \
                "n={n}/" \
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "alpha={alpha}/"\
                "{replicate}.txt",
        data = config["output_dir"]+"/data/n={n}/p={p}/avpar={avparents}/{replicate}.csv"
    output:
        config["output_dir"]+"/res/mmhc/"\
        "n={n}/"\
        "p={p}/"\
        "avpar={avparents}/"\
        "score_type={score_type}/" \
        "bdecatpar_chi={bdecatpar_chi}/" \
        "bdecatpar_edgepf={bdecatpar_edgepf}/" \
        "alpha={alpha}/"\
        "legend={plot_legend}/" \
        "{replicate}.csv"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval mmhc "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} " \
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname alpha       --colval {wildcards.alpha} " \
        " && python scripts/add_column.py --filename {output} --colname whitelist   --colval null " \
        " && python scripts/add_column.py --filename {output} --colname debug       --colval false " \
        " && python scripts/add_column.py --filename {output} --colname maximize.args   --colval null " \
        " && python scripts/add_column.py --filename {output} --colname time          --colval `cat {input.time}` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule gobnilp:
    input:
        data = config["output_dir"]+"/range_header_data/n={n}/p={p}/avpar={avparents}/{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat/gobnilp/"\
                    "n={n}/"\
                    "p={p}/"\
                    "avpar={avparents}/"\
                    "score_type={score_type}/" \
                    "bdecatpar_chi={bdecatpar_chi}/" \
                    "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "palim={palim}/"\
                    "{replicate}.csv",
        time = config["output_dir"]+"/time/gobnilp/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "palim={palim}/"\
                "{replicate}.txt"
    singularity:
        "docker://onceltuca/gobnilp:1.6.3"
    shell: 
        #"/usr/bin/time -f \"%e\" -o {output.time} " \ 
        "touch {output.adjmat}.gobnilp.set && " \   
        "echo 'gobnilp/outputfile/adjacencymatrix = \"{output.adjmat}.bn.mat\" ' > {output.adjmat}.gobnilp.set &&" \
        "echo 'gobnilp/outputfile/scoreandtime = \"score_and_time.txt\" ' >> {output.adjmat}.gobnilp.set &&" \
        "echo 'gobnilp/scoring/palim = {wildcards.palim} ' >> {output.adjmat}.gobnilp.set && " \     
        "/myappdir/gobnilp163/bin/gobnilp -f=dat -g={output.adjmat}.gobnilp.set {input.data} " \
        " && cat {output.adjmat}.bn.mat > {output.adjmat} " \
        " && cat score_and_time.txt > {output.time} " \
        " && rm {output.adjmat}.bn.mat " \
        " && rm score_and_time.txt " \
        " && rm {output.adjmat}.gobnilp.set"


        #"Rscript scripts/run_gobnilp.R "\
        #"--filename_data {input.data} "\
        #"--output_dir {config[output_dir]} "\
        #"--seed {wildcards.replicate} "\
        #"--palim {wildcards.palim} "\
        #"--filename {output.adjmat} "\

rule summarise_gobnilp:
    input:
        data = config["output_dir"]+"/range_header_data/n={n}/p={p}/avpar={avparents}/{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat/p={p}/avpar={avparents}/{replicate}.csv",
        adjmat_est = config["output_dir"]+"/adjmat/gobnilp/"\
                     "n={n}/"\
                     "p={p}/"\
                     "avpar={avparents}/"\
                    "score_type={score_type}/" \
                    "bdecatpar_chi={bdecatpar_chi}/" \
                    "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "palim={palim}/"\
                     "{replicate}.csv",
        time = config["output_dir"]+"/time/gobnilp/n={n}/p={p}/avpar={avparents}/" \
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "palim={palim}/{replicate}.txt"     
    output:
        res = config["output_dir"]+"/res/gobnilp/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "palim={palim}/"\
                "legend={plot_legend}/" \
                "{replicate}.csv"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output.res} " \ 
        "--range_header_data 1 " \ 
        "--adjmat_header 0 " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval gobnilp "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname palim       --colval {wildcards.palim} "\
        " && python scripts/add_column.py --filename {output} --colname time        --colval `cat {input.time} | grep -Eo '[0-9]\.[0-9]*$'` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule fges: #use funtion as input to generate filename from the config file
    input:
        data = config["output_dir"]+"/data/n={n}/p={p}/avpar={avparents}/{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat/fges/"\
                    "n={n}/"\
                    "p={p}/"\
                    "avpar={avparents}/"\
                    "score_type={score_type}/" \
                    "bdecatpar_chi={bdecatpar_chi}/" \
                    "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "faithfulnessAssumed={faithfulnessAssumed}/"\
                    "{replicate}.csv",
        time = config["output_dir"]+"/time/fges/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "faithfulnessAssumed={faithfulnessAssumed}/"\
                "{replicate}.txt"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "java -jar causal-cmd-1.1.3-jar-with-dependencies.jar " \
        "--algorithm fges "\
        "--data-type discrete "\
        "--dataset {input.data} "\
        "--delimiter comma "\
        "--score bdeu-score "\
        "--json-graph "\
        "--structurePrior 1 "\
        "--prefix {output.adjmat} " \
        '&& Rscript scripts/tetrad_graph_to_adjmat.R ' \
        '--jsongraph {output.adjmat}_graph.json ' \
        '--filename {output.adjmat} ' \
        '&& ' \
        'rm {output.adjmat}_graph.json ' \
        '&& ' \
        'rm {output.adjmat}.txt'

rule summarise_fges:
    input:
        data = config["output_dir"]+"/data/n={n}/p={p}/avpar={avparents}/{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat/p={p}/avpar={avparents}/{replicate}.csv",
        adjmat_est = config["output_dir"]+"/adjmat/fges/"\
                     "n={n}/"\
                     "p={p}/"\
                     "avpar={avparents}/"\
                    "score_type={score_type}/" \
                    "bdecatpar_chi={bdecatpar_chi}/" \
                    "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "faithfulnessAssumed={faithfulnessAssumed}/"\
                     "{replicate}.csv",
        time = config["output_dir"]+"/time/fges/n={n}/p={p}/avpar={avparents}/" \
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "faithfulnessAssumed={faithfulnessAssumed}/{replicate}.txt"     
    output:
        res = config["output_dir"]+"/res/fges/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\
                "score_type={score_type}/" \
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "faithfulnessAssumed={faithfulnessAssumed}/"\
                "legend={plot_legend}/" \
                "{replicate}.csv"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output.res} " \ 
        "--range_header_data 0 " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval fges "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        #" && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        #" && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname faithfulnessAssumed       --colval {wildcards.faithfulnessAssumed} "\
        " && python scripts/add_column.py --filename {output} --colname time        --colval `cat {input.time}` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

# rule join_summaries_blip:
#     input:
#         [expand(config["output_dir"] + "/result/"\        
#         "algorithm=/blip/"\
#         "score_type=bde/" \
#         "bdecatpar_chi={bdecatpar_chi}/" 
#         "bdecatpar_edgepf={bdecatpar_edgepf}/"
#         "time={time}/" 
#         "scorer.method={scorermethod}/"
#         "solver.method={solvermethod}/"
#         "indeg={indeg}/"
#         "cores={cores}/"
#         "allocated={allocated}/"
#         "scorefunction={scorefunction}/"
#         "alpha={alpha}/"
#         "verbose={verbose}/"
#         #"seed={replicate}/"
#         "adjmat=/"
#         "{adjmat_string}/"
#         #"seed={replicate}/"
#         "bn=/"\
#         "{param_string}/"
#         #"seed={replicate}/"
#         "data=/"
#         "n={n}/"
#         "seed={replicate}/"
#         "legend={plot_legend}/" 
#         "result.csv"
#         ,
#         replicate=replicates,
#         time=config["algorithms"]["blip"]["time"],
#         scorermethod=config["algorithms"]["blip"]["scorer.method"],
#         solvermethod=config["algorithms"]["blip"]["solver.method"],                       
#         indeg=config["algorithms"]["blip"]["indeg"],
#         cores=config["algorithms"]["blip"]["cores"],
#         allocated=config["algorithms"]["blip"]["allocated"],    
#         scorefunction=config["algorithms"]["blip"]["scorefunction"],
#         alpha=config["algorithms"]["blip"]["alpha"],
#         verbose=config["algorithms"]["blip"]["verbose"],
#         n=config["data"]["sample_sizes"][i],
#         avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
#         bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
#         bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
#         plot_legend=config["algorithms"]["blip"]["plot_legend"],
#         adjmat_string=gen_adjmat_string_from_conf(config["plotting"]["graph_sampling_algorithm"], i), #seed should be put in here
#         param_string=gen_parameter_string_from_conf(config["plotting"]["parameter_sampling_algorithm"], i),
#         p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i])         
#         for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))]
#     output:
#         config["output_dir"] + "/blip.csv"
#     shell:
#         "Rscript scripts/join_csv_files.R --algorithm blip --filename {output}"
#         # add input parameters to csv here instead for better pattern mathing..? NO, since the values vary
#         # How to extract n and p? Should we just group on graph when plotting? Then both method and parameters are there.
#         # 
#         # statistical model is model + parameters = graph + parameters, 
#         # but the graph is a function of the parameters
#         # Maybe seed can be outside when we are sampling..

rule join_summaries_blip:
    input:
        "config.json",
        [[[expand(config["output_dir"] + "/result/"\        
        "algorithm=/blip/"\
        "score_type=bde/" \
        "bdecatpar_chi={bdecatpar_chi}/" 
        "bdecatpar_edgepf={bdecatpar_edgepf}/"
        "time={time}/" 
        "scorer.method={scorermethod}/"
        "solver.method={solvermethod}/"
        "indeg={indeg}/"
        "cores={cores}/"
        "allocated={allocated}/"
        "scorefunction={scorefunction}/"
        "alpha={alpha}/"
        "verbose={verbose}/" 
        #{model_string}       
        "adjmat=/"
        "{adjmat_string}/"
        "bn=/"\
        "{param_string}/"
        "data=/"
        #"method=bindatasampling/"
        "n={n}/"
        "seed={replicate}/"
        "legend={plot_legend}/" 
        "result.csv"
        ,
        replicate=seed,
        time=config["algorithms"]["blip"]["time"],
        scorermethod=config["algorithms"]["blip"]["scorer.method"],
        solvermethod=config["algorithms"]["blip"]["solver.method"],                       
        indeg=config["algorithms"]["blip"]["indeg"],
        cores=config["algorithms"]["blip"]["cores"],
        allocated=config["algorithms"]["blip"]["allocated"],    
        scorefunction=config["algorithms"]["blip"]["scorefunction"],
        alpha=config["algorithms"]["blip"]["alpha"],
        verbose=config["algorithms"]["blip"]["verbose"],
        #n=[config["data"]["sample_sizes"][i] for i in range(len(config["data"]["sample_sizes"]))],
        n=config["data"]["sample_sizes"][i], 
        #avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
        bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
        bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
        plot_legend=config["algorithms"]["blip"]["plot_legend"],
        adjmat_string=gen_adjmat_string_from_conf(config["plotting"]["models"][j]["graph"], seed, i), 
        param_string=gen_parameter_string_from_conf(config["plotting"]["models"][j]["parameters"], seed)
        #model_string=gen_model_strings_from_conf(config["plotting"]["models"], seed, i),
        #p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i]
        )         
        for seed in replicates] 
        for i in range(len(config["data"]["sample_sizes"]))]
        for j in range(len(config["plotting"]["models"]))]
    output:
        config["output_dir"] + "/blip.csv"
    shell:
        "Rscript scripts/join_csv_files.R --algorithm blip --filename {output}"

rule join_summaries_itsearch_map:
    input:
        [expand(config["output_dir"] + "/res/itsearch/"
                            "n={n}/"
                            "p={p}/"
                            "avpar={avparents}/"                        
                            "score_type=bde/" 
                            "bdecatpar_chi={bdecatpar_chi}/" 
                            "bdecatpar_edgepf={bdecatpar_edgepf}/" 
                            "map={map}/"
                            "plus1it={plus1it}/" 
                            "posterior={posterior}/" 
                            "score_type=bde/" 
                            "bdecatpar_chi={bdecatpar_chi}/" 
                            "bdecatpar_edgepf={bdecatpar_edgepf}/" 
                            "legend={plot_legend}/" \
                            "{replicate}.csv",
                            replicate=replicates,
                            n=config["data"]["sample_sizes"][i],
                            avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                            p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i],
                            map=config["algorithms"]["itsearch_map"]["optional"]["MAP"],
                            #score_type=config["algorithms"]["itsearch_map"]["score_params"]["type"],
                            bdecatpar_chi=config["algorithms"]["itsearch_map"]["score_params"]["bdecatpar"]["chi"],
                            bdecatpar_edgepf=config["algorithms"]["itsearch_map"]["score_params"]["bdecatpar"]["edgepf"],
                            plus1it=config["algorithms"]["itsearch_map"]["optional"]["plus1it"],
                            posterior=config["algorithms"]["itsearch_map"]["optional"]["posterior"],
                            plot_legend=config["algorithms"]["itsearch_map"]["plot_legend"],
                            ) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))],
    output:
        config["output_dir"] + "/itsearch_map.csv"
    shell:
        "Rscript scripts/join_csv_files.R --algorithm itsearch --filename {output}"

rule join_summaries_itsearch_sample:
    input:
        [expand(config["output_dir"] + "/res/itsearch/"
                        "n={n}/"
                        "p={p}/"
                        "avpar={avparents}/"                        
                        "score_type=bde/" 
                        "bdecatpar_chi={bdecatpar_chi}/" 
                        "bdecatpar_edgepf={bdecatpar_edgepf}/" 
                        "map={map}/"
                        "plus1it={plus1it}/" 
                        "posterior={posterior}/" 
                        "score_type=bde/" 
                        "bdecatpar_chi={bdecatpar_chi}/" 
                        "bdecatpar_edgepf={bdecatpar_edgepf}/" 
                        "legend={plot_legend}/" \
                        "{replicate}.csv",
                        replicate=replicates,
                        n=config["data"]["sample_sizes"][i],
                        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i],
                        map=config["algorithms"]["itsearch_sample"]["optional"]["MAP"],
                        #score_type=config["algorithms"]["itsearch_map"]["score_params"]["type"],
                        bdecatpar_chi=config["algorithms"]["itsearch_sample"]["score_params"]["bdecatpar"]["chi"],
                        bdecatpar_edgepf=config["algorithms"]["itsearch_sample"]["score_params"]["bdecatpar"]["edgepf"],
                        plus1it=config["algorithms"]["itsearch_sample"]["optional"]["plus1it"],
                        posterior=config["algorithms"]["itsearch_sample"]["optional"]["posterior"],
                        plot_legend=config["algorithms"]["itsearch_sample"]["plot_legend"],
                        ) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))]
    output:
        config["output_dir"] + "/itsearch_sample.csv"
    shell:
        "Rscript scripts/join_csv_files.R --algorithm itsearch --filename {output}"

rule join_summaries_order_mcmc_sample:
    input:
        [expand(
                config["output_dir"]+"/res/orderMCMC/"\
                "n={n}/" \
                "p={p}/" \
                "avpar={avparents}/"\
                "score_type=bde/"\
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "threshold={threshold}/" \
                "legend={plot_legend}/" \
                "{replicate}/"\
                "startspace=/adjmat/itsearch/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\                                    
                "score_type=bde/"\
                "bdecatpar_chi={itsearch_bdecatpar_chi}/" \
                "bdecatpar_edgepf={itsearch_bdecatpar_edgepf}/" \
                "map={itsearch_map}/"\
                "plus1it={itsearch_plus1it}/"\
                "posterior={itsearch_posterior}/"\
                #"score_type=bde/"\
                #"bdecatpar_chi={bdecatpar_chi}/" 
                #"bdecatpar_edgepf={bdecatpar_edgepf}/" 
                "{replicate}.csv",
        replicate=replicates,   
        n=config["data"]["sample_sizes"][i],
        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i],
        bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
        bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
        #map=config["ordermcmc_sample"]["optional"]["MAP"],
        itsearch_map=config["algorithms"][config["algorithms"]["ordermcmc_sample"]["startspace"]]["optional"]["MAP"],
        itsearch_bdecatpar_chi=config["algorithms"][config["algorithms"]["ordermcmc_sample"]["startspace"]]["score_params"]["bdecatpar"]["chi"],
        itsearch_bdecatpar_edgepf=config["algorithms"][config["algorithms"]["ordermcmc_sample"]["startspace"]]["score_params"]["bdecatpar"]["edgepf"],
        itsearch_plus1it=config["algorithms"][config["algorithms"]["ordermcmc_sample"]["startspace"]]["optional"]["plus1it"],
        itsearch_posterior=config["algorithms"][config["algorithms"]["ordermcmc_sample"]["startspace"]]["optional"]["posterior"],
        threshold=config["algorithms"]["ordermcmc_sample"]["threshold"],
        plot_legend=config["algorithms"]["ordermcmc_sample"]["plot_legend"],
        ) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))]
    output:
        config["output_dir"] + "/order_mcmc_sample.csv"
    shell:
        "Rscript scripts/join_csv_files.R --algorithm orderMCMC --filename {output}"

rule join_summaries_order_mcmc_map:
    input:
        [expand(
                config["output_dir"]+"/res/orderMCMC/"\
                "n={n}/" \
                "p={p}/" \
                "avpar={avparents}/"\
                "score_type=bde/"\
                "bdecatpar_chi={bdecatpar_chi}/" \
                "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                "threshold={threshold}/" \  
                "legend={plot_legend}/" \
                "{replicate}/"\
                "startspace=/adjmat/itsearch/"\
                "n={n}/"\
                "p={p}/"\
                "avpar={avparents}/"\                                    
                "score_type=bde/"\
                "bdecatpar_chi={itsearch_bdecatpar_chi}/" \
                "bdecatpar_edgepf={itsearch_bdecatpar_edgepf}/" \
                "map={itsearch_map}/"\
                "plus1it={itsearch_plus1it}/"\
                "posterior={itsearch_posterior}/"\
                #"score_type=bde/"\
                #"bdecatpar_chi={bdecatpar_chi}/" 
                #"bdecatpar_edgepf={bdecatpar_edgepf}/" 
                "{replicate}.csv",
        replicate=replicates,   
        n=config["data"]["sample_sizes"][i],
        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i],
        bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
        bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
        #map=config["ordermcmc_sample"]["optional"]["MAP"],
        itsearch_map=config["algorithms"][config["algorithms"]["ordermcmc_map"]["startspace"]]["optional"]["MAP"],
        itsearch_bdecatpar_chi=config["algorithms"][config["algorithms"]["ordermcmc_map"]["startspace"]]["score_params"]["bdecatpar"]["chi"],
        itsearch_bdecatpar_edgepf=config["algorithms"][config["algorithms"]["ordermcmc_map"]["startspace"]]["score_params"]["bdecatpar"]["edgepf"],
        itsearch_plus1it=config["algorithms"][config["algorithms"]["ordermcmc_map"]["startspace"]]["optional"]["plus1it"],
        itsearch_posterior=config["algorithms"][config["algorithms"]["ordermcmc_map"]["startspace"]]["optional"]["posterior"],
        threshold=config["algorithms"]["ordermcmc_map"]["threshold"],
        plot_legend=config["algorithms"]["ordermcmc_map"]["plot_legend"],
        ) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))]
    output:
        config["output_dir"] + "/order_mcmc_map.csv"
    shell:
        "Rscript scripts/join_csv_files.R --algorithm orderMCMC --filename {output}"

rule join_summaries_pcalg:
    input:
        [expand(config["output_dir"] + "/res/pcalg/"
                        "n={n}/"
                        "p={p}/"
                        "avpar={avparents}/"
                        "score_type=bde/"\
                        "bdecatpar_chi={bdecatpar_chi}/" \
                        "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                        "alpha={alpha}/" \
                        "legend={plot_legend}/" \
                        "{replicate}.csv",
                        replicate=replicates,
                        alpha=config["algorithms"]["pcalg"]["alpha"],
                        n=config["data"]["sample_sizes"][i],
                        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                        bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                         bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
                         plot_legend=config["algorithms"]["pcalg"]["plot_legend"],
                        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i]) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))],
    output:
        config["output_dir"] + "/pcalg.csv"
    shell:
        "Rscript scripts/join_csv_files.R --algorithm pcalg --filename {output}"

rule join_summaries_mmhc:
    input:
        "config.json",
        [expand(config["output_dir"] + "/res/mmhc/"
                        "n={n}/"
                        "p={p}/"
                        "avpar={avparents}/"
                        "score_type=bde/"\
                        "bdecatpar_chi={bdecatpar_chi}/" \
                        "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                        "alpha={alpha}/"
                        "legend={plot_legend}/" \
                        "{replicate}.csv",\
                        replicate=replicates,
                        alpha=config["algorithms"]["mmhc"]["restrict.args"]["alpha"],
                        n=config["data"]["sample_sizes"][i],
                        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                        bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                        bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
                        plot_legend=config["algorithms"]["mmhc"]["plot_legend"],
                        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i]) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))]
    output:
        config["output_dir"] + "/mmhc.csv"
    shell:
        "Rscript scripts/join_csv_files.R --algorithm mmhc --filename {output}"

rule join_summaries_gobnilp:
    input:
        [expand(config["output_dir"] + "/res/gobnilp/"
                    "n={n}/"
                    "p={p}/"
                    "avpar={avparents}/"
                    "score_type=bde/"\
                    "bdecatpar_chi={bdecatpar_chi}/" \
                    "bdecatpar_edgepf={bdecatpar_edgepf}/" \
                    "palim={palim}/" \
                    "legend={plot_legend}/" \
                    "{replicate}.csv",
                         replicate=replicates,
                         n=config["data"]["sample_sizes"][i],
                         avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                         palim=config["algorithms"]["gobnilp"]["palim"],
                         bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                         bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],                         
                         plot_legend=config["algorithms"]["gobnilp"]["plot_legend"],
                         p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i]) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))]
    output:
        config["output_dir"] + "/gobnilp.csv"
    shell:
        "Rscript scripts/join_csv_files.R --algorithm gobnilp --filename {output}"

rule join_summaries_fges:
    input:
        [expand(config["output_dir"] + "/res/fges/"
            "n={n}/"
            "p={p}/"
            "avpar={avparents}/"
            "score_type=bde/"\
            "bdecatpar_chi={bdecatpar_chi}/" \
            "bdecatpar_edgepf={bdecatpar_edgepf}/" \
            "faithfulnessAssumed={faithfulnessAssumed}/" \
            "legend={plot_legend}/" \
            "{replicate}.csv",
                    replicate=replicates,
                    n=config["data"]["sample_sizes"][i],
                    avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                    faithfulnessAssumed=config["algorithms"]["fges"]["faithfulnessAssumed"],
                    bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                    bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],                         
                    plot_legend=config["algorithms"]["fges"]["plot_legend"],
                    p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i]) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))]
    output:
        config["output_dir"] + "/fges.csv"
    shell:
        "Rscript scripts/join_csv_files.R --algorithm fges --filename {output}"

rule roc:
    input:
        active_algorithm_files,
        "config.json"
    output:
        config["output_dir"] + "/ROC.eps", \
        config["output_dir"] + "/ROC_data.csv" 
    shell:
        "Rscript scripts/combine_ROC_data.R && "\
        "Rscript scripts/plot_ROC.R"

