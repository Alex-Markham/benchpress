
output_dir = "simresults"
replicates = [1, 2, 3]
itsearch_map = [0, 1]
blip_times = [30]
# dims = [[20], [80], [140], [200]]
# sample_sizes = [[40, 200],
#                 [160, 800],
#                 [280, 1400],
#                 [400, 2000]]
dims = [[5], [10]]
sample_sizes = [[10, 50],
                [20, 100]]
singularity:
    "docker://onceltuca/graphical_model_benchmark:mytag"

rule sample_dag:
    output:
        "{output_dir}/dag_p_{p}_{replicate}.rds"
    shell:
        "Rscript scripts/sample_dags.R --filename {output} --nodes {wildcards.p} --parents 2 --seed {wildcards.replicate}"

rule sample_bn:
    input:
        "{output_dir}/dag_p_{p}_{replicate}.rds"
    output:
        bn = "{output_dir}/bn_p_{p}_{replicate}.rds"
    shell:
        "Rscript scripts/sample_bayesian_network_for_dag.R "
        "--filename_dag {input} "
        "--filename {output} --seed {wildcards.replicate} "

rule sample_data:
    input:
        "{output_dir}/bn_p_{p}_{replicate}.rds"
    output:
        "{output_dir}/data_n_{n}_p_{p}_{replicate}.csv"
    shell:
        "Rscript scripts/sample_data.R --filename {output} --filename_bn {input} --samples {wildcards.n} --seed {wildcards.replicate}"

rule sample_data_range_header:
    input:
        "{output_dir}/bn_p_{p}_{replicate}.rds"
    output:
        "{output_dir}/range_header_data_n_{n}_p_{p}_{replicate}.csv"
    shell:
        "Rscript scripts/sample_data_with_range_header.R --filename {output} --filename_bn {input} --samples {wildcards.n} --seed {wildcards.replicate}"

rule sim_blip:
    input:
        dag = "simresults/dag_p_{p}_{replicate}.rds",
        data = "simresults/data_n_{n}_p_{p}_{replicate}.csv"
    output:
        "simresults/res_blip_n_{n}_p_{p}_time_{blip_time}_{replicate}.csv"
        # "simresults/{input.dag}_{input.data}_res_blip_time_{blip_time}_{replicate}.csv"
    message:
        "Executing blip algorithm on the following files: {input}."
    shell:
        "Rscript scripts/run_blip.R --filename_data {input.data} "
        "--filename_dag {input.dag} "
        "--output_dir {output_dir} "
        "--replicate {wildcards.replicate} "
        "--max_time {wildcards.blip_time} "
        "--title blip "
        # " > {output}"

rule itsearch_sample:
    input:
        dag = "simresults/dag_p_{p}_{replicate}.rds",
        data = "simresults/data_n_{n}_p_{p}_{replicate}.csv"
    output:
        "simresults/res_itsearch_sample_n_{n}_p_{p}_map_0_{replicate}.csv",
        "simresults/endspace_itsearch_sample_n_{n}_p_{p}_map_0_{replicate}.rds"
    message:
        "Executing iterative search algorithm with MAP=FALSE on the following files: {input}"
    shell:
        "Rscript scripts/run_iterative_search.R "
        "--filename_data {input.data} "
        "--filename_dag {input.dag} "
        "--output_dir {output_dir} "
        "--replicate {wildcards.replicate} "
        "--seed {wildcards.replicate} "
        "--map 0 "
        "--title itsearch_sample"

rule itsearch_map:
    input:
        dag = "simresults/dag_p_{p}_{replicate}.rds",
        data = "simresults/data_n_{n}_p_{p}_{replicate}.csv"
    output:
        "simresults/res_itsearch_map_n_{n}_p_{p}_map_1_{replicate}.csv",
        "simresults/endspace_itsearch_map_n_{n}_p_{p}_map_1_{replicate}.rds"
    message:
        "Executing iterative search algorithm with MAP=TRUE on the following files: {input}"
    shell:
        "Rscript scripts/run_iterative_search.R "
        "--filename_data {input.data} "
        "--filename_dag {input.dag} "
        "--output_dir {output_dir} "
        "--replicate {wildcards.replicate} "
        "--seed {wildcards.replicate} "
        "--map 1 "
        "--title itsearch_map"

rule ordermcmc_itsearch_sample:
    input:
        dag = "simresults/dag_p_{p}_{replicate}.rds",
        data = "simresults/data_n_{n}_p_{p}_{replicate}.csv",
        startspace = "simresults/endspace_itsearch_sample_n_{n}_p_{p}_map_0_{replicate}.rds"
        # Fixa ordermcmc, ska kunna köras med olika startspace, inte bara från itsearch.
        # kanske bara att lägga till filename på startspace
    output:
        "simresults/res_orderMCMC_sample_n_{n}_p_{p}_{replicate}_startspace_endspace_itsearch_sample_n_{n}_p_{p}_map_0_{replicate}.csv",
    message:
        "Executing order mcmc algorithm with startspace on the following files: {input}."
    shell:  # First check if results are in the database eg.
        "Rscript scripts/run_order_mcmc.R "
        "--filename_data {input.data} "
        "--filename_dag {input.dag} "
        "--filename_startspace {input.startspace} "
        "--output_dir {output_dir} "
        "--replicate {wildcards.replicate} "
        "--seed {wildcards.replicate} "
        "--title orderMCMC_sample"
        # Here we could save to database


rule ordermcmc_itsearch_map:
    input:
        dag = "simresults/dag_p_{p}_{replicate}.rds",
        data = "simresults/data_n_{n}_p_{p}_{replicate}.csv",
        startspace = "simresults/endspace_itsearch_map_n_{n}_p_{p}_map_1_{replicate}.rds"
        # Fixa ordermcmc, ska kunna köras med olika startspace, inte bara från itsearch.
        # kanske bara att lägga till filename på startspace
    output:
        "simresults/res_orderMCMC_map_n_{n}_p_{p}_{replicate}_startspace_endspace_itsearch_map_n_{n}_p_{p}_map_1_{replicate}.csv",
    message:
        "Executing order mcmc algorithm on the following files: {input}."
    shell:  # First check if results are in the database eg.
        "Rscript scripts/run_order_mcmc.R "
        "--filename_data {input.data} "
        "--filename_dag {input.dag} "
        "--filename_startspace {input.startspace} "
        "--output_dir {output_dir} "
        "--replicate {wildcards.replicate} "
        "--seed {wildcards.replicate} "
        "--title orderMCMC_map"
        # Here we could save to database

rule pcalg:
    input:
        dag = "simresults/dag_p_{p}_{replicate}.rds",
        data = "simresults/data_n_{n}_p_{p}_{replicate}.csv"
    output:
        "{output_dir}/res_pcalg_n_{n}_p_{p}_alpha_{alpha}_{replicate}.csv"
    shell:
        "Rscript scripts/run_pcalg.R "
        "--filename_data {input.data} "
        "--filename_dag {input.dag} "
        "--alpha {wildcards.alpha} "
        "--output_dir {output_dir} "
        "--replicate {wildcards.replicate} "
        "--title pcalg"

rule mmhc:
    input:
        dag = "simresults/dag_p_{p}_{replicate}.rds",
        data = "simresults/data_n_{n}_p_{p}_{replicate}.csv"
    output:
        "{output_dir}/res_mmhc_n_{n}_p_{p}_alpha_{alpha}_{replicate}.csv"
    shell:
        "Rscript scripts/run_mmhc.R "
        "--filename_data {input.data} "
        "--filename_dag {input.dag} "
        "--alpha {wildcards.alpha} "
        "--output_dir {output_dir} "
        "--replicate {wildcards.replicate} "
        "--title mmhc"

rule gobnilp:
    input:
        dag = "simresults/dag_p_{p}_{replicate}.rds",
        data = "simresults/range_header_data_n_{n}_p_{p}_{replicate}.csv"
    output:
        "{output_dir}/res_gobnilp_n_{n}_p_{p}_{replicate}.csv"
    shell:
        "Rscript scripts/run_gobnilp.R "
        "--filename_data {input.data} "
        "--filename_dag {input.dag} "
        "--output_dir {output_dir} "
        "--replicate {wildcards.replicate} "
        "--title gobnilp"

# How to label the runs of interest?
# It seems weird that the input is the results filenames
# since this means that the labels must be in the filenames.
rule plot:
    input:
        blip = [expand(output_dir + "/res_blip_n_{n}_p_{p}_time_{blip_time}_{replicate}.csv",
                       replicate=replicates,
                       blip_time=blip_times,
                       n=sample_sizes[i],
                       p=dims[i]) for i in range(len(dims))],
        itsearch_map = [expand(output_dir + "/res_itsearch_map_n_{n}_p_{p}_map_1_{replicate}.csv",
                               replicate=replicates,
                               n=sample_sizes[i],
                               p=dims[i]) for i in range(len(dims))],
        itsearch_sample = [expand(output_dir + "/res_itsearch_sample_n_{n}_p_{p}_map_0_{replicate}.csv",
                                  replicate=replicates,
                                  n=sample_sizes[i],
                                  p=dims[i]) for i in range(len(dims))],
        order_mcmc_sample = [expand(output_dir + "/res_orderMCMC_sample_n_{n}_p_{p}_{replicate}_startspace_endspace_itsearch_sample_n_{n}_p_{p}_map_0_{replicate}.csv",
                                    replicate=replicates,
                                    n=sample_sizes[i],
                                    p=dims[i]) for i in range(len(dims))],
        order_mcmc_map = [expand(output_dir + "/res_orderMCMC_map_n_{n}_p_{p}_{replicate}_startspace_endspace_itsearch_map_n_{n}_p_{p}_map_1_{replicate}.csv",
                                 replicate=replicates,
                                 n=sample_sizes[i],
                                 p=dims[i]) for i in range(len(dims))],
        pcalg = [expand(output_dir + "/res_pcalg_n_{n}_p_{p}_alpha_{alpha}_{replicate}.csv",
                        replicate=replicates,
                        alpha=[0.01, 0.05, 0.1, 0.2, 0.35, 0.45],
                        n=sample_sizes[i],
                        p=dims[i]) for i in range(len(dims))],
        mmhc = [expand(output_dir + "/res_mmhc_n_{n}_p_{p}_alpha_{alpha}_{replicate}.csv",
                       replicate=replicates,
                       alpha=[0.01, 0.05, 0.1, 0.2, 0.35, 0.45],
                       n=sample_sizes[i],
                       p=dims[i]) for i in range(len(dims))],
        gobnilp = [expand(output_dir + "/res_gobnilp_n_{n}_p_{p}_{replicate}.csv",
                          replicate=replicates,
                          n=sample_sizes[i],
                          p=dims[i]) for i in range(len(dims))]
    output:
        "{output_dir}/ROC.eps"
    notebook:
        "plot.ipynb"
    # shell:
    #     "Rscript scripts/plot_results.R "
    #     "--directory simresults "
    #     "--res_files_blip {input.blip} "
    #     #"--res_files_itsearch_map {input.itsearch_map} "
    #     #"--res_files_itsearch_sample {input.itsearch_sample} "
    #     #"--res_files_order_mcmc_sample {input.order_mcmc_sample} "
    #     #"--res_files_order_mcmc_map {input.order_mcmc_map} "
    #     "--res_files_pcalg {input.pcalg} "
    #     # Maybe I can maniputate or add the titles here, prior to plotting.
    #     # This sems to be the way to go, also for other parameters.
    #     # but then these files would be overwritten by other simulations.
    #     # Maybe they can be stored in a database.

# Maybe there could be just one rule for each type of run
