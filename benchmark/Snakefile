configfile: 
    "config.json"

replicates = range(int(config["data"]["replicates"]["start"]), 
                    int(config["data"]["replicates"]["end"]+1))

# TODO: All filenames should be generated from the config file.

singularity:
    "docker://onceltuca/benchmark:1.0.7"

rule sample_dag:
    output:
        adjmat = "{output_dir}/adjmat/p_{p}/avpar_{avparents}/{replicate}.csv"
    shell:
        "Rscript scripts/sample_dags.R " \
        "--filename {output.adjmat} " \ 
        "--nodes {wildcards.p} " \
        "--parents {wildcards.avparents} " \
        "--seed {wildcards.replicate}"

rule sample_bn:
    input:
        adjmat = "{output_dir}/adjmat/p_{p}/avpar_{avparents}/{replicate}.csv"
    output:
        bn = "{output_dir}/bn/p_{p}/avpar_{avparents}/{replicate}.rds"
    shell:
        "Rscript scripts/sample_bayesian_network_for_dag.R " \
        "--filename_dag {input.adjmat} " \
        "--filename {output} "  \
        "--seed {wildcards.replicate} "

rule sample_data:
    input:
        bn="{output_dir}/bn/p_{p}/avpar_{avparents}/{replicate}.rds"
    output:
        data="{output_dir}/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv"
    shell:
        "Rscript scripts/sample_data.R " \
        "--filename {output.data} " \
        "--filename_bn {input.bn} " \
        "--samples {wildcards.n} " \
        "--seed {wildcards.replicate}"

rule sample_data_range_header:
    input:
        "{output_dir}/bn/p_{p}/avpar_{avparents}/{replicate}.rds"
    output:
        "{output_dir}/range_header_data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv"
    shell:
        "Rscript scripts/sample_data_with_range_header.R " 
        "--filename {output} "
        "--filename_bn {input} "
        "--samples {wildcards.n} "
        "--seed {wildcards.replicate} "

rule run_blip:
    input:
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat/blip/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/" \
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "time_{max_time}/" \
                "scorer.method_{scorermethod}/" \
                "solver.method_{solvermethod}/" \
                "indeg_{indeg}/" \        
                "cores_{cores}/" \
                "allocated_{allocated}/" \
                "scorefunction_{scorefunction}/" \
                "alpha_{alpha}/" \
                "verbose_{verbose}/" \
                "{replicate}.csv",
        time = config["output_dir"]+"/time/blip/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/" \
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "time_{max_time}/" \
                "scorer.method_{scorermethod}/" \
                "solver.method_{solvermethod}/" \
                "indeg_{indeg}/" \
                "cores_{cores}/" \
                "allocated_{allocated}/" \
                "scorefunction_{scorefunction}/" \
                "alpha_{alpha}/" \
                "verbose_{verbose}/" \
                "{replicate}.txt"
    message:
        "Executing blip algorithm on the following files: {input}."
    #singularity:
    #    "docker://onceltuca/rblip"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_blip.R " \
        "--filename_data {input.data} " \
        "--output_dir config[output_dir] " \
        "--time {wildcards.max_time} " \
        "--scorer.method {wildcards.scorermethod} " \
        "--solver.method {wildcards.solvermethod} " \
        "--indeg {wildcards.indeg} " \  
        "--cores {wildcards.cores} " \
        "--allocated {wildcards.allocated} " \
        "--scorefunction {wildcards.scorefunction} " \
        "--alpha {wildcards.alpha} " \
        "--verbose {wildcards.verbose} " \
        "--filename {output.adjmat} " 

rule summarise_blip:
    input:
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_est =  config["output_dir"]+"/adjmat/blip/" \
                        "n_{n}/" \
                        "p_{p}/" \
                        "avpar_{avparents}/" \
                        "score_type_{score_type}/" \
                        "bdecatpar_chi_{bdecatpar_chi}/" \
                        "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                        "time_{max_time}/" \
                        "scorer.method_{scorermethod}/" \
                        "solver.method_{solvermethod}/" \                        
                        "indeg_{indeg}/" \
                        "cores_{cores}/" \
                        "allocated_{allocated}/" \
                        "scorefunction_{scorefunction}/" \
                        "alpha_{alpha}/" \
                        "verbose_{verbose}/" \
                        "{replicate}.csv",
        time = config["output_dir"]+"/time/blip/" \
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/" \
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "time_{max_time}/" \
                "scorer.method_{scorermethod}/" \
                "solver.method_{solvermethod}/" \
                "indeg_{indeg}/" \
                "cores_{cores}/" \
                "allocated_{allocated}/" \
                "scorefunction_{scorefunction}/" \
                "alpha_{alpha}/" \
                "verbose_{verbose}/" \
                "{replicate}.txt",

    output:
        res = config["output_dir"]+"/res/blip/" \
        "n_{n}/"\
        "p_{p}/"\
        "avpar_{avparents}/" \
        "score_type_{score_type}/" \
        "bdecatpar_chi_{bdecatpar_chi}/" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
        "time_{max_time}/" \
        "scorer.method_{scorermethod}/" \
        "solver.method_{solvermethod}/" \
        "indeg_{indeg}/" \
        "cores_{cores}/" \
        "allocated_{allocated}/" \
        "scorefunction_{scorefunction}/" \
        "alpha_{alpha}/" \
        "verbose_{verbose}/" \
        "legend_{plot_legend}/" \
        "{replicate}.csv",

    message:
        "Summarising blip results from the following files: {input}."
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output.res} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents       --colval {wildcards.avparents} " \
        " && python scripts/add_column.py --filename {output} --colname replicate       --colval {wildcards.replicate} " \
        " && python scripts/add_column.py --filename {output} --colname algorithm       --colval blip " \
        " && python scripts/add_column.py --filename {output} --colname dim             --colval {wildcards.p} " \
        " && python scripts/add_column.py --filename {output} --colname sample_size     --colval {wildcards.n} " \        
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname max_time        --colval {wildcards.max_time} " \
        " && python scripts/add_column.py --filename {output} --colname scorer.method   --colval {wildcards.scorermethod} " \
        " && python scripts/add_column.py --filename {output} --colname solver.method   --colval {wildcards.solvermethod} " \
        " && python scripts/add_column.py --filename {output} --colname indeg           --colval {wildcards.indeg} " \ 
        " && python scripts/add_column.py --filename {output} --colname cores           --colval {wildcards.cores} " \
        " && python scripts/add_column.py --filename {output} --colname allocated       --colval {wildcards.allocated} " \
        " && python scripts/add_column.py --filename {output} --colname scorefunction   --colval {wildcards.scorefunction} " \
        " && python scripts/add_column.py --filename {output} --colname alpha           --colval {wildcards.alpha} " \
        " && python scripts/add_column.py --filename {output} --colname verbose         --colval {wildcards.verbose} " \
        " && python scripts/add_column.py --filename {output} --colname time            --colval `cat {input.time}` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  
rule itsearch:
    input:
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv"
    output:
        adjmat = config["output_dir"] + "/adjmat/itsearch/"\
                    "n_{n}/"\
                    "p_{p}/"\
                    "avpar_{avparents}/"\
                    "score_type_{score_type}/"\
                    "bdecatpar_chi_{bdecatpar_chi}/" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "map_{MAP}/"\
                    "plus1it_{plus1it}/"\
                    "posterior_{posterior}/"\
                    #"score_type_{score_type}/"\
                    #"bdecatpar_chi_{bdecatpar_chi}/" \
                    #"bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "{replicate}.csv",
        time = config["output_dir"] + "/time/itsearch/"\
                    "n_{n}/"\
                    "p_{p}/"\
                    "avpar_{avparents}/"\
                    "score_type_{score_type}/"\
                    "bdecatpar_chi_{bdecatpar_chi}/" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "map_{MAP}/"\
                    "plus1it_{plus1it}/"\
                    "posterior_{posterior}/"\
                    #"score_type_{score_type}/"\
                    #"bdecatpar_chi_{bdecatpar_chi}/" \
                    #"bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "{replicate}.txt"

    message:
        "Executing iterative search algorithm with MAP={wildcards.MAP} on the following files: {input}"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_iterative_search.R "\
        "--filename_data {input.data} "\
        "--filename {output.adjmat} " \
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--map {wildcards.MAP} "\
        #"--avparents {wildcards.avparents} " \
        "--score_type {wildcards.score_type} " \
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        "--plus1it {wildcards.plus1it} " \
        "--posterior {wildcards.posterior} " \
        "--title itsearch"\

rule sumarise_itsearch:
    input:
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_est = config["output_dir"]+"/adjmat/itsearch/"\
                    "n_{n}/"\
                    "p_{p}/"\
                    "avpar_{avparents}/"\
                    "score_type_{score_type}/"\
                    "bdecatpar_chi_{bdecatpar_chi}/" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "map_{MAP}/"\
                    "plus1it_{plus1it}/"\
                    "posterior_{posterior}/"\
                    #"score_type_{score_type}/"\
                    #"bdecatpar_chi_{bdecatpar_chi}/" \
                    #"bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "{replicate}.csv",
        time = config["output_dir"]+"/time/itsearch/"\
                    "n_{n}/"\
                    "p_{p}/"\
                    "avpar_{avparents}/"\
                    "score_type_{score_type}/"\
                    "bdecatpar_chi_{bdecatpar_chi}/" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "map_{MAP}/"\
                    "plus1it_{plus1it}/"\
                    "posterior_{posterior}/"\
                    #"score_type_{score_type}/"\
                    #"bdecatpar_chi_{bdecatpar_chi}/" \
                    #"bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "{replicate}.txt"
    output:
        config["output_dir"] + "/res/itsearch/" \
                    "n_{n}/" \
                    "p_{p}/" \
                    "avpar_{avparents}/" \
                    "score_type_{score_type}/" \
                    "bdecatpar_chi_{bdecatpar_chi}/" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "map_{MAP}/" \
                    "plus1it_{plus1it}/" \
                    "posterior_{posterior}/" \
                    #"score_type_{score_type}/"\
                    #"bdecatpar_chi_{bdecatpar_chi}/" \
                    #"bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "legend_{plot_legend}/" \
                    "{replicate}.csv"
    message:
        "Executing iterative search algorithm with MAP={wildcards.MAP} on the following files: {input}"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents     --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate     --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm     --colval itsearch "\
        " && python scripts/add_column.py --filename {output} --colname dim           --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size   --colval {wildcards.n} " \
        " && python scripts/add_column.py --filename {output} --colname plus1it       --colval {wildcards.plus1it} " \
        " && python scripts/add_column.py --filename {output} --colname moveprobs     --colval null " \
        " && python scripts/add_column.py --filename {output} --colname MAP           --colval {wildcards.MAP} " \            
        " && python scripts/add_column.py --filename {output} --colname posterior     --colval {wildcards.posterior} " \
        " && python scripts/add_column.py --filename {output} --colname iterations    --colval null " \
        " && python scripts/add_column.py --filename {output} --colname stepsave      --colval null " \
        " && python scripts/add_column.py --filename {output} --colname softlimit     --colval 9 " \ 
        " && python scripts/add_column.py --filename {output} --colname hardlimit     --colval 12 " \ 
        " && python scripts/add_column.py --filename {output} --colname alpha         --colval 0.05 " \ 
        " && python scripts/add_column.py --filename {output} --colname gamma         --colval 1  " \ 
        " && python scripts/add_column.py --filename {output} --colname startspace    --colval null " \ 
        " && python scripts/add_column.py --filename {output} --colname blacklist     --colval null " \ 
        " && python scripts/add_column.py --filename {output} --colname verbose       --colval true " \
        " && python scripts/add_column.py --filename {output} --colname chainout      --colval true " \
        " && python scripts/add_column.py --filename {output} --colname scoreout      --colval true " \
        " && python scripts/add_column.py --filename {output} --colname cpdag         --colval false " \
        " && python scripts/add_column.py --filename {output} --colname mergetype     --colval skeleton " \
        " && python scripts/add_column.py --filename {output} --colname addspace      --colval null " \
        " && python scripts/add_column.py --filename {output} --colname scoretable    --colval null " \
        " && python scripts/add_column.py --filename {output} --colname startorder    --colval null " \
        " && python scripts/add_column.py --filename {output} --colname accum         --colval false " \
        " && python scripts/add_column.py --filename {output} --colname score_type    --colval {wildcards.score_type} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi    --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname time            --colval `cat {input.time}` "  \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule ordermcmc:
    input:
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv",
        startspace = config["output_dir"]+"/{startspace}.csv"
    output:
        adjvecs=config["output_dir"]+"/adjvecs/orderMCMC/"\
            "n_{n}/" \
            "p_{p}/" \
            "avpar_{avparents}/"\
            "score_type_{score_type}/" \
            "bdecatpar_chi_{bdecatpar_chi}/" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
            "{replicate}/"\
            "startspace_/{startspace}.json",
        time=config["output_dir"]+"/time/orderMCMC/"\
            "n_{n}/" \
            "p_{p}/" \
            "avpar_{avparents}/"\
            "score_type_{score_type}/" \
            "bdecatpar_chi_{bdecatpar_chi}/" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
            "{replicate}/"\
            "startspace_/{startspace}.txt"
    message:
        "Executing order mcmc algorithm with startspace on the following files: {input}."
    shell: 
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_order_mcmc.R "
        "--filename {output.adjvecs} " \
        "--filename_data {input.data} " \
        "--filename_startspace {input.startspace} " \   
        #"--score_type {wildcards.score_type} " \
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        #"--plus1it {wildcards.plus1it} " \
        #"--map {wildcards.MAP} "\
        "--output_dir {config[output_dir]} " \
        "--seed {wildcards.replicate} "

rule adjmat_from_trajectory_ordermcmc:
    input:
        adjvecs=config["output_dir"]+"/adjvecs/orderMCMC/" \
        "n_{n}/" \
        "p_{p}/" \
        "avpar_{avparents}/"\
        "score_type_{score_type}/" \
        "bdecatpar_chi_{bdecatpar_chi}/" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
        "{replicate}/"\
        "startspace_{startspace}.json"
    output:
        adjmat_est=config["output_dir"]+"/adjmat/orderMCMC/"\
        "n_{n}/" \
        "p_{p}/" \
        "avpar_{avparents}/"\
        "score_type_{score_type}/" \
        "bdecatpar_chi_{bdecatpar_chi}/" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
        "threshold_{threshold}/" \
        "{replicate}/"\
        "startspace_{startspace}.csv"
#        "startspace_adjmat_{startspace_method}/"\
#        "n_{n}/"\
#        "p_{p}/"\
#        "avpar_{avparents}/"\
#        "score_type_{score_type}/" \
#        "bdecatpar_chi_{bdecatpar_chi}/" \
#        "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
#        "{startspace_params}/"\
#        "{replicate}.csv"
    shell:
        "Rscript scripts/run_estimate_from_graph_traj.R " \
        "--adjvectraj {input.adjvecs} " \
        "--filename {output.adjmat_est} " \
        "--threshold {wildcards.threshold}"

rule summarise_ordermcmc:
    input:
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_est=config["output_dir"]+"/adjmat/orderMCMC/"\
                "n_{n}/" \
                "p_{p}/" \
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "threshold_{threshold}/" \
                "{replicate}/"\
                "startspace_/adjmat/{startspace_method}/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "{startspace_params}/"\
                "{replicate}.csv",
#               "startspace_{startspace}.csv",
        time=config["output_dir"]+"/time/orderMCMC/"\
                "n_{n}/" \
                "p_{p}/" \
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "{replicate}/"\
                "startspace_/adjmat/{startspace_method}/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "{startspace_params}/"\
                "{replicate}.txt"
    output:
        config["output_dir"]+"/res/orderMCMC/"\
        "n_{n}/" \
        "p_{p}/" \
        "avpar_{avparents}/"\
        "score_type_{score_type}/" \
        "bdecatpar_chi_{bdecatpar_chi}/" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
        "threshold_{threshold}/" \
        "legend_{plot_legend}/" \
        "{replicate}/"\
        "startspace_/adjmat/{startspace_method}/"\
        "n_{n}/"\
        "p_{p}/"\
        "avpar_{avparents}/"\
        "score_type_{score_type}/" \
        "bdecatpar_chi_{bdecatpar_chi}/" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
        "{startspace_params}/"\
        "{replicate}.csv"

    message:
        "Executing order mcmc algorithm with startspace on the following files: {input}."
    shell: 
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} " \
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval orderMCMC "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\
        " && python scripts/add_column.py --filename {output} --colname map         --colval null "\
        #" && python scripts/add_column.py --filename {output} --colname startspace_filename --colval {input.startspace}.csv"\
        " && python scripts/add_column.py --filename {output} --colname blacklist   --colval null "\
        " && python scripts/add_column.py --filename {output} --colname startorder  --colval null "\
        " && python scripts/add_column.py --filename {output} --colname scoretable  --colval null "\
        " && python scripts/add_column.py --filename {output} --colname moveprobs   --colval null "\
        " && python scripts/add_column.py --filename {output} --colname iterations  --colval null "\
        " && python scripts/add_column.py --filename {output} --colname stepwise    --colval null "\
        " && python scripts/add_column.py --filename {output} --colname alpha       --colval 0.05 "\
        " && python scripts/add_column.py --filename {output} --colname cpdag       --colval false "\   
        " && python scripts/add_column.py --filename {output} --colname gamma       --colval 1 "\
        " && python scripts/add_column.py --filename {output} --colname hardlimit   --colval 15 "\      
        " && python scripts/add_column.py --filename {output} --colname chainout    --colval true "\   
        " && python scripts/add_column.py --filename {output} --colname scoreout    --colval false "\   
        " && python scripts/add_column.py --filename {output} --colname verbose     --colval false "\
        " && python scripts/add_column.py --filename {output} --colname threshold   --colval {wildcards.threshold} "\
        #" && python scripts/add_column.py --filename {output} --colname itsearch_MAP     --colval {wildcards.MAP} "\
        #" && python scripts/add_column.py --filename {output} --colname itsearch_plus1it     --colval {wildcards.plus1it} "\
        " && python scripts/add_column.py --filename {output} --colname startspace_method     --colval {wildcards.startspace_method} "\
        " && python scripts/add_column.py --filename {output} --colname startspace_params     --colval {wildcards.startspace_params} "\
        " && python scripts/add_column.py --filename {output} --colname time        --colval `cat {input.time}` " \ 
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule run_pcalg:
    input:
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat/pcalg/" \
            "n_{n}/"\
            "p_{p}/"\
            "avpar_{avparents}/"\
            "score_type_{score_type}/" \
            "bdecatpar_chi_{bdecatpar_chi}/" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
            "alpha_{alpha}/"\
            "{replicate}.csv",
        time = config["output_dir"]+"/time/pcalg/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "alpha_{alpha}/"\
                "{replicate}.txt"
    message:
        "Executing order pc algorithm with startspace on the following files: {input}."
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_pcalg.R " \
        "--filename_data {input.data} "\
        "--alpha {wildcards.alpha} "\
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--filename {output.adjmat} "

rule summarise_pcalg:
    input:
        adjmat_true=config["output_dir"]+"/adjmat/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_est=config["output_dir"]+"/adjmat/pcalg/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "alpha_{alpha}/"\
                "{replicate}.csv",
        data=config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv",
        time = config["output_dir"]+"/time/pcalg/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "alpha_{alpha}/"\
                "{replicate}.txt"
    output:
        config["output_dir"]+"/res/pcalg/n_{n}/" \
            "p_{p}/" \
            "avpar_{avparents}/" \
            "score_type_{score_type}/" \
            "bdecatpar_chi_{bdecatpar_chi}/" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
            "alpha_{alpha}/"\
            "legend_{plot_legend}/" \
            "{replicate}.csv"
    message:
        "Summarising pc algorithm with startspace on the following files: {input}."
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval pcalg "\
        " && python scripts/add_column.py --filename {output} --colname alpha       --colval {wildcards.alpha} "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} " \
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \    
        " && python scripts/add_column.py --filename {output} --colname fixedGaps   --colval null " \
        " && python scripts/add_column.py --filename {output} --colname fixedEdges  --colval null " \
        " && python scripts/add_column.py --filename {output} --colname NAdelete    --colval true " \
        " && python scripts/add_column.py --filename {output} --colname m.max       --colval inf " \
        " && python scripts/add_column.py --filename {output} --colname conservative --colval false " \
        " && python scripts/add_column.py --filename {output} --colname maj.rule     --colval false " \
        " && python scripts/add_column.py --filename {output} --colname solve.confl  --colval false " \
        " && python scripts/add_column.py --filename {output} --colname numCores     --colval 1 " \
        " && python scripts/add_column.py --filename {output} --colname verbose      --colval false " \
        " && python scripts/add_column.py --filename {output} --colname time          --colval `cat {input.time}` "  \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  
rule mmhc:
    input:
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv"
    output:
        adjmat=config["output_dir"]+"/adjmat/mmhc/" \
            "n_{n}/"\
            "p_{p}/"\
            "avpar_{avparents}/"\
            "score_type_{score_type}/" \
            "bdecatpar_chi_{bdecatpar_chi}/" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
            "alpha_{alpha}/"\
            "{replicate}.csv",
        time=config["output_dir"]+"/time/mmhc/" \
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "alpha_{alpha}/"\
                "{replicate}.txt"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_mmhc.R "\
        "--filename_data {input.data} "\
        "--alpha {wildcards.alpha} "\
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--filename {output.adjmat} "\

rule summarise_mmhc:
    input:
        adjmat_true = config["output_dir"]+"/adjmat/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_est=config["output_dir"]+"/adjmat/mmhc/" \
            "n_{n}/" \
            "p_{p}/" \
            "avpar_{avparents}/"\
            "score_type_{score_type}/" \
            "bdecatpar_chi_{bdecatpar_chi}/" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
            "alpha_{alpha}/"\
            "{replicate}.csv",
        time=config["output_dir"]+"/time/mmhc/" \
                "n_{n}/" \
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "alpha_{alpha}/"\
                "{replicate}.txt",
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv"
    output:
        config["output_dir"]+"/res/mmhc/"\
        "n_{n}/"\
        "p_{p}/"\
        "avpar_{avparents}/"\
        "score_type_{score_type}/" \
        "bdecatpar_chi_{bdecatpar_chi}/" \
        "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
        "alpha_{alpha}/"\
        "legend_{plot_legend}/" \
        "{replicate}.csv"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output} " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval mmhc "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} " \
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname alpha       --colval {wildcards.alpha} " \
        " && python scripts/add_column.py --filename {output} --colname whitelist   --colval null " \
        " && python scripts/add_column.py --filename {output} --colname debug       --colval false " \
        " && python scripts/add_column.py --filename {output} --colname maximize.args   --colval null " \
        " && python scripts/add_column.py --filename {output} --colname time          --colval `cat {input.time}` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule gobnilp:
    input:
        data = config["output_dir"]+"/range_header_data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat/gobnilp/"\
                    "n_{n}/"\
                    "p_{p}/"\
                    "avpar_{avparents}/"\
                    "score_type_{score_type}/" \
                    "bdecatpar_chi_{bdecatpar_chi}/" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "palim_{palim}/"\
                    "{replicate}.csv",
        time = config["output_dir"]+"/time/gobnilp/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "palim_{palim}/"\
                "{replicate}.txt"
    singularity:
        "docker://onceltuca/gobnilp:1.6.3"
    shell: 
        #"/usr/bin/time -f \"%e\" -o {output.time} " \ 
        "touch {output.adjmat}.gobnilp.set && " \   
        "echo 'gobnilp/outputfile/adjacencymatrix = \"{output.adjmat}.bn.mat\" ' > {output.adjmat}.gobnilp.set &&" \
        "echo 'gobnilp/outputfile/scoreandtime = \"score_and_time.txt\" ' >> {output.adjmat}.gobnilp.set &&" \
        "echo 'gobnilp/scoring/palim = {wildcards.palim} ' >> {output.adjmat}.gobnilp.set && " \     
        "/myappdir/gobnilp163/bin/gobnilp -f=dat -g={output.adjmat}.gobnilp.set {input.data} " \
        " && cat {output.adjmat}.bn.mat > {output.adjmat} " \
        " && cat score_and_time.txt > {output.time} " \
        " && rm {output.adjmat}.bn.mat " \
        " && rm score_and_time.txt " \
        " && rm {output.adjmat}.gobnilp.set"


        #"Rscript scripts/run_gobnilp.R "\
        #"--filename_data {input.data} "\
        #"--output_dir {config[output_dir]} "\
        #"--seed {wildcards.replicate} "\
        #"--palim {wildcards.palim} "\
        #"--filename {output.adjmat} "\

rule summarise_gobnilp:
    input:
        data = config["output_dir"]+"/range_header_data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_est = config["output_dir"]+"/adjmat/gobnilp/"\
                     "n_{n}/"\
                     "p_{p}/"\
                     "avpar_{avparents}/"\
                    "score_type_{score_type}/" \
                    "bdecatpar_chi_{bdecatpar_chi}/" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "palim_{palim}/"\
                     "{replicate}.csv",
        time = config["output_dir"]+"/time/gobnilp/n_{n}/p_{p}/avpar_{avparents}/" \
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "palim_{palim}/{replicate}.txt"     
    output:
        res = config["output_dir"]+"/res/gobnilp/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "palim_{palim}/"\
                "legend_{plot_legend}/" \
                "{replicate}.csv"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output.res} " \ 
        "--range_header_data 1 " \ 
        "--adjmat_header 0 " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval gobnilp "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        " && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname palim       --colval {wildcards.palim} "\
        " && python scripts/add_column.py --filename {output} --colname time        --colval `cat {input.time} | grep -Eo '[0-9]\.[0-9]*$'` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule fges: #use funtion as input to generate filename from the config file
    input:
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv"
    output:
        adjmat = config["output_dir"]+"/adjmat/fges/"\
                    "n_{n}/"\
                    "p_{p}/"\
                    "avpar_{avparents}/"\
                    "score_type_{score_type}/" \
                    "bdecatpar_chi_{bdecatpar_chi}/" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "faithfulnessAssumed_{faithfulnessAssumed}/"\
                    "{replicate}.csv",
        time = config["output_dir"]+"/time/fges/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "faithfulnessAssumed_{faithfulnessAssumed}/"\
                "{replicate}.txt"
    shell:
        "/usr/bin/time -f \"%e\" -o {output.time} " \  
        "Rscript scripts/run_fges.R "\
        "--filename_data {input.data} "\
        "--output_dir {config[output_dir]} "\
        "--seed {wildcards.replicate} "\
        "--faithfulnessAssumed {wildcards.faithfulnessAssumed} "\
        "--filename {output.adjmat} "\
        
        'java -jar causal-cmd-1.1.3-jar-with-dependencies.jar ' \
        '--algorithm fges '\
        '--data-type discrete '\
        '--dataset {input.data} '\
        '--delimiter comma '\
        '--score bdeu-score '\
        '--quote-char \" '\
        '--json-graph '\
        '--structurePrior 1 '\
        '--prefix {output.adjmat} ' \
        '&& Rscript scripts/tetrad_graph_to_adjmat.R ' \
        '--input {output.adjmat}.json ' \
        '--output {output.adjmat} ' \
        '&& ' \
        'rm {output.adjmat}.json'

rule summarise_fges:
    input:
        data = config["output_dir"]+"/data/n_{n}/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_true = config["output_dir"]+"/adjmat/p_{p}/avpar_{avparents}/{replicate}.csv",
        adjmat_est = config["output_dir"]+"/adjmat/fges/"\
                     "n_{n}/"\
                     "p_{p}/"\
                     "avpar_{avparents}/"\
                    "score_type_{score_type}/" \
                    "bdecatpar_chi_{bdecatpar_chi}/" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "faithfulnessAssumed_{faithfulnessAssumed}/"\
                     "{replicate}.csv",
        time = config["output_dir"]+"/time/fges/n_{n}/p_{p}/avpar_{avparents}/" \
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "faithfulnessAssumed_{faithfulnessAssumed}/{replicate}.txt"     
    output:
        res = config["output_dir"]+"/res/fges/"\
                "n_{n}/"\
                "p_{p}/"\
                "avpar_{avparents}/"\
                "score_type_{score_type}/" \
                "bdecatpar_chi_{bdecatpar_chi}/" \
                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                "faithfulnessAssumed_{faithfulnessAssumed}/"\
                "legend_{plot_legend}/" \
                "{replicate}.csv"
    shell:
        "Rscript scripts/run_summarise.R " \
        "--adjmat_true {input.adjmat_true} " \
        "--adjmat_est {input.adjmat_est} " \
        "--filename_data {input.data} " \
        "--filename {output.res} " \ 
        "--range_header_data 0 " \ 
        "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
        "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} "\
        " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
        " && python scripts/add_column.py --filename {output} --colname algorithm   --colval fges "\
        " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
        " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\
        " && python scripts/add_column.py --filename {output} --colname score           --colval bde " \
        #" && python scripts/add_column.py --filename {output} --colname bdecatpar_chi   --colval {wildcards.bdecatpar_chi} " \
        #" && python scripts/add_column.py --filename {output} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " \
        " && python scripts/add_column.py --filename {output} --colname faithfulnessAssumed       --colval {wildcards.faithfulnessAssumed} "\
        " && python scripts/add_column.py --filename {output} --colname time        --colval `cat {input.time}` " \
        " && python scripts/add_column.py --filename {output} --colname legend      --colval {wildcards.plot_legend} "  

rule plot:
    input:        
        blip = [expand(config["output_dir"] + "/res/blip/"
        "n_{n}/"
        "p_{p}/"
        "avpar_{avparents}/"
        "score_type_bde/" 
        "bdecatpar_chi_{bdecatpar_chi}/" 
        "bdecatpar_edgepf_{bdecatpar_edgepf}/"
        "time_{time}/" 
        "scorer.method_{scorermethod}/"
        "solver.method_{solvermethod}/"
        "indeg_{indeg}/"
        "cores_{cores}/"
        "allocated_{allocated}/"
        "scorefunction_{scorefunction}/"
        "alpha_{alpha}/"
        "verbose_{verbose}/"
        "legend_{plot_legend}/" 
        "{replicate}.csv",
                        replicate=replicates,
                        time=config["algorithms"]["blip"]["time"],
                        scorermethod=config["algorithms"]["blip"]["scorer.method"],
                        solvermethod=config["algorithms"]["blip"]["solver.method"],                       
                        indeg=config["algorithms"]["blip"]["indeg"],
                        cores=config["algorithms"]["blip"]["cores"],
                        allocated=config["algorithms"]["blip"]["allocated"],
                        scorefunction=config["algorithms"]["blip"]["scorefunction"],
                        alpha=config["algorithms"]["blip"]["alpha"],
                        verbose=config["algorithms"]["blip"]["verbose"],
                        n=config["data"]["sample_sizes"][i],
                        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                        bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                        bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
                        plot_legend=config["algorithms"]["blip"]["plot_legend"],
                        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i]) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))], 
        itsearch_map = [expand(config["output_dir"] + "/res/itsearch/"
                        "n_{n}/"
                        "p_{p}/"
                        "avpar_{avparents}/"                        
                        "score_type_bde/" 
                        "bdecatpar_chi_{bdecatpar_chi}/" 
                        "bdecatpar_edgepf_{bdecatpar_edgepf}/" 
                        "map_{map}/"
                        "plus1it_{plus1it}/" 
                        "posterior_{posterior}/" 
                        "score_type_bde/" 
                        "bdecatpar_chi_{bdecatpar_chi}/" 
                        "bdecatpar_edgepf_{bdecatpar_edgepf}/" 
                        "legend_{plot_legend}/" \
                        "{replicate}.csv",
                        replicate=replicates,
                        n=config["data"]["sample_sizes"][i],
                        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i],
                        map=config["algorithms"]["itsearch_map"]["optional"]["MAP"],
                        #score_type=config["algorithms"]["itsearch_map"]["score_params"]["type"],
                        bdecatpar_chi=config["algorithms"]["itsearch_map"]["score_params"]["bdecatpar"]["chi"],
                        bdecatpar_edgepf=config["algorithms"]["itsearch_map"]["score_params"]["bdecatpar"]["edgepf"],
                        plus1it=config["algorithms"]["itsearch_map"]["optional"]["plus1it"],
                        posterior=config["algorithms"]["itsearch_map"]["optional"]["posterior"],
                        plot_legend=config["algorithms"]["itsearch_map"]["plot_legend"],
                        ) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))],
        itsearch_sample = [expand(config["output_dir"] + "/res/itsearch/"
                        "n_{n}/"
                        "p_{p}/"
                        "avpar_{avparents}/"                        
                        "score_type_bde/" 
                        "bdecatpar_chi_{bdecatpar_chi}/" 
                        "bdecatpar_edgepf_{bdecatpar_edgepf}/" 
                        "map_{map}/"
                        "plus1it_{plus1it}/" 
                        "posterior_{posterior}/" 
                        "score_type_bde/" 
                        "bdecatpar_chi_{bdecatpar_chi}/" 
                        "bdecatpar_edgepf_{bdecatpar_edgepf}/" 
                        "legend_{plot_legend}/" \
                        "{replicate}.csv",
                        replicate=replicates,
                        n=config["data"]["sample_sizes"][i],
                        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i],
                        map=config["algorithms"]["itsearch_sample"]["optional"]["MAP"],
                        #score_type=config["algorithms"]["itsearch_map"]["score_params"]["type"],
                        bdecatpar_chi=config["algorithms"]["itsearch_sample"]["score_params"]["bdecatpar"]["chi"],
                        bdecatpar_edgepf=config["algorithms"]["itsearch_sample"]["score_params"]["bdecatpar"]["edgepf"],
                        plus1it=config["algorithms"]["itsearch_sample"]["optional"]["plus1it"],
                        posterior=config["algorithms"]["itsearch_sample"]["optional"]["posterior"],
                        plot_legend=config["algorithms"]["itsearch_sample"]["plot_legend"],
                        ) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))],
        # This will be very specialised for every starts.
        order_mcmc_sample = [expand(
                                    config["output_dir"]+"/res/orderMCMC/"\
                                    "n_{n}/" \
                                    "p_{p}/" \
                                    "avpar_{avparents}/"\
                                    "score_type_bde/"\
                                    "bdecatpar_chi_{bdecatpar_chi}/" \
                                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                                    "threshold_{threshold}/" \
                                    "legend_{plot_legend}/" \
                                    "{replicate}/"\
                                    "startspace_/adjmat/itsearch/"\
                                    "n_{n}/"\
                                    "p_{p}/"\
                                    "avpar_{avparents}/"\                                    
                                    "score_type_bde/"\
                                    "bdecatpar_chi_{itsearch_bdecatpar_chi}/" \
                                    "bdecatpar_edgepf_{itsearch_bdecatpar_edgepf}/" \
                                    "map_{itsearch_map}/"\
                                    "plus1it_{itsearch_plus1it}/"\
                                    "posterior_{itsearch_posterior}/"\
                                    #"score_type_bde/"\
                                    #"bdecatpar_chi_{bdecatpar_chi}/" 
                                    #"bdecatpar_edgepf_{bdecatpar_edgepf}/" 
                                    "{replicate}.csv",
                            replicate=replicates,   
                            n=config["data"]["sample_sizes"][i],
                            avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                            p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i],
                            bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                            bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
                            #map=config["ordermcmc_sample"]["optional"]["MAP"],
                            itsearch_map=config["algorithms"][config["algorithms"]["ordermcmc_sample"]["startspace"]]["optional"]["MAP"],
                            itsearch_bdecatpar_chi=config["algorithms"][config["algorithms"]["ordermcmc_sample"]["startspace"]]["score_params"]["bdecatpar"]["chi"],
                            itsearch_bdecatpar_edgepf=config["algorithms"][config["algorithms"]["ordermcmc_sample"]["startspace"]]["score_params"]["bdecatpar"]["edgepf"],
                            itsearch_plus1it=config["algorithms"][config["algorithms"]["ordermcmc_sample"]["startspace"]]["optional"]["plus1it"],
                            itsearch_posterior=config["algorithms"][config["algorithms"]["ordermcmc_sample"]["startspace"]]["optional"]["posterior"],
                            threshold=config["algorithms"]["ordermcmc_sample"]["threshold"],
                            plot_legend=config["algorithms"]["ordermcmc_sample"]["plot_legend"],
                            ) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))],
        order_mcmc_map = [expand(
                                config["output_dir"]+"/res/orderMCMC/"\
                                "n_{n}/" \
                                "p_{p}/" \
                                "avpar_{avparents}/"\
                                "score_type_bde/"\
                                "bdecatpar_chi_{bdecatpar_chi}/" \
                                "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                                "threshold_{threshold}/" \  
                                "legend_{plot_legend}/" \
                                "{replicate}/"\
                                "startspace_/adjmat/itsearch/"\
                                "n_{n}/"\
                                "p_{p}/"\
                                "avpar_{avparents}/"\                                    
                                "score_type_bde/"\
                                "bdecatpar_chi_{itsearch_bdecatpar_chi}/" \
                                "bdecatpar_edgepf_{itsearch_bdecatpar_edgepf}/" \
                                "map_{itsearch_map}/"\
                                "plus1it_{itsearch_plus1it}/"\
                                "posterior_{itsearch_posterior}/"\
                                #"score_type_bde/"\
                                #"bdecatpar_chi_{bdecatpar_chi}/" 
                                #"bdecatpar_edgepf_{bdecatpar_edgepf}/" 
                                "{replicate}.csv",
                        replicate=replicates,   
                        n=config["data"]["sample_sizes"][i],
                        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i],
                        bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                        bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
                        #map=config["ordermcmc_sample"]["optional"]["MAP"],
                        itsearch_map=config["algorithms"][config["algorithms"]["ordermcmc_map"]["startspace"]]["optional"]["MAP"],
                        itsearch_bdecatpar_chi=config["algorithms"][config["algorithms"]["ordermcmc_map"]["startspace"]]["score_params"]["bdecatpar"]["chi"],
                        itsearch_bdecatpar_edgepf=config["algorithms"][config["algorithms"]["ordermcmc_map"]["startspace"]]["score_params"]["bdecatpar"]["edgepf"],
                        itsearch_plus1it=config["algorithms"][config["algorithms"]["ordermcmc_map"]["startspace"]]["optional"]["plus1it"],
                        itsearch_posterior=config["algorithms"][config["algorithms"]["ordermcmc_map"]["startspace"]]["optional"]["posterior"],
                        threshold=config["algorithms"]["ordermcmc_map"]["threshold"],
                        plot_legend=config["algorithms"]["ordermcmc_map"]["plot_legend"],
                        ) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))],
        pcalg = [expand(config["output_dir"] + "/res/pcalg/"
                        "n_{n}/"
                        "p_{p}/"
                        "avpar_{avparents}/"
                        "score_type_bde/"\
                        "bdecatpar_chi_{bdecatpar_chi}/" \
                        "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                        "alpha_{alpha}/"
                        "legend_{plot_legend}/" \
                        "{replicate}.csv",
                        replicate=replicates,
                        alpha=config["algorithms"]["pcalg"]["alpha"],
                        n=config["data"]["sample_sizes"][i],
                        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                        bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                         bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
                         plot_legend=config["algorithms"]["pcalg"]["plot_legend"],
                        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i]) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))],
        mmhc = [expand(config["output_dir"] + "/res/mmhc/"
                        "n_{n}/"
                        "p_{p}/"
                        "avpar_{avparents}/"
                        "score_type_bde/"\
                        "bdecatpar_chi_{bdecatpar_chi}/" \
                        "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                        "alpha_{alpha}/"
                        "legend_{plot_legend}/" \
                        "{replicate}.csv",
                        replicate=replicates,
                        alpha=config["algorithms"]["mmhc"]["restrict.args"]["alpha"],
                        n=config["data"]["sample_sizes"][i],
                        avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                        bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                        bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],
                        plot_legend=config["algorithms"]["mmhc"]["plot_legend"],
                        p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i]) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))],
        gobnilp = [expand(config["output_dir"] + "/res/gobnilp/"
                    "n_{n}/"
                    "p_{p}/"
                    "avpar_{avparents}/"
                    "score_type_bde/"\
                    "bdecatpar_chi_{bdecatpar_chi}/" \
                    "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
                    "palim_{palim}/" \
                    "legend_{plot_legend}/" \
                    "{replicate}.csv",
                         replicate=replicates,
                         n=config["data"]["sample_sizes"][i],
                         avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                         palim=config["algorithms"]["gobnilp"]["palim"],
                         bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                         bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],                         
                         plot_legend=config["algorithms"]["gobnilp"]["plot_legend"],
                         p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i]) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))],
        fges = [expand(config["output_dir"] + "/res/fges/"
            "n_{n}/"
            "p_{p}/"
            "avpar_{avparents}/"
            "score_type_bde/"\
            "bdecatpar_chi_{bdecatpar_chi}/" \
            "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
            "faithfulnessAssumed_{faithfulnessAssumed}/" \
            "legend_{plot_legend}/" \
            "{replicate}.csv",
                    replicate=replicates,
                    n=config["data"]["sample_sizes"][i],
                    avparents=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["av_parents"][i],
                    faithfulnessAssumed=config["algorithms"]["fges"]["faithfulnessAssumed"],
                    bdecatpar_chi=config["evaluation"]["score"]["bdecatpar"]["chi"],
                    bdecatpar_edgepf=config["evaluation"]["score"]["bdecatpar"]["edgepf"],                         
                    plot_legend=config["algorithms"]["fges"]["plot_legend"],
                    p=config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"][i]) for i in range(len(config["graphs"]["sampled"]["algorithms"]["generateDAGMaxParents"]["dims"]))]

    output:
        "ROC.eps" 
        #SHD.eps
#        config["output_dir"]+"/logscore.eps"
    notebook:
        "plot.ipynb"


        # order_mcmc_map = [expand(config["output_dir"] + "/res_orderMCMC_map_n_{n}_p_{p}_avpar_{avparents}_{replicate}_startspace_endspace_itsearch_map_n_{n}_p_{p}_avpar_{avparents}_map_1_{replicate}.csv",
        #                          replicate=config["replicates"],
        #                          n=config["sample_sizes"][i],
        #                          avparents=config["av_parents"][i],
        #                          p=config["dims"][i]) for i in range(len(config["dims"]))],


        # itsearch_sample = [expand(config["output_dir"] + "/res_itsearch/"
        #                 "n_{n}/"
        #                 "p_{p}/"
        #                 "avpar_{avparents}/"
        #                 "map_0/"
        #                 "score_type_{score_type}/" 
        #                 "bdecatpar_chi_{bdecatpar_chi}/" \
        #                 "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
        #                 "{replicate}.csv",
        #                 replicate=replicates,
        #                 n=config["sample_sizes"][i],
        #                 avparents=config["av_parents"][i],
        #                 p=config["dims"][i],
        #                 score_type=config["itsearch_mapnew"]["score_params"]["type"],
        #                 bdecatpar_chi=config["itsearch_mapnew"]["score_params"]["bdecatpar"]["chi"],
        #                 bdecatpar_edgepf=config["itsearch_mapnew"]["score_params"]["bdecatpar"]["edgepf"],
        #                 ) for i in range(len(config["dims"]))],


        #itsearch_sample = [expand(config["output_dir"] + "/res_itsearch_sample_n_{n}_p_{p}_avpar_{avparents}_map_0_{replicate}.csv",
        #                          replicate=config["replicates"],
        #                          n=config["sample_sizes"][i],
        #                          avparents=config["av_parents"][i],
        #                          p=config["dims"][i]) for i in range(len(config["dims"]))],


# rule ordermcmc_itsearch_sample:
#     input:
#         dag = config["output_dir"]+"/dag_p_{p}_avpar_{avparents}_{replicate}.rds",
#         data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
#         startspace = config["output_dir"]+"/endspace_itsearch_sample/"\
#                      "n_{n}/"\
#                      "p_{p}/"\
#                      "avpar_{avparents}/"\
#                      "map_0_{replicate}.rds"
#     output:
#         config["output_dir"]+"/res_orderMCMC/"\
#         "n_{n}/" \
#         "p_{p}/" \
#         "MAP_{map}/"\
#         "plus1_{plus1}/"\
#         "avpar_{avparents}/"\
#         "{replicate}/"\
#         "startspace_endspace_itsearch/"\
#         "n_{n}/"\
#         "p_{p}/"\
#         "avpar_{avparents}/"\
#         "map_{map}/"\
#         "score_type_{score_type}/" \
#         "bdecatpar_chi_{bdecatpar_chi}/" \
#         "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
#         "plus1it_{plus1it}/" \
#         "posterior_{posterior}_"\
#         "{replicate}.csv",
#     message:
#         "Executing order mcmc algorithm with startspace on the following files: {input}."
#     shell: 
#         "Rscript scripts/run_order_mcmc.R "
#         "--filename {output} " \
#         "--filename_data {input.data} " \
#         "--filename_dag {input.dag} " \
#         "--filename_startspace {input.startspace} " \
#         "--output_dir {config[output_dir]} " \
#         "--seed {wildcards.replicate} " \
#         " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} " \
#         " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
#         " && python scripts/add_column.py --filename {output} --colname algorithm   --colval orderMCMC_sample "\
#         " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
#         " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "\



# rule ordermcmc_itsearch_map:
#     input:
#         dag = config["output_dir"]+"/dag_p_{p}_avpar_{avparents}_{replicate}.rds",
#         data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv",
#         startspace = config["output_dir"]+"/endspace_itsearch_map_"\
#         "n_{n}_"\
#         "p_{p}_"\
#         "avpar_{avparents}_"\
#         "map_1_"\
#         "{replicate}.rds"
#     output:
#         config["output_dir"]+"/res_orderMCMC_map/"\
#         "n_{n}/"\
#         "p_{p}/"\
#         "avpar_{avparents}/"\
#         "{replicate}/"\
#         "startspace_endspace_itsearch_map_"\
#         "n_{n}_"\
#         "p_{p}_"\
#         "avpar_{avparents}_"\
#         "map_1_"\
#         "{replicate}.csv",
#     message:
#         "Executing order mcmc algorithm on the following files: {input}."
#     shell: 
#         "Rscript scripts/run_order_mcmc.R " \
#         "--filename {output} " \
#         "--filename_data {input.data} " \
#         "--filename_dag {input.dag} "\
#         "--filename_startspace {input.startspace} "\
#         "--output_dir {config[output_dir]} "\
#         "--seed {wildcards.replicate} "      \  
#         " && python scripts/add_column.py --filename {output} --colname avparents   --colval {wildcards.avparents} " \
#         " && python scripts/add_column.py --filename {output} --colname replicate   --colval {wildcards.replicate} "\
#         " && python scripts/add_column.py --filename {output} --colname algorithm   --colval orderMCMC_map "\
#         " && python scripts/add_column.py --filename {output} --colname dim         --colval {wildcards.p} "\
#         " && python scripts/add_column.py --filename {output} --colname sample_size --colval {wildcards.n} "


# rule itsearch_map:
#     input:
#         dag = config["output_dir"]+"/dag_p_{p}_avpar_{avparents}_{replicate}.rds",
#         data = config["output_dir"]+"/data_n_{n}_p_{p}_avpar_{avparents}_{replicate}.csv"
#     output:
#         benchmark = config["output_dir"]+"/res_itsearch_map/"\
#                     "n_{n}/"\
#                     "p_{p}/"\
#                     "avpar_{avparents}/"\
#                     "map_1/" \
#                     "score_type_{score_type}/" \
#                     "bdecatpar_chi_{bdecatpar_chi}/" \
#                     "bdecatpar_edgepf_{bdecatpar_edgepf}/" \
#                     "{replicate}.csv", 
#         endspace = config["output_dir"]+"/endspace_itsearch_map_"\
#                     "n_{n}_"\
#                     "p_{p}_"\
#                     "avpar_{avparents}_" \
#                     "map_1_" \
#                     "score_type_{score_type}_" \
#                     "bdecatpar_chi_{bdecatpar_chi}_" \
#                     "bdecatpar_edgepf_{bdecatpar_edgepf}_" \
#                     "{replicate}.rds"
#     message:
#         "Executing iterative search algorithm with MAP=TRUE on the following files: {input}"
#     shell:
#         "Rscript scripts/run_iterative_search.R " \
#         "--filename_data {input.data} " \ 
#         "--filename_dag {input.dag} " \
#         "--output_dir {config[output_dir]} " \
#         "--seed {wildcards.replicate} " \
#         "--avparents {wildcards.avparents} " \
#         "--map 1 " \
#         "--score_type {wildcards.score_type} " \
#         "--bdecatpar_chi {wildcards.bdecatpar_chi} " \
#         "--bdecatpar_edgepf {wildcards.bdecatpar_edgepf} " \
#         "--plus1it {wildcards.plus1it} " \
#         "--posterior {wildcards.posterior} " \
#         "--title itsearch_map " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname avparents     --colval {wildcards.avparents} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname replicate     --colval {wildcards.replicate} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname algorithm     --colval itsearch_map " \ 
#         " && python scripts/add_column.py --filename {output.benchmark} --colname dim           --colval {wildcards.p} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname sample_size   --colval {wildcards.n} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname MAP           --colval true " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname plus1it       --colval null " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname posterior     --colval null " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname score_type    --colval {wildcards.score_type} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname bdecatpar_chi    --colval {wildcards.bdecatpar_chi} " \
#         " && python scripts/add_column.py --filename {output.benchmark} --colname bdecatpar_edgepf --colval {wildcards.bdecatpar_edgepf} " 
 