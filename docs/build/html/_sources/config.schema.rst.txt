 

.. _config.schema.json#/:

config.schema
=============

.. container:: title

 JSON schema for BenchPress config file.

:type: ``object``

:$id: ``http://github.com/felixleopoldo/benchpress/schema/config.schema.json``

:Required: :ref:`config.schema.json#/properties/output_dir`, :ref:`config.schema.json#/properties/benchmark_setup`, :ref:`config.schema.json#/properties/graph_sampling_algorithms`, :ref:`config.schema.json#/properties/parameters_sampling_algorithms`, :ref:`config.schema.json#/properties/structure_learning_algorithms`


.. _config.schema.json#/definitions:

definitions
***********


.. _config.schema.json#/definitions/blip:

blip
++++

.. container:: title

 Blip instantiation

Blip instantiation

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/blip/properties/id`, :ref:`config.schema.json#/definitions/blip/properties/plot_legend`, :ref:`config.schema.json#/definitions/blip/properties/scorer.method`, :ref:`config.schema.json#/definitions/blip/properties/solver.method`, :ref:`config.schema.json#/definitions/blip/properties/indeg`, :ref:`config.schema.json#/definitions/blip/properties/time`, :ref:`config.schema.json#/definitions/blip/properties/allocated`, :ref:`config.schema.json#/definitions/blip/properties/scorefunction`, :ref:`config.schema.json#/definitions/blip/properties/alpha`, :ref:`config.schema.json#/definitions/blip/properties/cores`, :ref:`config.schema.json#/definitions/blip/properties/verbose`

**Properties:** :ref:`config.schema.json#/definitions/blip/properties/allocated`, :ref:`config.schema.json#/definitions/blip/properties/alpha`, :ref:`config.schema.json#/definitions/blip/properties/cores`, :ref:`config.schema.json#/definitions/blip/properties/id`, :ref:`config.schema.json#/definitions/blip/properties/indeg`, :ref:`config.schema.json#/definitions/blip/properties/plot_legend`, :ref:`config.schema.json#/definitions/blip/properties/scorefunction`, :ref:`config.schema.json#/definitions/blip/properties/scorer.method`, :ref:`config.schema.json#/definitions/blip/properties/solver.method`, :ref:`config.schema.json#/definitions/blip/properties/time`, :ref:`config.schema.json#/definitions/blip/properties/verbose`


.. _config.schema.json#/definitions/blip/properties/allocated:

allocated
#########

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/blip/properties/alpha:

alpha
#####

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/blip/properties/cores:

cores
#####

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/blip/properties/id:

id
##

.. container:: title

 Unique idenfifier

Unique idenfifier for that can be used as reference in the benchmark_setup.

:type: ``string``


.. _config.schema.json#/definitions/blip/properties/indeg:

indeg
#####

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/blip/properties/plot_legend:

plot_legend
###########

.. container:: title

 Legend

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/blip/properties/scorefunction:

scorefunction
#############

:type: ``string``


.. _config.schema.json#/definitions/blip/properties/scorer.method:

scorer
######

:type: ``string``


.. _config.schema.json#/definitions/blip/properties/solver.method:

solver
######

:type: ``string``


.. _config.schema.json#/definitions/blip/properties/time:

time
####

:Reference: :ref:`flexnonnegnum#/`


.. _config.schema.json#/definitions/blip/properties/verbose:

verbose
#######

:Reference: :ref:`nonnegint#/`


.. _config.schema.json#/definitions/bn.fit_networks:

bn
++

.. container:: title

 Bn.fit network file

Bayesian network in bn.fit type serialised as .rds file.

:Required: :ref:`config.schema.json#/definitions/bn.fit_networks/properties/id`, :ref:`config.schema.json#/definitions/bn.fit_networks/properties/filename`, :ref:`config.schema.json#/definitions/bn.fit_networks/properties/source`

**Properties:** :ref:`config.schema.json#/definitions/bn.fit_networks/properties/filename`, :ref:`config.schema.json#/definitions/bn.fit_networks/properties/id`, :ref:`config.schema.json#/definitions/bn.fit_networks/properties/source`


.. _config.schema.json#/definitions/bn.fit_networks/properties/filename:

filename
########

.. container:: title

 ID

:type: ``string``


.. _config.schema.json#/definitions/bn.fit_networks/properties/id:

id
##

.. container:: title

 ID

:type: ``string``


.. _config.schema.json#/definitions/bn.fit_networks/properties/source:

source
######

.. container:: title

 Source

:type: ``string``


.. _config.schema.json#/definitions/data_setup_dict:

data_setup_dict
+++++++++++++++

.. container:: title

 Data setup

Description of the data model and sampling setup. Make sure that the id's are properly combined.

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/data_setup_dict/properties/graph`, :ref:`config.schema.json#/definitions/data_setup_dict/properties/parameters`, :ref:`config.schema.json#/definitions/data_setup_dict/properties/data`, :ref:`config.schema.json#/definitions/data_setup_dict/properties/seed_range`

**Properties:** :ref:`config.schema.json#/definitions/data_setup_dict/properties/data`, :ref:`config.schema.json#/definitions/data_setup_dict/properties/graph`, :ref:`config.schema.json#/definitions/data_setup_dict/properties/parameters`, :ref:`config.schema.json#/definitions/data_setup_dict/properties/seed_range`


.. _config.schema.json#/definitions/data_setup_dict/properties/data:

data
####

.. container:: title

 Data

Data sampling method ID.

:type: ``string``


.. _config.schema.json#/definitions/data_setup_dict/properties/graph:

graph
#####

.. container:: title

 Graph

ID of the graph instantiation.

:type: ``string``


.. _config.schema.json#/definitions/data_setup_dict/properties/parameters:

parameters
##########

.. container:: title

 Parameters

Parameters ID.

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/data_setup_dict/properties/parameters/anyOf/0:

0
>

:type: ``string``


.. _config.schema.json#/definitions/data_setup_dict/properties/parameters/anyOf/1:

1
>

:type: ``null``


.. _config.schema.json#/definitions/data_setup_dict/properties/seed_range:

seed_range
##########

.. container:: title

 Seed range

This data setup will be simulated for this range of seeds. E.g. seed_range:[1,3] will generate 3 datsets (and corresponding models) with seeds 1,2,3.

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/data_setup_dict/properties/seed_range/anyOf/1:

1
>

:type: ``null``


.. _config.schema.json#/definitions/data_setup_dict/properties/seed_range/anyOf/0:

List of 2 integers [a, b], where a<=b
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

:type: ``array``


.. _config.schema.json#/definitions/data_setup_dict/properties/seed_range/anyOf/0/title:




:maxLength: ``2``

:minLength: ``2``

.. container:: sub-title

 Every element of **List of 2 integers [a, b], where a<=b.**  is:

:type: ``integer``


.. _config.schema.json#/definitions/fci:

fci
+++

.. container:: title

 FCI

FCI instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/fci/properties/id`, :ref:`config.schema.json#/definitions/fci/properties/plot_legend`, :ref:`config.schema.json#/definitions/fci/properties/alpha`, :ref:`config.schema.json#/definitions/fci/properties/test`

**Properties:** :ref:`config.schema.json#/definitions/fci/properties/alpha`, :ref:`config.schema.json#/definitions/fci/properties/data-type`, :ref:`config.schema.json#/definitions/fci/properties/id`, :ref:`config.schema.json#/definitions/fci/properties/plot_legend`, :ref:`config.schema.json#/definitions/fci/properties/test`


.. _config.schema.json#/definitions/fci/properties/alpha:

alpha
#####

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/fci/properties/data-type:

data-type
#########

:type: ``string``


.. _config.schema.json#/definitions/fci/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/fci/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/fci/properties/test:

test
####

:type: ``string``


.. _config.schema.json#/definitions/fges:

fges
++++

.. container:: title

 Fast greedy equivalent search (fGES)

fGES instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/fges/properties/id`, :ref:`config.schema.json#/definitions/fges/properties/plot_legend`, :ref:`config.schema.json#/definitions/fges/properties/faithfulnessAssumed`, :ref:`config.schema.json#/definitions/fges/properties/score`, :ref:`config.schema.json#/definitions/fges/properties/data-type`

**Properties:** :ref:`config.schema.json#/definitions/fges/properties/data-type`, :ref:`config.schema.json#/definitions/fges/properties/faithfulnessAssumed`, :ref:`config.schema.json#/definitions/fges/properties/id`, :ref:`config.schema.json#/definitions/fges/properties/plot_legend`, :ref:`config.schema.json#/definitions/fges/properties/score`


.. _config.schema.json#/definitions/fges/properties/data-type:

data-type
#########

:type: ``string``


.. _config.schema.json#/definitions/fges/properties/faithfulnessAssumed:

faithfulnessAssumed
###################

:type: ``boolean``


.. _config.schema.json#/definitions/fges/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/fges/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/fges/properties/score:

score
#####

:type: ``string``


.. _config.schema.json#/definitions/fixed_adjmats:

fixed_adjmats
+++++++++++++

.. container:: title

 Fixed adjacenty matrix of a graph

Fixed adjacenty matrix of a graph. Must be in .csv format with , as separator. First row should contain names for th nodes.

:Required: :ref:`config.schema.json#/definitions/fixed_adjmats/properties/id`, :ref:`config.schema.json#/definitions/fixed_adjmats/properties/filename`, :ref:`config.schema.json#/definitions/fixed_adjmats/properties/source`

**Properties:** :ref:`config.schema.json#/definitions/fixed_adjmats/properties/filename`, :ref:`config.schema.json#/definitions/fixed_adjmats/properties/id`, :ref:`config.schema.json#/definitions/fixed_adjmats/properties/source`


.. _config.schema.json#/definitions/fixed_adjmats/properties/filename:

filename
########

.. container:: title

 Filename of the csv file.

:type: ``string``


.. _config.schema.json#/definitions/fixed_adjmats/properties/id:

id
##

.. container:: title

 ID

:type: ``string``


.. _config.schema.json#/definitions/fixed_adjmats/properties/source:

source
######

.. container:: title

 Source of the adjacency matrix

:type: ``string``


.. _config.schema.json#/definitions/fixed_data:

fixed_data
++++++++++

.. container:: title

 Data file

Data file in csv format separated by empy space ' '. The firs row must have the variable names. For categorical data, the second row shold contain the possible values for the specific variable.

**Properties:** :ref:`config.schema.json#/definitions/fixed_data/properties/datatype`, :ref:`config.schema.json#/definitions/fixed_data/properties/filename`, :ref:`config.schema.json#/definitions/fixed_data/properties/graph`, :ref:`config.schema.json#/definitions/fixed_data/properties/id`, :ref:`config.schema.json#/definitions/fixed_data/properties/samples`, :ref:`config.schema.json#/definitions/fixed_data/properties/source`


.. _config.schema.json#/definitions/fixed_data/properties/datatype:

datatype
########

.. container:: title

 Data type

**Allowed values:** 

- continuous
- binary
- categorical


.. _config.schema.json#/definitions/fixed_data/properties/filename:

filename
########

.. container:: title

 Data filename

:type: ``string``


.. _config.schema.json#/definitions/fixed_data/properties/graph:

graph
#####

.. container:: title

 Underlying graph id

:type: ``string``


.. _config.schema.json#/definitions/fixed_data/properties/id:

id
##

.. container:: title

 ID

:type: ``string``


.. _config.schema.json#/definitions/fixed_data/properties/samples:

samples
#######

:Reference: :ref:`nonnegint#/`


.. _config.schema.json#/definitions/fixed_data/properties/source:

source
######

.. container:: title

 Data source

:type: ``string``


.. _config.schema.json#/definitions/flexnatnum:

flexnatnum
++++++++++

.. container:: title

 Non-negative integer(s)

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/flexnatnum/anyOf/0:

0
#

:Reference: :ref:`natnum#/`


.. _config.schema.json#/definitions/flexnatnum/anyOf/1:

Positive integer list
#####################

:type: ``array``


.. _config.schema.json#/definitions/flexnatnum/anyOf/1/title:




.. container:: sub-title

 Every element of **Positive integer list**  is:

:Reference: :ref:`natnum#/`


.. _config.schema.json#/definitions/flexnatnumnull:

flexnatnumnull
++++++++++++++

.. container:: title

 Npn-negative integer or null

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/flexnatnumnull/anyOf/0:

0
#

:Reference: :ref:`flexnatnum#/`


.. _config.schema.json#/definitions/flexnatnumnull/anyOf/1:

1
#

:type: ``null``


.. _config.schema.json#/definitions/flexnonnegint:

flexnonnegint
+++++++++++++

.. container:: title

 Non-negative integer(s)

Non-negative integers, (0,1,2,...), or array of the same.

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/flexnonnegint/anyOf/0:

0
#

:Reference: :ref:`nonnegint#/`


.. _config.schema.json#/definitions/flexnonnegint/anyOf/1:

Non-negative integer list
#########################

:type: ``array``


.. _config.schema.json#/definitions/flexnonnegint/anyOf/1/title:




.. container:: sub-title

 Every element of **Non-negative integer list**  is:

:Reference: :ref:`nonnegint#/`


.. _config.schema.json#/definitions/flexnonnegintnull:

flexnonnegintnull
+++++++++++++++++

.. container:: title

 Non-negative integer(s), or null.

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/flexnonnegintnull/anyOf/0:

0
#

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/flexnonnegintnull/anyOf/1:

1
#

:type: ``null``


.. _config.schema.json#/definitions/flexnonnegnum:

flexnonnegnum
+++++++++++++

Non-negative number(s).

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/flexnonnegnum/anyOf/0:

0
#

:Reference: :ref:`nonnegnum#/`


.. _config.schema.json#/definitions/flexnonnegnum/anyOf/1:

Non-negative number list
########################

List of non-negative numbers

:type: ``array``


.. _config.schema.json#/definitions/flexnonnegnum/anyOf/1/title:




.. container:: sub-title

 Every element of **Non-negative number list**  is:

:Reference: :ref:`nonnegnum#/`


.. _config.schema.json#/definitions/flexnonnegnumnull:

flexnonnegnumnull
+++++++++++++++++

.. container:: title

 Non-negative number(s) or null

E.g. 1.5 or [1.6, 3.8] or null.

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/flexnonnegnumnull/anyOf/0:

0
#

:Reference: :ref:`flexnonnegnum#/`


.. _config.schema.json#/definitions/flexnonnegnumnull/anyOf/1:

1
#

:type: ``null``


.. _config.schema.json#/definitions/flexprob:

flexprob
++++++++

.. container:: title

 Number(s) in the range [0,1].

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/flexprob/anyOf/0:

0
#

:Reference: :ref:`prob#/`


.. _config.schema.json#/definitions/flexprob/anyOf/1:

Probability list
################

:type: ``array``


.. _config.schema.json#/definitions/flexprob/anyOf/1/title:




.. container:: sub-title

 Every element of **Probability list**  is:

:Reference: :ref:`prob#/`


.. _config.schema.json#/definitions/flexprobnull:

flexprobnull
++++++++++++

.. container:: title

 Number(s) in the range [0,1], or null.

Number(s) in the range [0,1], or null.

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/flexprobnull/anyOf/0:

0
#

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/flexprobnull/anyOf/1:

1
#

:type: ``null``


.. _config.schema.json#/definitions/generateBinaryBN:

generateBinaryBN
++++++++++++++++

.. container:: title

 generateBinaryBN

Parameter setting for generateBinaryBN

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/generateBinaryBN/properties/min`, :ref:`config.schema.json#/definitions/generateBinaryBN/properties/max`, :ref:`config.schema.json#/definitions/generateBinaryBN/properties/id`

**Properties:** :ref:`config.schema.json#/definitions/generateBinaryBN/properties/id`, :ref:`config.schema.json#/definitions/generateBinaryBN/properties/max`, :ref:`config.schema.json#/definitions/generateBinaryBN/properties/min`


.. _config.schema.json#/definitions/generateBinaryBN/properties/id:

id
##

:type: ``string``


.. _config.schema.json#/definitions/generateBinaryBN/properties/max:

max
###

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/generateBinaryBN/properties/min:

min
###

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/generateDAGMaxParents:

generateDAGMaxParents
+++++++++++++++++++++

.. container:: title

 generateDAGMaxParents

An instance of generateDAGMaxParents. Sampling of a DAG with specified maximum averge number for parents for the nodes.

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/generateDAGMaxParents/properties/av_parents`, :ref:`config.schema.json#/definitions/generateDAGMaxParents/properties/dims`, :ref:`config.schema.json#/definitions/generateDAGMaxParents/properties/id`

**Properties:** :ref:`config.schema.json#/definitions/generateDAGMaxParents/properties/av_parents`, :ref:`config.schema.json#/definitions/generateDAGMaxParents/properties/dims`, :ref:`config.schema.json#/definitions/generateDAGMaxParents/properties/id`


.. _config.schema.json#/definitions/generateDAGMaxParents/properties/av_parents:

av_parents
##########

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/generateDAGMaxParents/properties/dims:

dims
####

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/generateDAGMaxParents/properties/id:

id
##

:type: ``string``


.. _config.schema.json#/definitions/gfci:

gfci
++++

.. container:: title

 GFCI (parameter setting)

GFCI instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/gfci/properties/id`, :ref:`config.schema.json#/definitions/gfci/properties/plot_legend`, :ref:`config.schema.json#/definitions/gfci/properties/alpha`, :ref:`config.schema.json#/definitions/gfci/properties/test`

**Properties:** :ref:`config.schema.json#/definitions/gfci/properties/alpha`, :ref:`config.schema.json#/definitions/gfci/properties/data-type`, :ref:`config.schema.json#/definitions/gfci/properties/id`, :ref:`config.schema.json#/definitions/gfci/properties/plot_legend`, :ref:`config.schema.json#/definitions/gfci/properties/score`, :ref:`config.schema.json#/definitions/gfci/properties/test`


.. _config.schema.json#/definitions/gfci/properties/alpha:

alpha
#####

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/gfci/properties/data-type:

data-type
#########

:type: ``string``


.. _config.schema.json#/definitions/gfci/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/gfci/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/gfci/properties/score:

score
#####

:type: ``string``


.. _config.schema.json#/definitions/gfci/properties/test:

test
####

:type: ``string``


.. _config.schema.json#/definitions/gobnilp:

gobnilp
+++++++

.. container:: title

 Gobnilp algorithm

Gobnilp instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/gobnilp/properties/id`, :ref:`config.schema.json#/definitions/gobnilp/properties/plot_legend`, :ref:`config.schema.json#/definitions/gobnilp/properties/plot`, :ref:`config.schema.json#/definitions/gobnilp/properties/palim`, :ref:`config.schema.json#/definitions/gobnilp/properties/alpha`, :ref:`config.schema.json#/definitions/gobnilp/properties/prune`

**Properties:** :ref:`config.schema.json#/definitions/gobnilp/properties/alpha`, :ref:`config.schema.json#/definitions/gobnilp/properties/id`, :ref:`config.schema.json#/definitions/gobnilp/properties/palim`, :ref:`config.schema.json#/definitions/gobnilp/properties/plot`, :ref:`config.schema.json#/definitions/gobnilp/properties/plot_legend`, :ref:`config.schema.json#/definitions/gobnilp/properties/prune`


.. _config.schema.json#/definitions/gobnilp/properties/alpha:

alpha
#####

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/gobnilp/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/gobnilp/properties/palim:

palim
#####

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/gobnilp/properties/plot:

plot
####

:type: ``boolean``


.. _config.schema.json#/definitions/gobnilp/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/gobnilp/properties/prune:

prune
#####

:type: ``boolean``


.. _config.schema.json#/definitions/greenthomas:

greenthomas
+++++++++++

.. container:: title

 Green & Thomas algorithm for sampling from decomposable graph distributions

Green & Thomas algorithm for learning decomopasble graphs.
 Source: Green, P. J., & Thomas, A. (2013). Sampling decomposable graphs using a Markov chain on junction trees. Biometrika, 100(1), 91-110.

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/greenthomas/properties/id`, :ref:`config.schema.json#/definitions/greenthomas/properties/plot_legend`, :ref:`config.schema.json#/definitions/greenthomas/properties/n_samples`, :ref:`config.schema.json#/definitions/greenthomas/properties/penalty`, :ref:`config.schema.json#/definitions/greenthomas/properties/randomits`

**Properties:** :ref:`config.schema.json#/definitions/greenthomas/properties/id`, :ref:`config.schema.json#/definitions/greenthomas/properties/n_samples`, :ref:`config.schema.json#/definitions/greenthomas/properties/penalty`, :ref:`config.schema.json#/definitions/greenthomas/properties/plot_legend`, :ref:`config.schema.json#/definitions/greenthomas/properties/randomits`


.. _config.schema.json#/definitions/greenthomas/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/greenthomas/properties/n_samples:

n_samples
#########

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/greenthomas/properties/penalty:

penalty
#######

:Reference: :ref:`flexnonnegnum#/`


.. _config.schema.json#/definitions/greenthomas/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/greenthomas/properties/randomits:

randomits
#########

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/gs:

gs
++

.. container:: title

 Grow shrink (GS) algorithm (paramter setting)

Grow shrink (GS) algorithm instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/gs/properties/id`, :ref:`config.schema.json#/definitions/gs/properties/plot_legend`, :ref:`config.schema.json#/definitions/gs/properties/alpha`

**Properties:** :ref:`config.schema.json#/definitions/gs/properties/alpha`, :ref:`config.schema.json#/definitions/gs/properties/id`, :ref:`config.schema.json#/definitions/gs/properties/plot_legend`


.. _config.schema.json#/definitions/gs/properties/alpha:

alpha
#####

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/gs/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/gs/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/h2pc:

h2pc
++++

.. container:: title

 H2PC algorithm

H2PC algorithm instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/h2pc/properties/id`, :ref:`config.schema.json#/definitions/h2pc/properties/plot_legend`, :ref:`config.schema.json#/definitions/h2pc/properties/restrict.args`

**Properties:** :ref:`config.schema.json#/definitions/h2pc/properties/id`, :ref:`config.schema.json#/definitions/h2pc/properties/plot_legend`, :ref:`config.schema.json#/definitions/h2pc/properties/restrict.args`


.. _config.schema.json#/definitions/h2pc/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/h2pc/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/h2pc/properties/restrict.args:

restrict
########

.. container:: title

 Paramters for h2pc

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/h2pc/properties/restrict.args/properties/alpha`

**Properties:** :ref:`config.schema.json#/definitions/h2pc/properties/restrict.args/properties/alpha`


.. _config.schema.json#/definitions/h2pc/properties/restrict.args/properties/alpha:

alpha
>>>>>

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/hc:

hc
++

.. container:: title

 HC algorithm (parameter setting)

HC algorithm instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/hc/properties/id`, :ref:`config.schema.json#/definitions/hc/properties/plot_legend`, :ref:`config.schema.json#/definitions/hc/properties/beta`, :ref:`config.schema.json#/definitions/hc/properties/score`, :ref:`config.schema.json#/definitions/hc/properties/iss`, :ref:`config.schema.json#/definitions/hc/properties/iss.mu`, :ref:`config.schema.json#/definitions/hc/properties/l`, :ref:`config.schema.json#/definitions/hc/properties/k`, :ref:`config.schema.json#/definitions/hc/properties/prior`, :ref:`config.schema.json#/definitions/hc/properties/perturb`, :ref:`config.schema.json#/definitions/hc/properties/restart`

**Properties:** :ref:`config.schema.json#/definitions/hc/properties/beta`, :ref:`config.schema.json#/definitions/hc/properties/id`, :ref:`config.schema.json#/definitions/hc/properties/iss`, :ref:`config.schema.json#/definitions/hc/properties/iss.mu`, :ref:`config.schema.json#/definitions/hc/properties/k`, :ref:`config.schema.json#/definitions/hc/properties/l`, :ref:`config.schema.json#/definitions/hc/properties/perturb`, :ref:`config.schema.json#/definitions/hc/properties/plot_legend`, :ref:`config.schema.json#/definitions/hc/properties/prior`, :ref:`config.schema.json#/definitions/hc/properties/restart`, :ref:`config.schema.json#/definitions/hc/properties/score`


.. _config.schema.json#/definitions/hc/properties/beta:

beta
####

:Reference: :ref:`flexnonnegnum#/`


.. _config.schema.json#/definitions/hc/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/hc/properties/iss:

iss
###

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/hc/properties/iss.mu:

iss
###

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/hc/properties/k:

k
#

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/hc/properties/l:

l
#

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/hc/properties/perturb:

perturb
#######

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/hc/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/hc/properties/prior:

prior
#####

:type: ``string``


.. _config.schema.json#/definitions/hc/properties/restart:

restart
#######

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/hc/properties/score:

score
#####

:type: ``string``


.. _config.schema.json#/definitions/interiamb:

interiamb
+++++++++

.. container:: title

 Inter-IAMB algorithm

Inter-IAMB algorithm instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/interiamb/properties/id`, :ref:`config.schema.json#/definitions/interiamb/properties/plot_legend`, :ref:`config.schema.json#/definitions/interiamb/properties/alpha`

**Properties:** :ref:`config.schema.json#/definitions/interiamb/properties/alpha`, :ref:`config.schema.json#/definitions/interiamb/properties/id`, :ref:`config.schema.json#/definitions/interiamb/properties/plot_legend`


.. _config.schema.json#/definitions/interiamb/properties/alpha:

alpha
#####

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/interiamb/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/interiamb/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/itsearch:

itsearch
++++++++

.. container:: title

 Iterative search (paramter setting)

Iterative search +1 algorithm instance

:type: ``object``

**Properties:** :ref:`config.schema.json#/definitions/itsearch/properties/id`, :ref:`config.schema.json#/definitions/itsearch/properties/optional`, :ref:`config.schema.json#/definitions/itsearch/properties/plot_legend`


.. _config.schema.json#/definitions/itsearch/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/itsearch/properties/optional:

optional
########

.. container:: title

 Parameters for itsearch

Algorithm parameters to show in plotting

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/MAP`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/plus1it`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/posterior`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/scoretype`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/chi`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/edgepf`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/am`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/aw`

**Properties:** :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/MAP`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/am`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/aw`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/chi`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/edgepf`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/plus1it`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/posterior`, :ref:`config.schema.json#/definitions/itsearch/properties/optional/properties/scoretype`


.. _config.schema.json#/definitions/itsearch/properties/optional/properties/MAP:

MAP
>>>

:type: ``boolean``


.. _config.schema.json#/definitions/itsearch/properties/optional/properties/am:

am
>>

:Reference: :ref:`flexnonnegnumnull#/`


.. _config.schema.json#/definitions/itsearch/properties/optional/properties/aw:

aw
>>

:Reference: :ref:`flexnonnegnumnull#/`


.. _config.schema.json#/definitions/itsearch/properties/optional/properties/chi:

chi
>>>

:Reference: :ref:`flexnonnegnumnull#/`


.. _config.schema.json#/definitions/itsearch/properties/optional/properties/edgepf:

edgepf
>>>>>>

:Reference: :ref:`flexnonnegnumnull#/`


.. _config.schema.json#/definitions/itsearch/properties/optional/properties/plus1it:

plus1it
>>>>>>>

:Reference: :ref:`flexnonnegintnull#/`


.. _config.schema.json#/definitions/itsearch/properties/optional/properties/posterior:

posterior
>>>>>>>>>

:Reference: :ref:`flexprobnull#/`


.. _config.schema.json#/definitions/itsearch/properties/optional/properties/scoretype:

scoretype
>>>>>>>>>

:type: ``string``


.. _config.schema.json#/definitions/itsearch/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/mmhc:

mmhc
++++

.. container:: title

 Max-min hill climbing algorithm (MMHC)

MMHC algorithm instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/mmhc/properties/id`, :ref:`config.schema.json#/definitions/mmhc/properties/plot_legend`, :ref:`config.schema.json#/definitions/mmhc/properties/restrict.args`

**Properties:** :ref:`config.schema.json#/definitions/mmhc/properties/id`, :ref:`config.schema.json#/definitions/mmhc/properties/plot_legend`, :ref:`config.schema.json#/definitions/mmhc/properties/restrict.args`


.. _config.schema.json#/definitions/mmhc/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/mmhc/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/mmhc/properties/restrict.args:

restrict
########

.. container:: title

 Parameters for mmhc

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/mmhc/properties/restrict.args/properties/alpha`

**Properties:** :ref:`config.schema.json#/definitions/mmhc/properties/restrict.args/properties/alpha`


.. _config.schema.json#/definitions/mmhc/properties/restrict.args/properties/alpha:

alpha
>>>>>

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/natnum:

natnum
++++++

.. container:: title

 Positive integer

Positive integer

:type: ``integer``

:minimum: ``1``


.. _config.schema.json#/definitions/nonnegint:

nonnegint
+++++++++

.. container:: title

 Non-negative integer

Non-negative integer, 0,1,2,...

:type: ``integer``

:minimum: ``0``


.. _config.schema.json#/definitions/nonnegnum:

nonnegnum
+++++++++

.. container:: title

 Non-negative number

Non-negative number

:type: ``number``

:minimum: ``0``


.. _config.schema.json#/definitions/notears:

notears
+++++++

.. container:: title

 Notears

Notears instantiation

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/notears/properties/id`, :ref:`config.schema.json#/definitions/notears/properties/plot_legend`, :ref:`config.schema.json#/definitions/notears/properties/min_rate_of_progress`, :ref:`config.schema.json#/definitions/notears/properties/penalty_growth_rate`, :ref:`config.schema.json#/definitions/notears/properties/optimation_accuracy`, :ref:`config.schema.json#/definitions/notears/properties/loss`, :ref:`config.schema.json#/definitions/notears/properties/loss_grad`

**Properties:** :ref:`config.schema.json#/definitions/notears/properties/id`, :ref:`config.schema.json#/definitions/notears/properties/loss`, :ref:`config.schema.json#/definitions/notears/properties/loss_grad`, :ref:`config.schema.json#/definitions/notears/properties/min_rate_of_progress`, :ref:`config.schema.json#/definitions/notears/properties/optimation_accuracy`, :ref:`config.schema.json#/definitions/notears/properties/penalty_growth_rate`, :ref:`config.schema.json#/definitions/notears/properties/plot_legend`


.. _config.schema.json#/definitions/notears/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/notears/properties/loss:

loss
####

:type: ``string``

**Allowed values:** 

- least_squares_loss
- least_squares_loss_cov


.. _config.schema.json#/definitions/notears/properties/loss_grad:

loss_grad
#########

:type: ``string``

**Allowed values:** 

- least_squares_loss_grad
- least_squares_loss_cov_grad


.. _config.schema.json#/definitions/notears/properties/min_rate_of_progress:

min_rate_of_progress
####################

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/notears/properties/optimation_accuracy:

optimation_accuracy
###################

:Reference: :ref:`flexnonnegnum#/`


.. _config.schema.json#/definitions/notears/properties/penalty_growth_rate:

penalty_growth_rate
###################

:Reference: :ref:`flexnonnegnum#/`


.. _config.schema.json#/definitions/notears/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/notears_dag_sampling:

notears_dag_sampling
++++++++++++++++++++

.. container:: title

 Notears DAG sampling

Graph sampling method provided by the notears package. 
 Documentation: https://github.com/jmoss20/notears

:Required: :ref:`config.schema.json#/definitions/notears_dag_sampling/properties/id`, :ref:`config.schema.json#/definitions/notears_dag_sampling/properties/num_nodes`, :ref:`config.schema.json#/definitions/notears_dag_sampling/properties/num_edges`

**Properties:** :ref:`config.schema.json#/definitions/notears_dag_sampling/properties/id`, :ref:`config.schema.json#/definitions/notears_dag_sampling/properties/num_edges`, :ref:`config.schema.json#/definitions/notears_dag_sampling/properties/num_nodes`


.. _config.schema.json#/definitions/notears_dag_sampling/properties/id:

id
##

.. container:: title

 ID

:type: ``string``


.. _config.schema.json#/definitions/notears_dag_sampling/properties/num_edges:

num_edges
#########

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/notears_dag_sampling/properties/num_nodes:

num_nodes
#########

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/notears_linear_gaussian_sampling:

notears_linear_gaussian_sampling
++++++++++++++++++++++++++++++++

.. container:: title

 Notears linear Gaussian sampling

Notears linear Gaussian sampling. This requires that the parameters are of type notears_parameters.

**Properties:** :ref:`config.schema.json#/definitions/notears_linear_gaussian_sampling/properties/id`, :ref:`config.schema.json#/definitions/notears_linear_gaussian_sampling/properties/mean`, :ref:`config.schema.json#/definitions/notears_linear_gaussian_sampling/properties/sample_sizes`, :ref:`config.schema.json#/definitions/notears_linear_gaussian_sampling/properties/variance`


.. _config.schema.json#/definitions/notears_linear_gaussian_sampling/properties/id:

id
##

.. container:: title

 ID

:type: ``string``


.. _config.schema.json#/definitions/notears_linear_gaussian_sampling/properties/mean:

mean
####

.. container:: title

 Mean

:type: ``number``


.. _config.schema.json#/definitions/notears_linear_gaussian_sampling/properties/sample_sizes:

sample_sizes
############

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/notears_linear_gaussian_sampling/properties/variance:

variance
########

.. container:: title

 Variance

:type: ``number``


.. _config.schema.json#/definitions/notears_parameters_sampling:

notears_parameters_sampling
+++++++++++++++++++++++++++

.. container:: title

 Notears parameter sampling for Gaissian Bayesian networks

Notears parameter sampling for Gaissian Bayesian networks. This requires that the adjaceny_matrix (graph) is of type notears_dag_sampling

**Properties:** :ref:`config.schema.json#/definitions/notears_parameters_sampling/properties/edge_coefficient_range_from`, :ref:`config.schema.json#/definitions/notears_parameters_sampling/properties/edge_coefficient_range_to`, :ref:`config.schema.json#/definitions/notears_parameters_sampling/properties/id`


.. _config.schema.json#/definitions/notears_parameters_sampling/properties/edge_coefficient_range_from:

edge_coefficient_range_from
###########################

:Reference: :ref:`nonnegnum#/`


.. _config.schema.json#/definitions/notears_parameters_sampling/properties/edge_coefficient_range_to:

edge_coefficient_range_to
#########################

:Reference: :ref:`nonnegnum#/`


.. _config.schema.json#/definitions/notears_parameters_sampling/properties/id:

id
##

.. container:: title

 ID

:type: ``string``


.. _config.schema.json#/definitions/order_mcmc:

order_mcmc
++++++++++

.. container:: title

 Order MCMC (paramter setting  )

Order MCMC algorithm instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/order_mcmc/properties/scoretype`, :ref:`config.schema.json#/definitions/order_mcmc/properties/chi`, :ref:`config.schema.json#/definitions/order_mcmc/properties/edgepf`, :ref:`config.schema.json#/definitions/order_mcmc/properties/am`, :ref:`config.schema.json#/definitions/order_mcmc/properties/aw`, :ref:`config.schema.json#/definitions/order_mcmc/properties/threshold`, :ref:`config.schema.json#/definitions/order_mcmc/properties/burnin`

**Properties:** :ref:`config.schema.json#/definitions/order_mcmc/properties/am`, :ref:`config.schema.json#/definitions/order_mcmc/properties/aw`, :ref:`config.schema.json#/definitions/order_mcmc/properties/burnin`, :ref:`config.schema.json#/definitions/order_mcmc/properties/chi`, :ref:`config.schema.json#/definitions/order_mcmc/properties/edgepf`, :ref:`config.schema.json#/definitions/order_mcmc/properties/id`, :ref:`config.schema.json#/definitions/order_mcmc/properties/optional`, :ref:`config.schema.json#/definitions/order_mcmc/properties/plot_legend`, :ref:`config.schema.json#/definitions/order_mcmc/properties/scoretype`, :ref:`config.schema.json#/definitions/order_mcmc/properties/startspace`, :ref:`config.schema.json#/definitions/order_mcmc/properties/threshold`


.. _config.schema.json#/definitions/order_mcmc/properties/am:

am
##

:Reference: :ref:`flexnonnegnumnull#/`


.. _config.schema.json#/definitions/order_mcmc/properties/aw:

aw
##

:Reference: :ref:`flexnonnegnumnull#/`


.. _config.schema.json#/definitions/order_mcmc/properties/burnin:

burnin
######

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/order_mcmc/properties/chi:

chi
###

:Reference: :ref:`flexnonnegnumnull#/`


.. _config.schema.json#/definitions/order_mcmc/properties/edgepf:

edgepf
######

:Reference: :ref:`flexnonnegnumnull#/`


.. _config.schema.json#/definitions/order_mcmc/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/order_mcmc/properties/optional:

optional
########

.. container:: title

 Parameters for order_mcmc

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/order_mcmc/properties/optional/properties/plus1`

**Properties:** :ref:`config.schema.json#/definitions/order_mcmc/properties/optional/properties/plus1`


.. _config.schema.json#/definitions/order_mcmc/properties/optional/properties/plus1:

plus1
>>>>>

:type: ``boolean``


.. _config.schema.json#/definitions/order_mcmc/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/order_mcmc/properties/scoretype:

scoretype
#########

:type: ``string``


.. _config.schema.json#/definitions/order_mcmc/properties/startspace:

startspace
##########

:type: ``string``


.. _config.schema.json#/definitions/order_mcmc/properties/threshold:

threshold
#########

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/pcalg:

pcalg
+++++

.. container:: title

 PC algorithm

PC algorithm instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/pcalg/properties/id`, :ref:`config.schema.json#/definitions/pcalg/properties/plot_legend`, :ref:`config.schema.json#/definitions/pcalg/properties/alpha`

**Properties:** :ref:`config.schema.json#/definitions/pcalg/properties/alpha`, :ref:`config.schema.json#/definitions/pcalg/properties/id`, :ref:`config.schema.json#/definitions/pcalg/properties/plot_legend`


.. _config.schema.json#/definitions/pcalg/properties/alpha:

alpha
#####

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/pcalg/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/pcalg/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/prob:

prob
++++

.. container:: title

 Probabaility

Number in the range [0,1].

:type: ``number``

:minimum: ``0``

:maximum: ``1``


.. _config.schema.json#/definitions/rfci:

rfci
++++

.. container:: title

 RFCI

RFCI instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/rfci/properties/id`, :ref:`config.schema.json#/definitions/rfci/properties/plot_legend`, :ref:`config.schema.json#/definitions/rfci/properties/alpha`, :ref:`config.schema.json#/definitions/rfci/properties/test`

**Properties:** :ref:`config.schema.json#/definitions/rfci/properties/alpha`, :ref:`config.schema.json#/definitions/rfci/properties/data-type`, :ref:`config.schema.json#/definitions/rfci/properties/id`, :ref:`config.schema.json#/definitions/rfci/properties/plot_legend`, :ref:`config.schema.json#/definitions/rfci/properties/test`


.. _config.schema.json#/definitions/rfci/properties/alpha:

alpha
#####

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/rfci/properties/data-type:

data-type
#########

:type: ``string``


.. _config.schema.json#/definitions/rfci/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/rfci/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/rfci/properties/test:

test
####

:type: ``string``


.. _config.schema.json#/definitions/roc_item:

roc_item
++++++++

.. container:: title

 ROC item

ROC item

:type: ``object``

**Properties:** :ref:`config.schema.json#/definitions/roc_item/properties/curve_variable`, :ref:`config.schema.json#/definitions/roc_item/properties/structure_learning_algorithm`


.. _config.schema.json#/definitions/roc_item/properties/curve_variable:

curve_variable
##############

.. container:: title

 Curve variable

The varying parameter in the roc curve. This must be one of the parameters for the actual algorithm.

May satisfy *any* of the following definitions:


.. _config.schema.json#/definitions/roc_item/properties/curve_variable/anyOf/1:

1
>

:type: ``number``


.. _config.schema.json#/definitions/roc_item/properties/curve_variable/anyOf/0:

Curve variable
>>>>>>>>>>>>>>

The varying parameter in the roc curve. This must be one of the parameters for the actual algorithm.

:type: ``string``


.. _config.schema.json#/definitions/roc_item/properties/curve_variable/anyOf/0/title:





.. _config.schema.json#/definitions/roc_item/properties/structure_learning_algorithm:

structure_learning_algorithm
############################

:type: ``string``


.. _config.schema.json#/definitions/standard_sampling:

standard_sampling
+++++++++++++++++

.. container:: title

 Standard sampling

Data sampling from disctete Bayesian network.

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/standard_sampling/properties/id`, :ref:`config.schema.json#/definitions/standard_sampling/properties/sample_sizes`

**Properties:** :ref:`config.schema.json#/definitions/standard_sampling/properties/id`, :ref:`config.schema.json#/definitions/standard_sampling/properties/sample_sizes`


.. _config.schema.json#/definitions/standard_sampling/properties/id:

id
##

.. container:: title

 Unique ID

:type: ``string``


.. _config.schema.json#/definitions/standard_sampling/properties/sample_sizes:

sample_sizes
############

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/tabu:

tabu
++++

.. container:: title

 TABU search (parameter setting)

TABU algorithm instance

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/tabu/properties/id`, :ref:`config.schema.json#/definitions/tabu/properties/plot_legend`, :ref:`config.schema.json#/definitions/tabu/properties/beta`, :ref:`config.schema.json#/definitions/tabu/properties/score`, :ref:`config.schema.json#/definitions/tabu/properties/iss`, :ref:`config.schema.json#/definitions/tabu/properties/iss.mu`, :ref:`config.schema.json#/definitions/tabu/properties/l`, :ref:`config.schema.json#/definitions/tabu/properties/k`, :ref:`config.schema.json#/definitions/tabu/properties/prior`

**Properties:** :ref:`config.schema.json#/definitions/tabu/properties/beta`, :ref:`config.schema.json#/definitions/tabu/properties/id`, :ref:`config.schema.json#/definitions/tabu/properties/iss`, :ref:`config.schema.json#/definitions/tabu/properties/iss.mu`, :ref:`config.schema.json#/definitions/tabu/properties/k`, :ref:`config.schema.json#/definitions/tabu/properties/l`, :ref:`config.schema.json#/definitions/tabu/properties/plot_legend`, :ref:`config.schema.json#/definitions/tabu/properties/prior`, :ref:`config.schema.json#/definitions/tabu/properties/score`


.. _config.schema.json#/definitions/tabu/properties/beta:

beta
####

:Reference: :ref:`flexnonnegnum#/`


.. _config.schema.json#/definitions/tabu/properties/id:

id
##

Unique idenfifier

:type: ``string``


.. _config.schema.json#/definitions/tabu/properties/iss:

iss
###

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/tabu/properties/iss.mu:

iss
###

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/tabu/properties/k:

k
#

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/tabu/properties/l:

l
#

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/tabu/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/tabu/properties/prior:

prior
#####

:type: ``string``


.. _config.schema.json#/definitions/tabu/properties/score:

score
#####

:type: ``string``


.. _config.schema.json#/definitions/trilearn_loglin:

trilearn_loglin
+++++++++++++++

.. container:: title

 Trilearn

Parameter setting for trilearn with log-linear decomposable model.

:type: ``object``

:Required: :ref:`config.schema.json#/definitions/trilearn_loglin/properties/id`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/plot_legend`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/alpha`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/beta`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/radii`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/N`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/M`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/pseudo_obs`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/burnin`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/threshold`

**Properties:** :ref:`config.schema.json#/definitions/trilearn_loglin/properties/M`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/N`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/alpha`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/beta`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/burnin`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/id`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/plot_legend`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/pseudo_obs`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/radii`, :ref:`config.schema.json#/definitions/trilearn_loglin/properties/threshold`


.. _config.schema.json#/definitions/trilearn_loglin/properties/M:

M
#

:Reference: :ref:`flexnatnum#/`


.. _config.schema.json#/definitions/trilearn_loglin/properties/N:

N
#

:Reference: :ref:`flexnatnum#/`


.. _config.schema.json#/definitions/trilearn_loglin/properties/alpha:

alpha
#####

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/trilearn_loglin/properties/beta:

beta
####

:Reference: :ref:`flexprob#/`


.. _config.schema.json#/definitions/trilearn_loglin/properties/burnin:

burnin
######

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/trilearn_loglin/properties/id:

id
##

:type: ``string``

:desciption: ``Algorithm identifier``


.. _config.schema.json#/definitions/trilearn_loglin/properties/plot_legend:

plot_legend
###########

Legend to show in plotting

:type: ``string``


.. _config.schema.json#/definitions/trilearn_loglin/properties/pseudo_obs:

pseudo_obs
##########

:Reference: :ref:`flexnonnegnum#/`


.. _config.schema.json#/definitions/trilearn_loglin/properties/radii:

radii
#####

:Reference: :ref:`flexnonnegint#/`


.. _config.schema.json#/definitions/trilearn_loglin/properties/threshold:

threshold
#########

:Reference: :ref:`flexprob#/`

**Properties:** :ref:`config.schema.json#/properties/benchmark_setup`, :ref:`config.schema.json#/properties/data_sampling_algorithms`, :ref:`config.schema.json#/properties/graph_sampling_algorithms`, :ref:`config.schema.json#/properties/output_dir`, :ref:`config.schema.json#/properties/parameters_sampling_algorithms`, :ref:`config.schema.json#/properties/structure_learning_algorithms`


.. _config.schema.json#/properties/benchmark_setup:

benchmark_setup
+++++++++++++++

.. container:: title

 Benchmark setup

Description of the benchmarking setup.

:type: ``object``

:Required: :ref:`config.schema.json#/properties/benchmark_setup/properties/structure_learning_algorithms`, :ref:`config.schema.json#/properties/benchmark_setup/properties/data`, :ref:`config.schema.json#/properties/benchmark_setup/properties/evaluation`

**Properties:** :ref:`config.schema.json#/properties/benchmark_setup/properties/data`, :ref:`config.schema.json#/properties/benchmark_setup/properties/evaluation`, :ref:`config.schema.json#/properties/benchmark_setup/properties/structure_learning_algorithms`


.. _config.schema.json#/properties/benchmark_setup/properties/data:

data
####

.. container:: title

 Data setup

A list of data setup instantiations.

:type: ``array``

.. container:: sub-title

 Every element of **data**  is:

:Reference: :ref:`data_setup_dict#/`


.. _config.schema.json#/properties/benchmark_setup/properties/evaluation:

evaluation
##########

.. container:: title

 Evaluation methods

:Required: :ref:`config.schema.json#/properties/benchmark_setup/properties/evaluation/properties/ROC`

**Properties:** :ref:`config.schema.json#/properties/benchmark_setup/properties/evaluation/properties/ROC`


.. _config.schema.json#/properties/benchmark_setup/properties/evaluation/properties/ROC:

ROC
>>>

.. container:: title

 ROC

Algorithm id's for ROC evaluation.

:type: ``array``

.. container:: sub-title

 Every element of **ROC**  is:

:Reference: :ref:`roc_item#/`


.. _config.schema.json#/properties/benchmark_setup/properties/structure_learning_algorithms:

structure_learning_algorithms
#############################

.. container:: title

 Structure learning algorithms

A list of id's for structure learning algorithm instantiations.

:type: ``array``


.. _config.schema.json#/properties/data_sampling_algorithms:

data_sampling_algorithms
++++++++++++++++++++++++

.. container:: title

 Data sampling algorithms

Data sampling setup.

:type: ``object``

**Properties:** :ref:`config.schema.json#/properties/data_sampling_algorithms/properties/fixed_data`, :ref:`config.schema.json#/properties/data_sampling_algorithms/properties/notears_linear_gaussian_sampling`, :ref:`config.schema.json#/properties/data_sampling_algorithms/properties/standard_sampling`


.. _config.schema.json#/properties/data_sampling_algorithms/properties/fixed_data:

fixed_data
##########

.. container:: title

 List of fixed_data id's

List of fixed_data id's

:type: ``array``

.. container:: sub-title

 Every element of **fixed_data**  is:

:Reference: :ref:`fixed_data#/`


.. _config.schema.json#/properties/data_sampling_algorithms/properties/notears_linear_gaussian_sampling:

notears_linear_gaussian_sampling
################################

.. container:: title

 List of settings for notears_linear_gaussian_sampling

List of settings for notears_linear_gaussian_sampling

:type: ``array``

.. container:: sub-title

 Every element of **notears_linear_gaussian_sampling**  is:

:Reference: :ref:`notears_linear_gaussian_sampling#/`


.. _config.schema.json#/properties/data_sampling_algorithms/properties/standard_sampling:

standard_sampling
#################

.. container:: title

 List of standard_sampling setups.

List of standard_sampling setups.

:type: ``array``

.. container:: sub-title

 Every element of **standard_sampling**  is:

:Reference: :ref:`standard_sampling#/`


.. _config.schema.json#/properties/graph_sampling_algorithms:

graph_sampling_algorithms
+++++++++++++++++++++++++

.. container:: title

 Graph sampling algorithms

The available graph samplings algorithms.

:type: ``object``

**Properties:** :ref:`config.schema.json#/properties/graph_sampling_algorithms/properties/fixed_adjmats`, :ref:`config.schema.json#/properties/graph_sampling_algorithms/properties/generateDAGMaxParents`, :ref:`config.schema.json#/properties/graph_sampling_algorithms/properties/notears`


.. _config.schema.json#/properties/graph_sampling_algorithms/properties/fixed_adjmats:

fixed_adjmats
#############

.. container:: title

 List of fixed adjmat id's

List of fixed adjmat id's

:type: ``array``

.. container:: sub-title

 Every element of **fixed_adjmats**  is:

:Reference: :ref:`fixed_adjmats#/`


.. _config.schema.json#/properties/graph_sampling_algorithms/properties/generateDAGMaxParents:

generateDAGMaxParents
#####################

.. container:: title

 List of generateDAGMaxParents instatiations

List of generateDAGMaxParents instatiations

:type: ``array``

.. container:: sub-title

 Every element of **generateDAGMaxParents**  is:

:Reference: :ref:`generateDAGMaxParents#/`


.. _config.schema.json#/properties/graph_sampling_algorithms/properties/notears:

notears
#######

.. container:: title

 Notears DAG sampling id's

:type: ``array``

.. container:: sub-title

 Every element of **notears**  is:

:Reference: :ref:`notears_dag_sampling#/`


.. _config.schema.json#/properties/output_dir:

output_dir
++++++++++

.. container:: title

 Output directory

Directory for the generated files.

:type: ``string``


.. _config.schema.json#/properties/parameters_sampling_algorithms:

parameters_sampling_algorithms
++++++++++++++++++++++++++++++

.. container:: title

 Parameters sampling algorithm

The available parameter sampling algorithms

:type: ``object``

**Properties:** :ref:`config.schema.json#/properties/parameters_sampling_algorithms/properties/bn.fit_networks`, :ref:`config.schema.json#/properties/parameters_sampling_algorithms/properties/generateBinaryBN`, :ref:`config.schema.json#/properties/parameters_sampling_algorithms/properties/notears_parameters_sampling`


.. _config.schema.json#/properties/parameters_sampling_algorithms/properties/bn.fit_networks:

bn
##

.. container:: title

 List of bn.fit_network id's

List of bn.fit_network id's

:type: ``array``

.. container:: sub-title

 Every element of **bn.fit_networks**  is:

:Reference: :ref:`bn.fit_networks#/`


.. _config.schema.json#/properties/parameters_sampling_algorithms/properties/generateBinaryBN:

generateBinaryBN
################

List of generateBinayBN instatiations

:type: ``array``

.. container:: sub-title

 Every element of **generateBinaryBN**  is:

:Reference: :ref:`generateBinaryBN#/`


.. _config.schema.json#/properties/parameters_sampling_algorithms/properties/notears_parameters_sampling:

notears_parameters_sampling
###########################

.. container:: title

 List of notears id's

List of notears id's

:type: ``array``

.. container:: sub-title

 Every element of **notears_parameters_sampling**  is:

:Reference: :ref:`notears_parameters_sampling#/`


.. _config.schema.json#/properties/structure_learning_algorithms:

structure_learning_algorithms
+++++++++++++++++++++++++++++

.. container:: title

 Available structure learning algorithms

The available structure learning algorithms

:type: ``object``

**Properties:** :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/blip`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/fci`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/fges`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/gfci`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/gobnilp`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/greenthomas`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/gs`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/h2pc`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/hc`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/interiamb`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/itsearch`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/mmhc`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/notears`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/order_mcmc`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/pcalg`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/rfci`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/tabu`, :ref:`config.schema.json#/properties/structure_learning_algorithms/properties/trilearn_loglin`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/blip:

blip
####

.. container:: title

 List of blip instatiations

List of blip instatiations

:type: ``array``

.. container:: sub-title

 Every element of **blip**  is:

:Reference: :ref:`blip#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/fci:

fci
###

.. container:: title

 FCI instatiations

FCI instatiations

:type: ``array``

.. container:: sub-title

 Every element of **fci**  is:

:Reference: :ref:`fci#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/fges:

fges
####

.. container:: title

 fGES instatiations

fGES instatiations

:type: ``array``

.. container:: sub-title

 Every element of **fges**  is:

:Reference: :ref:`fges#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/gfci:

gfci
####

.. container:: title

 GFCI instatiations

GFCI instatiations

:type: ``array``

.. container:: sub-title

 Every element of **gfci**  is:

:Reference: :ref:`gfci#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/gobnilp:

gobnilp
#######

.. container:: title

 Gobnilp instatiations

Gobnilp instatiations

:type: ``array``

.. container:: sub-title

 Every element of **gobnilp**  is:

:Reference: :ref:`gobnilp#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/greenthomas:

greenthomas
###########

.. container:: title

 Green & Thomas id's

Green & Thomas instatiations

:type: ``array``

.. container:: sub-title

 Every element of **greenthomas**  is:

:Reference: :ref:`greenthomas#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/gs:

gs
##

.. container:: title

 GS instatiations

GS instatiations

:type: ``array``

.. container:: sub-title

 Every element of **gs**  is:

:Reference: :ref:`interiamb#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/h2pc:

h2pc
####

.. container:: title

 H2PC id's

H2PC instatiations

:type: ``array``

.. container:: sub-title

 Every element of **h2pc**  is:

:Reference: :ref:`h2pc#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/hc:

hc
##

.. container:: title

 HC instatiations

HC instatiations

:type: ``array``

.. container:: sub-title

 Every element of **hc**  is:

:Reference: :ref:`hc#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/interiamb:

interiamb
#########

.. container:: title

 Inter-IAMB instatiations

Inter-IAMB instatiations

:type: ``array``

.. container:: sub-title

 Every element of **interiamb**  is:

:Reference: :ref:`interiamb#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/itsearch:

itsearch
########

.. container:: title

 Iterative +1 search instatiations

Iterative +1 search instatiations

:type: ``array``

.. container:: sub-title

 Every element of **itsearch**  is:

:Reference: :ref:`itsearch#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/mmhc:

mmhc
####

.. container:: title

 MMHC instatiations

MMHC instatiations

:type: ``array``

.. container:: sub-title

 Every element of **mmhc**  is:

:Reference: :ref:`mmhc#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/notears:

notears
#######

.. container:: title

 Notears instatiations

Notears instatiations

:type: ``array``

.. container:: sub-title

 Every element of **notears**  is:

:Reference: :ref:`notears#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/order_mcmc:

order_mcmc
##########

.. container:: title

 Order MCMC instatiations

Order MCMC instatiations

:type: ``array``

.. container:: sub-title

 Every element of **order_mcmc**  is:

:Reference: :ref:`order_mcmc#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/pcalg:

pcalg
#####

.. container:: title

 PC algorithm instatiations

PC algorithm instatiations

:type: ``array``

.. container:: sub-title

 Every element of **pcalg**  is:

:Reference: :ref:`pcalg#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/rfci:

rfci
####

.. container:: title

 RFCI instatiations

RFCI instatiations

:type: ``array``

.. container:: sub-title

 Every element of **rfci**  is:

:Reference: :ref:`rfci#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/tabu:

tabu
####

.. container:: title

 Tabu search instatiations

Tabu search instatiations

:type: ``array``

.. container:: sub-title

 Every element of **tabu**  is:

:Reference: :ref:`tabu#/`


.. _config.schema.json#/properties/structure_learning_algorithms/properties/trilearn_loglin:

trilearn_loglin
###############

.. container:: title

 List of trilearn_loglin instatiations

List of trilearn_loglin instatiations

:type: ``array``

.. container:: sub-title

 Every element of **trilearn_loglin**  is:

:Reference: :ref:`trilearn_loglin#/`
