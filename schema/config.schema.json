{ 
    "title": "JSON schema for BenchPress config file.",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$id": "http://github.com/felixleopoldo/benchpress/schema/config.schema.json",
    "type": "object",
    "properties":{
        "output_dir": {
            "title": "Output directory",
            "description": "Directory for the generated files.",
            "type": "string"
        },
        "benchmark_setup":{
            "title": "Benchmark setup",
            "description": "Description of the benchmarking setup.",
            "type": "object",
            "properties": {
                "structure_learning_algorithms": {
                    "title":"Structure learning algorithms",
                    "description": "A list of id's for structure learning algorithm instantiations.",
                    "type":"array",
                    "uniqueItems": true
                },
                "data": {
                    "title": "Data setup",
                    "description": "A list of data setup instantiations.",
                    "type":"array",
                    "items":{
                        "$ref": "#/definitions/data_setup_dict"
                    },
                    "uniqueItems": true
                },
                "evaluation":{
                    "title":"Evaluation methods",
                    "properties": {
                        "ROC":{
                            "title": "ROC",
                            "description": "Algorithm id's for ROC evaluation.",
                            "type":"array",
                            "items": {
                                "$ref": "#/definitions/roc_item"
                            },
                            "uniqueItems": true               
                        }
                    },
                    "required": ["ROC"],
                    "additionalProperties": false
                }
            },
            "required": ["structure_learning_algorithms", "data", "evaluation"],
            "additionalProperties": false
        },
        "data_sampling_algorithms":{
            "title": "Data sampling algorithms",
            "description": "Data sampling setup.",
            "type":"object",
            "properties": {
                "standard_sampling":{
                    "title": "List of standard_sampling setups.",
                    "description": "List of standard_sampling setups.",
                    "type":"array",
                    "items":{
                        "$ref": "#/definitions/standard_sampling"
                    },
                    "uniqueItems": true
                },
                "notears_linear_gaussian_sampling":{
                    "title": "List of settings for notears_linear_gaussian_sampling",
                    "description": "List of settings for notears_linear_gaussian_sampling",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/notears_linear_gaussian_sampling"
                    },
                    "uniqueItems": true
                },
                "fixed_data":{
                    "title":"List of fixed_data id's",
                    "description":"List of fixed_data id's",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/fixed_data"
                    },
                    "uniqueItems": true
                }
            },
            "additionalProperties": false
            
        },
        "graph_sampling_algorithms":{
            "title": "Graph sampling algorithms",
            "description": "The available graph samplings algorithms.",
            "type":"object",
            "properties": {
                "generateDAGMaxParents":{
                    "title": "List of generateDAGMaxParents instatiations",
                    "description": "List of generateDAGMaxParents instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/generateDAGMaxParents"
                    },
                    "uniqueItems": true
                },
                "notears":{
                    "title": "Notears DAG sampling id's",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notears_dag_sampling"
                    },
                    "uniqueItems": true
                },
                "fixed_adjmats":{
                    "title": "List of fixed adjmat id's",
                    "description": "List of fixed adjmat id's",
                    "type":"array",
                    "items": {  
                        "$ref": "#/definitions/fixed_adjmats"
                    },
                    "uniqueItems": true
                }
            },
            "additionalProperties": false
        },
        "parameters_sampling_algorithms":{
            "title": "Parameters sampling algorithm",
            "description": "The available parameter sampling algorithms",
            "type": "object",
            "properties": {
                "generateBinaryBN":{
                    "description": "List of generateBinayBN instatiations",
                    "type":"array",
                    "items":{
                        "$ref": "#/definitions/generateBinaryBN"
                    },
                    "uniqueItems": true
                },
                "bn.fit_networks":{
                    "title": "List of bn.fit_network id's",
                    "description": "List of bn.fit_network id's",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/bn.fit_networks"
                    },
                    "uniqueItems": true
                },
                "notears_parameters_sampling":{
                    "title": "List of notears id's",
                    "description": "List of notears id's",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/notears_parameters_sampling"
                    },
                    "uniqueItems": true
                }
            },
            "additionalProperties": false
        },
        "structure_learning_algorithms":{
            "title": "Available structure learning algorithms",
            "description": "The available structure learning algorithms",
            "type":"object",
            "properties": {
                "trilearn_loglin":{
                    "title": "List of trilearn_loglin instatiations",
                    "description": "List of trilearn_loglin instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/trilearn_loglin"
                    },
                    "uniqueItems": true
                },
                "blip":{
                    "title": "List of blip instatiations",
                    "description": "List of blip instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/blip"
                    }
                },
                "notears":{
                    "title": "Notears instatiations",
                    "description": "Notears instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/notears"
                    }
                },
                "gobnilp":{
                    "title": "Gobnilp instatiations",
                    "description": "Gobnilp instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/gobnilp"
                    }
                },
                "fges":{
                    "title": "fGES instatiations",
                    "description": "fGES instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/fges"
                    }
                },
                "fci":{
                    "description": "FCI instatiations",
                    "title": "FCI instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/fci"
                    }
                },
                "rfci":{
                    "description": "RFCI instatiations",
                    "title": "RFCI instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/rfci"
                    }
                },
                "gfci":{
                    "description": "GFCI instatiations",
                    "title": "GFCI instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/gfci"
                    }
                },

                "pcalg":{
                    "description": "PC algorithm instatiations",
                    "title": "PC algorithm instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/pcalg"
                    }
                },
                "mmhc":{
                    "description": "MMHC instatiations",
                    "title": "MMHC instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/mmhc"
                    }
                },
                "tabu":{
                    "description": "Tabu search instatiations",
                    "title": "Tabu search instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/tabu"
                    }
                },
                "itsearch":{
                    "description": "Iterative +1 search instatiations",
                    "title": "Iterative +1 search instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/itsearch"
                    }
                },
                "order_mcmc":{
                    "description": "Order MCMC instatiations",
                    "title": "Order MCMC instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/order_mcmc"
                    }
                },
                "interiamb":{
                    "description": "Inter-IAMB instatiations",
                    "title": "Inter-IAMB instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/interiamb"
                    }
                },
                "gs":{
                    "description": "GS instatiations",
                    "title": "GS instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/interiamb"
                    }
                },
                "hc":{
                    "description": "HC instatiations",
                    "title": "HC instatiations",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/hc"
                    }
                },
                "h2pc":{
                    "description": "H2PC instatiations",
                    "title": "H2PC id's",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/h2pc"
                    }
                },
                "greenthomas":{
                    "description": "Green & Thomas instatiations",
                    "title": "Green & Thomas id's",
                    "type":"array",
                    "items": {
                        "$ref": "#/definitions/greenthomas"
                    }
                }
            },
            "additionalProperties": false

        }     
    },
    "required": ["output_dir", 
                "benchmark_setup", 
                "graph_sampling_algorithms",
                "parameters_sampling_algorithms",
                "structure_learning_algorithms"],
    "definitions":{
        "notears_parameters_sampling":{
            "title": "Notears parameter sampling for Gaissian Bayesian networks",
            "description": "Notears parameter sampling for Gaissian Bayesian networks. This requires that the adjaceny_matrix (graph) is of type notears_dag_sampling",
            "properties": {
                "id":{
                    "title": "ID",
                    "type":"string"
                },
                "edge_coefficient_range_from":{
                    "$ref": "#/definitions/nonnegnum"
                },
                "edge_coefficient_range_to":{
                    "$ref": "#/definitions/nonnegnum"
                }
            }
        },
        "bn.fit_networks":{
            "title":"Bn.fit network file",
            "description": "Bayesian network in bn.fit type serialised as .rds file.",
            "properties": {
                "id":{
                    "title": "ID",
                    "type":"string"
                },
                "filename":{
                    "title": "ID",
                    "type":"string"
                },
                "source":{
                    "title": "Source",
                    "type": "string"
                }
            },
            "required": ["id","filename","source"],
            "additionalProperties": false
        },
        "notears_linear_gaussian_sampling":{
            "title": "Notears linear Gaussian sampling",
            "description": "Notears linear Gaussian sampling. This requires that the parameters are of type notears_parameters.",
            "properties": {
                "id":{
                    "title": "ID",
                    "type":"string"
                },
                "sample_sizes":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "mean":{
                    "title": "Mean",
                    "type":"number"
                },
                "variance":{
                    "title": "Variance",
                    "type":"number"
                }
            },
            "additionalProperties": false
        },
        "fixed_data":{
            "title": "Data file",
            "description": "Data file in csv format separated by empy space ' '. The firs row must have the variable names. For categorical data, the second row shold contain the possible values for the specific variable.",
            "properties": {
                "id":{
                    "title": "ID",
                    "type":"string"
                },
                "filename":{
                    "title": "Data filename",
                    "type":"string"
                },
                "graph":{
                    "title":"Underlying graph id",
                    "type":"string"                
                },
                "source":{
                    "title": "Data source",
                    "type":"string"
                },
                "datatype":{
                    "title": "Data type",
                    "enum": ["continuous", "binary", "categorical"]
                },
                "samples":{
                    "$ref": "#/definitions/nonnegint"
                }
            },
            "additionalProperties": false
        },
        "fixed_adjmats":{
            "title": "Fixed adjacenty matrix of a graph",
            "description": "Fixed adjacenty matrix of a graph. Must be in .csv format with , as separator. First row should contain names for th nodes.",
            "properties": {
                "id":{
                    "title": "ID",
                    "type": "string"
                },
                "filename":{
                    "title": "Filename of the csv file.",
                    "type": "string"
                },
                "source":{
                    "title": "Source of the adjacency matrix",
                    "type": "string"
                }
            },
            "required": ["id", "filename", "source"],
            "additionalProperties": false
        },
        "notears_dag_sampling":{
            "title": "Notears DAG sampling",
            "description": "Graph sampling method provided by the notears package. \n Documentation: https://github.com/jmoss20/notears",
            "properties": {
                "id":{
                    "title": "ID",
                    "type": "string"
                },
                "num_nodes":{
                    "$ref": "#definitions/flexnonnegint"
                },
                "num_edges":{
                    "$ref": "#definitions/flexnonnegint"
                }
            },
            "required": ["id", "num_nodes", "num_edges"],
            "additionalProperties": false
        },
        "roc_item":{
            "title": "ROC item",
            "description": "ROC item",
            "type":"object",
            "properties": {
                "structure_learning_algorithm":{
                    "type":"string"
                },
                "curve_variable":{
                    "title":"Curve variable",
                    "description": "The varying parameter in the roc curve. This must be one of the parameters for the actual algorithm.",
                    "anyOf": [{
                                "title":"Curve variable",
                                "description": "The varying parameter in the roc curve. This must be one of the parameters for the actual algorithm.",
                                "type":"string"},
                              {"type":"number"}]
                }
            }
        },
        "data_setup_dict":{
            "type":"object",
            "title": "Data setup",
            "description": "Description of the data model and sampling setup. Make sure that the id's are properly combined.",
            "properties": {
                "graph":{
                    "title": "Graph",
                    "description":"ID of the graph instantiation.",
                    "type":"string"
                },
                "parameters": {
                    "title": "Parameters",
                    "description": "Parameters ID.",
                    "anyOf":[{"type":"string"}, {"type":"null"}]
                },
                "data": {
                    "title": "Data",
                    "description": "Data sampling method ID.",
                    "type":"string"
                },
                "seed_range" :{
                    "title": "Seed range",
                    "description": "This data setup will be simulated for this range of seeds. E.g. seed_range:[1,3] will generate 3 datsets (and corresponding models) with seeds 1,2,3.",
                    "anyOf": [
                                {"title": "List of 2 integers [a, b], where a<=b.",
                                "type": "array",
                                 "items": {
                                            "type":"integer"
                                          },
                                 "maxLength": 2,
                                 "minLength":2
                                }, 
                                {"type":"null"}]
                }
            },
            "required": ["graph", "parameters", "data", "seed_range"],
            "additionalProperties": false
        },
        "standard_sampling":{
            "title": "Standard sampling",
            "description": "Data sampling from disctete Bayesian network.",
            "type": "object",
            "properties": {
                "id": {
                    "title": "Unique ID",
                    "type": "string"
                },
                "sample_sizes":{
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": ["id","sample_sizes"],
            "additionalProperties": false
        },
        "generateDAGMaxParents":{
            "title": "generateDAGMaxParents",
            "description": "An instance of generateDAGMaxParents. Sampling of a DAG with specified maximum averge number for parents for the nodes.",
            "type":"object",
            "properties": {
                "id":{
                    "type":"string"
                },
                "av_parents":{   
                    "$ref": "#/definitions/flexnonnegint"                    
                },
                "dims":{
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "required": ["av_parents", "dims", "id"],
            "additionalProperties": false            
        },
        "generateBinaryBN":{
            "title": "generateBinaryBN",
            "description": "Parameter setting for generateBinaryBN",
            "type":"object",
            "properties": {
                "id":{
                    "type":"string"
                },
                "min":{
                    "$ref": "#/definitions/flexprob"
                },
                "max":{
                    "$ref": "#/definitions/flexprob"
                }
            },
            "required": ["min", "max", "id"],
            "additionalProperties": false
        },
        "prob":{
            "title": "Probabaility",
            "description": "Number in the range [0,1].",
            "type":"number",
            "minimum": 0,
            "maximum": 1
        },
        "natnum":{
            "title": "Positive integer",
            "description": "Positive integer",
            "type":"integer",
            "minimum": 1
        },
        "nonnegint":{
            "title": "Non-negative integer",
            "description": "Non-negative integer, 0,1,2,...",
            "type":"integer",
            "minimum": 0
        },
        "nonnegnum":{
            "title":"Non-negative number",
            "description": "Non-negative number",
            "type":"number",
            "minimum": 0
        },
        "flexnonnegnum":{
            "description": "Non-negative number(s).",
            "anyOf":[{"$ref": "#/definitions/nonnegnum"},
                     {"type":"array",
                      "title":"Non-negative number list",
                      "description":"List of non-negative numbers",
                      "items": {"$ref": "#/definitions/nonnegnum"}
                    }]
        },
        "flexnonnegnumnull":{
            "title": "Non-negative number(s) or null",
            "description": "E.g. 1.5 or [1.6, 3.8] or null.",
            "anyOf":[{"$ref": "#/definitions/flexnonnegnum"},
                    {"type":"null"}]
        },
        "flexnonnegint":{
            "title": "Non-negative integer(s)",
            "description": "Non-negative integers, (0,1,2,...), or array of the same.",
            "anyOf":[{"$ref": "#/definitions/nonnegint"},
                     {"type":"array",
                      "title": "Non-negative integer list",
                      "items": {"$ref": "#/definitions/nonnegint"}
                    }]
        },
        "flexnonnegintnull":{
            "title": "Non-negative integer(s), or null.",
            "anyOf":[{"$ref": "#/definitions/flexnonnegint"},
                     {"type":"null"}]
        },
        "flexnatnum":{
            "title": "Non-negative integer(s)",
            "anyOf":[{"$ref": "#/definitions/natnum"},
                     {"title":"Positive integer list",
                      "type":"array",
                      "items": {"$ref": "#/definitions/natnum"}
                    }]
        },
        "flexnatnumnull":{
            "title": "Npn-negative integer or null",
            "anyOf":[{"$ref": "#/definitions/flexnatnum"},
                     {"type":"null"}]
        },
        "flexprob":{
            "title": "Number(s) in the range [0,1].",
            "anyOf":[{"$ref": "#/definitions/prob"},
                     {"type":"array",
                      "title": "Probability list",
                      "items": {"$ref": "#/definitions/prob"}
                    }]
        },
        "flexprobnull":{
            "title": "Number(s) in the range [0,1], or null.",
            "description": "Number(s) in the range [0,1], or null.",
            "anyOf":[{"$ref": "#/definitions/flexprob"},
                     {"type":"null"}]
        },
        "trilearn_loglin": {
            "title": "Trilearn",            
            "description": "Parameter setting for trilearn with log-linear decomposable model.",
            "type":"object",
            "properties": {
                "id": {
                    "desciption":"Algorithm identifier",
                    "type":"string"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "alpha": {
                    "$ref": "#/definitions/flexprob"          
                },
                "beta": {
                    "$ref": "#/definitions/flexprob"
                },
                "pseudo_obs": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "radii": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "N": {
                    "$ref": "#/definitions/flexnatnum"
                },
                "M": {
                    "$ref": "#/definitions/flexnatnum"
                },
                "burnin": {
                    "$ref": "#/definitions/flexnonnegint"
                },
                "threshold": {
                    "$ref": "#/definitions/flexprob"
                }
            },
            "required": ["id", "plot_legend", "alpha", "beta", "radii", "N", "M", "pseudo_obs", "burnin", "threshold"]
        },
        "blip":{
            "title": "Blip instantiation",
            "description": "Blip instantiation",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                        "title":"Unique idenfifier",
                       "description":"Unique idenfifier for that can be used as reference in the benchmark_setup."
                },
                "plot_legend": {
                    "title":"Legend",
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "scorer.method":{
                    "type":"string"
                },
                "solver.method":{
                    "type":"string"
                },
                "indeg":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "time": {
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "allocated":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "scorefunction":{
                    "type": "string"
                },
                "alpha":{
                    "$ref": "#/definitions/flexprob"
                },
                "cores":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "verbose":{
                    "$ref": "#/definitions/nonnegint"
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "scorer.method", "solver.method", "indeg",
                         "time", "allocated", "scorefunction", "alpha", "cores", "verbose"]
        },
        "notears":{
            "title": "Notears",
            "description": "Notears instantiation",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                       "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "min_rate_of_progress":{
                    "$ref": "#/definitions/flexprob"
                },
                "penalty_growth_rate":{
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "optimation_accuracy":{
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "loss":{
                    "type": "string",
                    "enum": ["least_squares_loss", "least_squares_loss_cov"]
                },
                "loss_grad": {
                    "type": "string",
                    "enum": ["least_squares_loss_grad", "least_squares_loss_cov_grad"]
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "min_rate_of_progress", "penalty_growth_rate",
                        "optimation_accuracy", "loss", "loss_grad"]
        },

        "gobnilp":{
            "title":"Gobnilp algorithm",
            "description": "Gobnilp instance",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "plot":{
                    "type":"boolean"
                },
                "palim":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "alpha":{
                    "$ref": "#/definitions/flexprob"
                },
                "prune":{
                    "type":"boolean"
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "plot","palim", "alpha", "prune"]
        },
        "greenthomas":{
            "title": "Green & Thomas algorithm for sampling from decomposable graph distributions",
            "description": "Green & Thomas algorithm for learning decomopasble graphs.\n Source: Green, P. J., & Thomas, A. (2013). Sampling decomposable graphs using a Markov chain on junction trees. Biometrika, 100(1), 91-110.",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                       "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "n_samples":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "penalty":{
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "randomits":{
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "n_samples","penalty", "randomits"]
        },
        "fges":{
            "title":"Fast greedy equivalent search (fGES)",
            "description": "fGES instance",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },

                "faithfulnessAssumed":{
                    "type":"boolean"
                },
                "score":{
                    "type": "string"
                },
                "data-type":{
                    "type":"string"
                }
            },
            "additionalProperties": false,
            "required": ["id","plot_legend", "faithfulnessAssumed", 
                         "score", "data-type"]
        },
        "fci":{
            "title":"FCI",
            "description": "FCI instance",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "alpha":{
                    "$ref": "#/definitions/flexprob"
                },
                "test":{
                    "type": "string"
                },
                "data-type":{
                    "type":"string"
                }
            },
            "additionalProperties": false,
            "required": ["id","plot_legend", "alpha", 
                         "test"]
        },
        "gfci":{
            "title": "GFCI (parameter setting)",
            "description": "GFCI instance",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "alpha":{
                    "$ref": "#/definitions/flexprob"
                },
                "test":{
                    "type": "string"
                },
                "score":{
                    "type": "string"
                },
                "data-type":{
                    "type":"string"
                }
            },
            "additionalProperties": false,
            "required": ["id","plot_legend", "alpha", 
                         "test"]
        },        
        "rfci":{
            "title": "RFCI",
            "description": "RFCI instance",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "alpha":{
                    "$ref": "#/definitions/flexprob"
                },
                "test":{
                    "type": "string"
                },
                "data-type":{
                    "type":"string"
                }
            },
            "additionalProperties": false,
            "required": ["id","plot_legend", "alpha", 
                         "test"]
        },        

        "pcalg":{
            "title": "PC algorithm",
            "description": "PC algorithm instance",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "alpha":{
                    "$ref": "#/definitions/flexprob"
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "alpha"]
        },
        "mmhc":{
            "title": "Max-min hill climbing algorithm (MMHC)",
            "description": "MMHC algorithm instance",
            "type":"object",
            "properties": {
                "id": {
                    "type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "restrict.args":{
                    "title": "Parameters for mmhc",
                    "type":"object",
                    "properties": {
                    "alpha":{
                        "$ref": "#/definitions/flexprob"
                        }
                    },
                    "required": ["alpha"]
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "restrict.args"]
        },
        "h2pc":{
            "title": "H2PC algorithm",
            "description": "H2PC algorithm instance",
            "type":"object",
            "properties": {
                "id": {
                    "type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "restrict.args":{
                    "title": "Paramters for h2pc",
                    "type":"object",
                    "properties": {
                    "alpha":{
                        "$ref": "#/definitions/flexprob"
                        }
                    },
                    "required": ["alpha"]
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "restrict.args"]
        },

        "interiamb":{
            "title": "Inter-IAMB algorithm",
            "description": "Inter-IAMB algorithm instance",
            "type":"object",
            "properties": {
                "id": {
                    "type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "alpha":{
                    "$ref": "#/definitions/flexprob"
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "alpha"]
        },
        "gs":{
            "title": "Grow shrink (GS) algorithm (paramter setting)",
            "description": "Grow shrink (GS) algorithm instance",
            "type":"object",
            "properties": {
                "id": {
                    "type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "alpha":{
                    "$ref": "#/definitions/flexprob"
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "alpha"]
        },
        "tabu":{
            "title": "TABU search (parameter setting)",
            "description": "TABU algorithm instance",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "beta":{
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "score":{
                    "type":"string"
                },
                "iss":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "iss.mu":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "l":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "k":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior":{
                    "type":"string"
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "beta", "score", "iss", "iss.mu", "l", "k", "prior"]
        },
        "hc":{
            "title": "HC algorithm (parameter setting)",
            "description": "HC algorithm instance",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "perturb":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "restart":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "beta":{
                    "$ref": "#/definitions/flexnonnegnum"
                },
                "score":{
                    "type":"string"
                },
                "iss":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "iss.mu":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "l":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "k":{
                    "$ref": "#/definitions/flexnonnegint"
                },
                "prior":{
                    "type":"string"
                }
            },
            "additionalProperties": false,
            "required": ["id", "plot_legend", "beta", "score", "iss", "iss.mu", "l", "k", "prior", "perturb", "restart"]
        },

        "itsearch":{
            "title": "Iterative search (paramter setting)",
            "description": "Iterative search +1 algorithm instance",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "optional": {
                    "title":"Parameters for itsearch",
                    "description": "Algorithm parameters to show in plotting",
                    "type": "object",
                    "properties": {
                        "MAP":{
                            "type":"boolean"
                        },
                        "plus1it":{
                            "$ref": "#/definitions/flexnonnegintnull"
                        },
                        "posterior":{
                            "$ref": "#/definitions/flexprobnull"
                        },
                        "scoretype":{
                            "type":"string"
                        },
                        "chi":{
                            "$ref": "#/definitions/flexnonnegnumnull"
                        },
                        "edgepf":{
                            "$ref": "#/definitions/flexnonnegnumnull"
                        },
                        "am":{
                            "$ref": "#/definitions/flexnonnegnumnull"
                        },
                        "aw":{
                            "$ref": "#/definitions/flexnonnegnumnull"
                        }
                    },
                    "additionalProperties": false,
                    "required": ["MAP", "plus1it", "posterior", "scoretype", "chi", "edgepf", "am", "aw"]
                }
            }
        },
        "order_mcmc":{
            "title": "Order MCMC (paramter setting  )",
            "description": "Order MCMC algorithm instance",
            "type":"object",
            "properties": {
                "id": {"type":"string",
                    "description":"Unique idenfifier"
                },
                "plot_legend": {
                    "description": "Legend to show in plotting",
                    "type": "string"
                },
                "startspace":{
                    "type":"string"
                },
                "optional":{
                    "type":"object",
                    "title": "Parameters for order_mcmc",
                    "properties": {
                        "plus1":{
                            "type":"boolean"
                        }
                    },
                    "required": ["plus1"],
                    "additionalProperties": false
                },
                "scoretype":{
                    "type":"string"
                },
                "chi":{
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "edgepf":{
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "am":{
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "aw":{
                    "$ref": "#/definitions/flexnonnegnumnull"
                },
                "threshold":{
                    "$ref": "#/definitions/flexprob"                    
                },
                "burnin":{
                    "$ref": "#/definitions/flexnonnegint"
                }
            },
            "additionalProperties": false,
            "required": ["scoretype", "chi", "edgepf", "am", "aw", "threshold", "burnin"]
        }
    },
    "additionalProperties": false
}
